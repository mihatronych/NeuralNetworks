{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"gx1PChnvnsma"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","%matplotlib inline\n","#https://scikit-learn.ru/6-2-feature-extraction/\n","from sklearn.metrics import accuracy_score"]},{"cell_type":"markdown","metadata":{"id":"XUollrNInsmk"},"source":["Let's train the model again first - to use its results later in this notebook"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xsa2IXhAnsmo"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction import DictVectorizer\n","from sklearn.linear_model import LogisticRegression"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BwZfCbsynsmr"},"outputs":[],"source":["df = pd.read_csv('https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-03-churn-prediction/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n","\n","df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\n","df['TotalCharges'] = df['TotalCharges'].fillna(0)\n","\n","df.columns = df.columns.str.lower().str.replace(' ', '_')\n","\n","string_columns = list(df.dtypes[df.dtypes == 'object'].index)\n","\n","for col in string_columns:\n","    df[col] = df[col].str.lower().str.replace(' ', '_')\n","\n","df.churn = (df.churn == 'yes').astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fIS_X0DQnsms"},"outputs":[],"source":["df_train_full, df_test = train_test_split(df, test_size=0.2, random_state=1)\n","df_train, df_val = train_test_split(df_train_full, test_size=0.33, random_state=11)\n","\n","y_train = df_train.churn.values\n","y_val = df_val.churn.values\n","\n","del df_train['churn']\n","del df_val['churn']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GKIzXK4gnsmu"},"outputs":[],"source":["categorical = ['gender', 'seniorcitizen', 'partner', 'dependents',\n","               'phoneservice', 'multiplelines', 'internetservice',\n","               'onlinesecurity', 'onlinebackup', 'deviceprotection',\n","               'techsupport', 'streamingtv', 'streamingmovies',\n","               'contract', 'paperlessbilling', 'paymentmethod']\n","numerical = ['tenure', 'monthlycharges', 'totalcharges']"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"BNIYlhU1nsmw"},"outputs":[],"source":["train_dict = df_train[categorical + numerical].to_dict(orient='records')\n","\n","dv = DictVectorizer(sparse=False)\n","dv.fit(train_dict)\n","\n","X_train = dv.transform(train_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XDzPQ8hpnsmy","executionInfo":{"status":"ok","timestamp":1684929770331,"user_tz":-180,"elapsed":15,"user":{"displayName":"","userId":""}},"outputId":"33198aed-fc0f-448a-db40-b0d10c25ab49","colab":{"base_uri":"https://localhost:8080/","height":75}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=1, solver='liblinear')"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=1, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=1, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":7}],"source":["model = LogisticRegression(solver='liblinear', random_state=1)\n","model.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vELJ_Slxnsm1"},"outputs":[],"source":["val_dict = df_val[categorical + numerical].to_dict(orient='records')\n","X_val = dv.transform(val_dict)\n","y_pred = model.predict_proba(X_val)[:, 1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yYK1lhaJnsm2","executionInfo":{"status":"ok","timestamp":1684929770624,"user_tz":-180,"elapsed":28,"user":{"displayName":"","userId":""}},"outputId":"aa1da783-0e94-422a-b680-27b8071f1a86","colab":{"base_uri":"https://localhost:8080/","height":75}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=1, solver='liblinear')"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=1, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=1, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":9}],"source":["small_subset = ['contract', 'tenure', 'totalcharges']\n","train_dict_small = df_train[small_subset].to_dict(orient='records')\n","dv_small = DictVectorizer(sparse=False)\n","dv_small.fit(train_dict_small)\n","\n","X_small_train = dv_small.transform(train_dict_small)\n","\n","model_small = LogisticRegression(solver='liblinear', random_state=1)\n","model_small.fit(X_small_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CV8NhMvmnsm3"},"outputs":[],"source":["val_dict_small = df_val[small_subset].to_dict(orient='records')\n","X_small_val = dv_small.transform(val_dict_small)\n","\n","y_pred_small = model_small.predict_proba(X_small_val)[:, 1]"]},{"cell_type":"markdown","metadata":{"id":"iHFCC0Xgnsm4"},"source":["## Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8vrcUxB4nsm5","executionInfo":{"status":"ok","timestamp":1684929770627,"user_tz":-180,"elapsed":27,"user":{"displayName":"","userId":""}},"outputId":"eac32adb-18d7-4a42-a98e-cf221e7d8cc2","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8016129032258065"]},"metadata":{},"execution_count":11}],"source":["y_pred = model.predict_proba(X_val)[:, 1]\n","churn = y_pred >= 0.5 # В идеале бы, проверить порог...\n","(churn == y_val).mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d77GR1KPnsm6"},"outputs":[],"source":["from sklearn.metrics import accuracy_score"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eFeua9jqnsm7","executionInfo":{"status":"ok","timestamp":1684929770629,"user_tz":-180,"elapsed":22,"user":{"displayName":"","userId":""}},"outputId":"28e58284-374a-49cc-9ecc-21a8afa56278","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8016129032258065"]},"metadata":{},"execution_count":13}],"source":["accuracy_score(y_val, y_pred >= 0.5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MGNJCaPinsm8","executionInfo":{"status":"ok","timestamp":1684929771121,"user_tz":-180,"elapsed":19,"user":{"displayName":"","userId":""}},"outputId":"1e59a4ae-d6aa-4e20-d60d-2a205503f42c","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])"]},"metadata":{},"execution_count":14}],"source":["thresholds = np.linspace(0, 1, 11) # проверяем пороги\n","thresholds"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yIs7jMmcnsm9","executionInfo":{"status":"ok","timestamp":1684929771122,"user_tz":-180,"elapsed":14,"user":{"displayName":"","userId":""}},"outputId":"7ebd1ff5-3e58-4f40-bf4c-ad89a68cd282","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["0.00 0.261\n","0.05 0.501\n","0.10 0.595\n","0.15 0.640\n","0.20 0.690\n","0.25 0.730\n","0.30 0.755\n","0.35 0.767\n","0.40 0.782\n","0.45 0.795\n","0.50 0.802\n","0.55 0.790\n","0.60 0.790\n","0.65 0.788\n","0.70 0.774\n","0.75 0.752\n","0.80 0.742\n","0.85 0.739\n","0.90 0.739\n","0.95 0.739\n","1.00 0.739\n"]}],"source":["thresholds = np.linspace(0, 1, 21)\n","\n","accuracies = []\n","\n","for t in thresholds:\n","    acc = accuracy_score(y_val, y_pred >= t)\n","    accuracies.append(acc)\n","    print('%0.2f %0.3f' % (t, acc))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3x8KZjggnsm-","executionInfo":{"status":"ok","timestamp":1684929771975,"user_tz":-180,"elapsed":862,"user":{"displayName":"","userId":""}},"outputId":"9234936c-e4ad-42b9-e11a-534c2ad69eac","colab":{"base_uri":"https://localhost:8080/","height":410}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(6, 4))\n","\n","plt.plot(thresholds, accuracies, color='black')\n","\n","plt.title('Threshold vs Accuracy')\n","plt.xlabel('Threshold')\n","plt.ylabel('Accuracy')\n","\n","plt.xticks(np.linspace(0, 1, 11))\n","\n","# plt.savefig('04_threshold_accuracy.svg')\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YVx99G_Snsm_","executionInfo":{"status":"ok","timestamp":1684929771977,"user_tz":-180,"elapsed":111,"user":{"displayName":"","userId":""}},"outputId":"6bc2c163-a987-4d79-8d0d-11cac1eca783","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7672043010752688"]},"metadata":{},"execution_count":17}],"source":["churn_small = y_pred_small >= 0.5\n","(churn_small == y_val).mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5nMyWMLqnsnA","executionInfo":{"status":"ok","timestamp":1684929771979,"user_tz":-180,"elapsed":106,"user":{"displayName":"","userId":""}},"outputId":"1eed54b4-50e2-40f6-8cd1-9952eb9ab993","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7672043010752688"]},"metadata":{},"execution_count":18}],"source":["accuracy_score(y_val, churn_small)"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"P_PoxFLynsnC","executionInfo":{"status":"ok","timestamp":1684929771982,"user_tz":-180,"elapsed":104,"user":{"displayName":"","userId":""}},"outputId":"291a3ada-7cd4-4234-c5d9-de317d94e94a","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False, False, ..., False, False, False])"]},"metadata":{},"execution_count":19}],"source":["size_val = len(y_val)\n","baseline = np.repeat(False, size_val)\n","baseline"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kIJ3_gRqnsnD","executionInfo":{"status":"ok","timestamp":1684929771983,"user_tz":-180,"elapsed":99,"user":{"displayName":"","userId":""}},"outputId":"27c8466e-0bdf-41e8-d3c6-c8d6621f4e2e","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7387096774193549"]},"metadata":{},"execution_count":20}],"source":["accuracy_score(baseline, y_val)"]},{"cell_type":"markdown","metadata":{"id":"yxxrlNmunsnE"},"source":["## Confusion table"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ROkKjjC2nsnF"},"outputs":[],"source":["true_positive = ((y_pred >= 0.5) & (y_val == 1)).sum()\n","false_positive = ((y_pred >= 0.5) & (y_val == 0)).sum()\n","false_negative = ((y_pred < 0.5) & (y_val == 1)).sum()\n","true_negative = ((y_pred < 0.5) & (y_val == 0)).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"wwrAgxlCnsnF","executionInfo":{"status":"ok","timestamp":1684929771986,"user_tz":-180,"elapsed":97,"user":{"displayName":"","userId":""}},"outputId":"8133c0b0-7f79-483b-ca07-ca7bc7005322","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1202,  172],\n","       [ 197,  289]])"]},"metadata":{},"execution_count":22}],"source":["confusion_table = np.array(\n","     # predict neg    pos\n","    [[true_negative, false_positive], # actual neg\n","     [false_negative, true_positive]]) # actual pos\n","\n","confusion_table"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"B63h1L_MnsnG","executionInfo":{"status":"ok","timestamp":1684929771988,"user_tz":-180,"elapsed":94,"user":{"displayName":"","userId":""}},"outputId":"0c586e7f-d22a-4edf-d892-c936ba94a205","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.64623656, 0.09247312],\n","       [0.10591398, 0.15537634]])"]},"metadata":{},"execution_count":23}],"source":["confusion_table / confusion_table.sum()"]},{"cell_type":"markdown","metadata":{"id":"rADG8RkqnsnH"},"source":["## Precision and recall"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nwn9Du4snsnH","executionInfo":{"status":"ok","timestamp":1684929771990,"user_tz":-180,"elapsed":90,"user":{"displayName":"","userId":""}},"outputId":"bcd110c8-0a98-445d-cdf4-a34e3122247d","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.6268980477223427, 0.5946502057613169)"]},"metadata":{},"execution_count":24}],"source":["precision = true_positive / (true_positive + false_positive)\n","recall = true_positive / (true_positive + false_negative)\n","precision, recall"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eNy4uPzVnsnI","executionInfo":{"status":"ok","timestamp":1684929771991,"user_tz":-180,"elapsed":86,"user":{"displayName":"","userId":""}},"outputId":"9bb705a9-d734-42ff-d12b-3f836ac3bdde","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.64623656, 0.09247312],\n","       [0.10591398, 0.15537634]])"]},"metadata":{},"execution_count":25}],"source":["confusion_table / confusion_table.sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NX31BSAwnsnI","executionInfo":{"status":"ok","timestamp":1684929771992,"user_tz":-180,"elapsed":82,"user":{"displayName":"","userId":""}},"outputId":"c9da3719-1550-433b-d5f6-f82e832cdc01","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.6268980477223427, 0.5946502057613169)"]},"metadata":{},"execution_count":26}],"source":["precision = true_positive / (true_positive + false_positive)\n","recall = true_positive / (true_positive + false_negative)\n","precision, recall"]},{"cell_type":"markdown","metadata":{"id":"Q3ylKLvbnsnJ"},"source":["## ROC and AUC"]},{"cell_type":"markdown","metadata":{"id":"HIwh8OrNnsnJ"},"source":["TPR and FPR"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CiZBej7cnsnK"},"outputs":[],"source":["scores = []\n","\n","thresholds = np.linspace(0, 1, 101)\n","\n","for t in thresholds: #B\n","    tp = ((y_pred >= t) & (y_val == 1)).sum()\n","    fp = ((y_pred >= t) & (y_val == 0)).sum()\n","    fn = ((y_pred < t) & (y_val == 1)).sum()\n","    tn = ((y_pred < t) & (y_val == 0)).sum()\n","    scores.append((t, tp, fp, fn, tn))\n","\n","df_scores = pd.DataFrame(scores)\n","df_scores.columns = ['threshold', 'tp', 'fp', 'fn', 'tn']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JiAqHqmsnsnK","executionInfo":{"status":"ok","timestamp":1684929771999,"user_tz":-180,"elapsed":83,"user":{"displayName":"","userId":""}},"outputId":"95c6587a-f95d-478d-8a54-ac84ca941519","colab":{"base_uri":"https://localhost:8080/","height":394}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     threshold   tp    fp   fn    tn\n","0          0.0  486  1374    0     0\n","10         0.1  458   726   28   648\n","20         0.2  421   512   65   862\n","30         0.3  380   350  106  1024\n","40         0.4  337   257  149  1117\n","50         0.5  289   172  197  1202\n","60         0.6  200   105  286  1269\n","70         0.7   99    34  387  1340\n","80         0.8    7     1  479  1373\n","90         0.9    0     0  486  1374\n","100        1.0    0     0  486  1374"],"text/html":["\n","  <div id=\"df-14da75df-d200-4a41-9eea-5e9124a902d6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>threshold</th>\n","      <th>tp</th>\n","      <th>fp</th>\n","      <th>fn</th>\n","      <th>tn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.1</td>\n","      <td>458</td>\n","      <td>726</td>\n","      <td>28</td>\n","      <td>648</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>0.2</td>\n","      <td>421</td>\n","      <td>512</td>\n","      <td>65</td>\n","      <td>862</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>0.3</td>\n","      <td>380</td>\n","      <td>350</td>\n","      <td>106</td>\n","      <td>1024</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.4</td>\n","      <td>337</td>\n","      <td>257</td>\n","      <td>149</td>\n","      <td>1117</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>0.5</td>\n","      <td>289</td>\n","      <td>172</td>\n","      <td>197</td>\n","      <td>1202</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>0.6</td>\n","      <td>200</td>\n","      <td>105</td>\n","      <td>286</td>\n","      <td>1269</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>0.7</td>\n","      <td>99</td>\n","      <td>34</td>\n","      <td>387</td>\n","      <td>1340</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>0.8</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>479</td>\n","      <td>1373</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>0.9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14da75df-d200-4a41-9eea-5e9124a902d6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-14da75df-d200-4a41-9eea-5e9124a902d6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-14da75df-d200-4a41-9eea-5e9124a902d6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}],"source":["df_scores[::10]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f-9fnmIbnsnL"},"outputs":[],"source":["df_scores['tpr'] = df_scores.tp / (df_scores.tp + df_scores.fn) # TPR = TP / (TP + FN)\n","df_scores['fpr'] = df_scores.fp / (df_scores.fp + df_scores.tn) # FPR = FP / (FP + TN)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CMndy-DnnsnL","executionInfo":{"status":"ok","timestamp":1684929772002,"user_tz":-180,"elapsed":82,"user":{"displayName":"","userId":""}},"outputId":"bcd8d77a-914e-4d04-9a90-92da3ea5b44b","colab":{"base_uri":"https://localhost:8080/","height":394}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     threshold   tp    fp   fn    tn       tpr       fpr\n","0          0.0  486  1374    0     0  1.000000  1.000000\n","10         0.1  458   726   28   648  0.942387  0.528384\n","20         0.2  421   512   65   862  0.866255  0.372635\n","30         0.3  380   350  106  1024  0.781893  0.254731\n","40         0.4  337   257  149  1117  0.693416  0.187045\n","50         0.5  289   172  197  1202  0.594650  0.125182\n","60         0.6  200   105  286  1269  0.411523  0.076419\n","70         0.7   99    34  387  1340  0.203704  0.024745\n","80         0.8    7     1  479  1373  0.014403  0.000728\n","90         0.9    0     0  486  1374  0.000000  0.000000\n","100        1.0    0     0  486  1374  0.000000  0.000000"],"text/html":["\n","  <div id=\"df-25425cec-70d0-4c08-a97f-cf7d4e7d3dbf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>threshold</th>\n","      <th>tp</th>\n","      <th>fp</th>\n","      <th>fn</th>\n","      <th>tn</th>\n","      <th>tpr</th>\n","      <th>fpr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.1</td>\n","      <td>458</td>\n","      <td>726</td>\n","      <td>28</td>\n","      <td>648</td>\n","      <td>0.942387</td>\n","      <td>0.528384</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>0.2</td>\n","      <td>421</td>\n","      <td>512</td>\n","      <td>65</td>\n","      <td>862</td>\n","      <td>0.866255</td>\n","      <td>0.372635</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>0.3</td>\n","      <td>380</td>\n","      <td>350</td>\n","      <td>106</td>\n","      <td>1024</td>\n","      <td>0.781893</td>\n","      <td>0.254731</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.4</td>\n","      <td>337</td>\n","      <td>257</td>\n","      <td>149</td>\n","      <td>1117</td>\n","      <td>0.693416</td>\n","      <td>0.187045</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>0.5</td>\n","      <td>289</td>\n","      <td>172</td>\n","      <td>197</td>\n","      <td>1202</td>\n","      <td>0.594650</td>\n","      <td>0.125182</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>0.6</td>\n","      <td>200</td>\n","      <td>105</td>\n","      <td>286</td>\n","      <td>1269</td>\n","      <td>0.411523</td>\n","      <td>0.076419</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>0.7</td>\n","      <td>99</td>\n","      <td>34</td>\n","      <td>387</td>\n","      <td>1340</td>\n","      <td>0.203704</td>\n","      <td>0.024745</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>0.8</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>479</td>\n","      <td>1373</td>\n","      <td>0.014403</td>\n","      <td>0.000728</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>0.9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25425cec-70d0-4c08-a97f-cf7d4e7d3dbf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-25425cec-70d0-4c08-a97f-cf7d4e7d3dbf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-25425cec-70d0-4c08-a97f-cf7d4e7d3dbf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}],"source":["df_scores[::10]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P_aYPSMWnsnL","executionInfo":{"status":"ok","timestamp":1684929772004,"user_tz":-180,"elapsed":81,"user":{"displayName":"","userId":""}},"outputId":"48f24be9-2da2-4982-ce79-41727ec7faaa","colab":{"base_uri":"https://localhost:8080/","height":410}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(6, 4))\n","\n","plt.plot(df_scores.threshold, df_scores.tpr, color='black', linestyle='solid', label='TPR')\n","plt.plot(df_scores.threshold, df_scores.fpr, color='black', linestyle='dashed', label='FPR')\n","plt.legend()\n","\n","plt.xticks(np.linspace(0, 1, 11))\n","plt.yticks(np.linspace(0, 1, 11))\n","\n","plt.xlabel('Thresholds')\n","plt.title('TPR and FPR')\n","\n","# plt.savefig('04_fpr_tpr_plot.svg')\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"hb9IiQMrnsnM"},"source":["Random baseline"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZOnrJB5ansnM"},"outputs":[],"source":["def tpr_fpr_dataframe(y_val, y_pred):\n","    scores = []\n","\n","    thresholds = np.linspace(0, 1, 101)\n","\n","    for t in thresholds:\n","        tp = ((y_pred >= t) & (y_val == 1)).sum()\n","        fp = ((y_pred >= t) & (y_val == 0)).sum()\n","        fn = ((y_pred < t) & (y_val == 1)).sum()\n","        tn = ((y_pred < t) & (y_val == 0)).sum()\n","\n","        scores.append((t, tp, fp, fn, tn))\n","\n","    df_scores = pd.DataFrame(scores)\n","    df_scores.columns = ['threshold', 'tp', 'fp', 'fn', 'tn']\n","\n","    df_scores['tpr'] = df_scores.tp / (df_scores.tp + df_scores.fn)\n","    df_scores['fpr'] = df_scores.fp / (df_scores.fp + df_scores.tn)\n","\n","    return df_scores"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vq04jwBNnsna","executionInfo":{"status":"ok","timestamp":1684929772007,"user_tz":-180,"elapsed":78,"user":{"displayName":"","userId":""}},"outputId":"5b631c5d-e0ba-40ab-8c5e-a7e87b910374","colab":{"base_uri":"https://localhost:8080/","height":394}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     threshold   tp    fp   fn    tn       tpr       fpr\n","0          0.0  486  1374    0     0  1.000000  1.000000\n","10         0.1  440  1236   46   138  0.905350  0.899563\n","20         0.2  392  1101   94   273  0.806584  0.801310\n","30         0.3  339   972  147   402  0.697531  0.707424\n","40         0.4  288   849  198   525  0.592593  0.617904\n","50         0.5  239   723  247   651  0.491770  0.526201\n","60         0.6  193   579  293   795  0.397119  0.421397\n","70         0.7  152   422  334   952  0.312757  0.307132\n","80         0.8   98   302  388  1072  0.201646  0.219796\n","90         0.9   57   147  429  1227  0.117284  0.106987\n","100        1.0    0     0  486  1374  0.000000  0.000000"],"text/html":["\n","  <div id=\"df-ffeaca6f-ed48-422a-a2ba-977e4e0211f3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>threshold</th>\n","      <th>tp</th>\n","      <th>fp</th>\n","      <th>fn</th>\n","      <th>tn</th>\n","      <th>tpr</th>\n","      <th>fpr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.1</td>\n","      <td>440</td>\n","      <td>1236</td>\n","      <td>46</td>\n","      <td>138</td>\n","      <td>0.905350</td>\n","      <td>0.899563</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>0.2</td>\n","      <td>392</td>\n","      <td>1101</td>\n","      <td>94</td>\n","      <td>273</td>\n","      <td>0.806584</td>\n","      <td>0.801310</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>0.3</td>\n","      <td>339</td>\n","      <td>972</td>\n","      <td>147</td>\n","      <td>402</td>\n","      <td>0.697531</td>\n","      <td>0.707424</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.4</td>\n","      <td>288</td>\n","      <td>849</td>\n","      <td>198</td>\n","      <td>525</td>\n","      <td>0.592593</td>\n","      <td>0.617904</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>0.5</td>\n","      <td>239</td>\n","      <td>723</td>\n","      <td>247</td>\n","      <td>651</td>\n","      <td>0.491770</td>\n","      <td>0.526201</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>0.6</td>\n","      <td>193</td>\n","      <td>579</td>\n","      <td>293</td>\n","      <td>795</td>\n","      <td>0.397119</td>\n","      <td>0.421397</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>0.7</td>\n","      <td>152</td>\n","      <td>422</td>\n","      <td>334</td>\n","      <td>952</td>\n","      <td>0.312757</td>\n","      <td>0.307132</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>0.8</td>\n","      <td>98</td>\n","      <td>302</td>\n","      <td>388</td>\n","      <td>1072</td>\n","      <td>0.201646</td>\n","      <td>0.219796</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>0.9</td>\n","      <td>57</td>\n","      <td>147</td>\n","      <td>429</td>\n","      <td>1227</td>\n","      <td>0.117284</td>\n","      <td>0.106987</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffeaca6f-ed48-422a-a2ba-977e4e0211f3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ffeaca6f-ed48-422a-a2ba-977e4e0211f3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ffeaca6f-ed48-422a-a2ba-977e4e0211f3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":33}],"source":["np.random.seed(1)\n","y_rand = np.random.uniform(0, 1, size=len(y_val))\n","df_rand = tpr_fpr_dataframe(y_val, y_rand)\n","df_rand[::10]"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"6TPNqFa0nsna","executionInfo":{"status":"ok","timestamp":1684929772284,"user_tz":-180,"elapsed":352,"user":{"displayName":"","userId":""}},"outputId":"d8be490d-1bf4-4cd0-f9c9-aa63ba818d37","colab":{"base_uri":"https://localhost:8080/","height":410}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(6, 4))\n","\n","plt.plot(df_rand.threshold, df_rand.tpr, color='black', linestyle='solid', label='TPR')\n","plt.plot(df_rand.threshold, df_rand.fpr, color='black', linestyle='dashed', label='FPR')\n","plt.legend()\n","\n","plt.xticks(np.linspace(0, 1, 11))\n","plt.yticks(np.linspace(0, 1, 11))\n","\n","plt.xlabel('Thresholds')\n","plt.title('TPR and FPR for the random model')\n","\n","#plt.savefig('04_fpr_tpr_plot_random.svg')\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"aFGyAhnsnsnb"},"source":["Ideal baseline:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y3SXGCJfnsnc","executionInfo":{"status":"ok","timestamp":1684929772286,"user_tz":-180,"elapsed":18,"user":{"displayName":"","userId":""}},"outputId":"cecd2deb-f801-414e-ae3c-4ce0980147af","colab":{"base_uri":"https://localhost:8080/","height":394}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     threshold   tp    fp   fn    tn       tpr       fpr\n","0          0.0  486  1374    0     0  1.000000  1.000000\n","10         0.1  486  1188    0   186  1.000000  0.864629\n","20         0.2  486  1002    0   372  1.000000  0.729258\n","30         0.3  486   816    0   558  1.000000  0.593886\n","40         0.4  486   630    0   744  1.000000  0.458515\n","50         0.5  486   444    0   930  1.000000  0.323144\n","60         0.6  486   258    0  1116  1.000000  0.187773\n","70         0.7  486    72    0  1302  1.000000  0.052402\n","80         0.8  372     0  114  1374  0.765432  0.000000\n","90         0.9  186     0  300  1374  0.382716  0.000000\n","100        1.0    1     0  485  1374  0.002058  0.000000"],"text/html":["\n","  <div id=\"df-e7b12043-1744-4e60-b13e-e64a150db06d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>threshold</th>\n","      <th>tp</th>\n","      <th>fp</th>\n","      <th>fn</th>\n","      <th>tn</th>\n","      <th>tpr</th>\n","      <th>fpr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>486</td>\n","      <td>1374</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.1</td>\n","      <td>486</td>\n","      <td>1188</td>\n","      <td>0</td>\n","      <td>186</td>\n","      <td>1.000000</td>\n","      <td>0.864629</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>0.2</td>\n","      <td>486</td>\n","      <td>1002</td>\n","      <td>0</td>\n","      <td>372</td>\n","      <td>1.000000</td>\n","      <td>0.729258</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>0.3</td>\n","      <td>486</td>\n","      <td>816</td>\n","      <td>0</td>\n","      <td>558</td>\n","      <td>1.000000</td>\n","      <td>0.593886</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.4</td>\n","      <td>486</td>\n","      <td>630</td>\n","      <td>0</td>\n","      <td>744</td>\n","      <td>1.000000</td>\n","      <td>0.458515</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>0.5</td>\n","      <td>486</td>\n","      <td>444</td>\n","      <td>0</td>\n","      <td>930</td>\n","      <td>1.000000</td>\n","      <td>0.323144</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>0.6</td>\n","      <td>486</td>\n","      <td>258</td>\n","      <td>0</td>\n","      <td>1116</td>\n","      <td>1.000000</td>\n","      <td>0.187773</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>0.7</td>\n","      <td>486</td>\n","      <td>72</td>\n","      <td>0</td>\n","      <td>1302</td>\n","      <td>1.000000</td>\n","      <td>0.052402</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>0.8</td>\n","      <td>372</td>\n","      <td>0</td>\n","      <td>114</td>\n","      <td>1374</td>\n","      <td>0.765432</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>0.9</td>\n","      <td>186</td>\n","      <td>0</td>\n","      <td>300</td>\n","      <td>1374</td>\n","      <td>0.382716</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>485</td>\n","      <td>1374</td>\n","      <td>0.002058</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7b12043-1744-4e60-b13e-e64a150db06d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e7b12043-1744-4e60-b13e-e64a150db06d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e7b12043-1744-4e60-b13e-e64a150db06d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":35}],"source":["num_neg = (y_val == 0).sum()\n","num_pos = (y_val == 1).sum()\n","\n","y_ideal = np.repeat([0, 1], [num_neg, num_pos])\n","y_pred_ideal = np.linspace(0, 1, num_neg + num_pos)\n","\n","df_ideal = tpr_fpr_dataframe(y_ideal, y_pred_ideal)\n","df_ideal[::10]"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"v8ne9DMAnsnd","executionInfo":{"status":"ok","timestamp":1684929772772,"user_tz":-180,"elapsed":501,"user":{"displayName":"","userId":""}},"outputId":"10715a93-a9b7-4df0-9d07-267370867213","colab":{"base_uri":"https://localhost:8080/","height":410}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(6, 4))\n","\n","plt.plot(df_ideal.threshold, df_ideal.tpr, color='black', linestyle='solid', label='TPR')\n","plt.plot(df_ideal.threshold, df_ideal.fpr, color='black', linestyle='dashed', label='FPR')\n","plt.legend()\n","\n","plt.xticks(np.linspace(0, 1, 11))\n","plt.yticks(np.linspace(0, 1, 11))\n","\n","plt.vlines(1 - y_val.mean(), -1, 2, linewidth=0.5, linestyle='dashed', color='grey')\n","plt.ylim(-0.03, 1.03)\n","\n","plt.xlabel('Thresholds')\n","plt.title('TPR and FPR for the ideal model')\n","\n","# plt.savefig('04_fpr_tpr_plot_ideal.svg')\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"QeVC7b-Snsne"},"source":["ROC curve"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"azZ4_dD9nsne","executionInfo":{"status":"ok","timestamp":1684929773892,"user_tz":-180,"elapsed":1150,"user":{"displayName":"","userId":""}},"outputId":"512decd1-447b-40f2-ea15-213ac318bcee","colab":{"base_uri":"https://localhost:8080/","height":487}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(5, 5))\n","\n","plt.plot(df_scores.fpr, df_scores.tpr, color='black', label='Model')\n","plt.plot(df_rand.fpr, df_rand.tpr, color='black', lw=1,\n","         linestyle='dashed', alpha=0.5, label='Random')\n","plt.plot(df_ideal.fpr, df_ideal.tpr, color='black', lw=0.5,\n","         linestyle='solid', alpha=0.5, label='Ideal')\n","\n","plt.legend()\n","\n","plt.xlim([-0.02, 1.02])\n","plt.ylim([-0.02, 1.02])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","\n","plt.title('ROC curve')\n","\n","# plt.savefig('04_roc_curve_with_baselines.svg')\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jIsqpqxpnsnf","executionInfo":{"status":"ok","timestamp":1684929773895,"user_tz":-180,"elapsed":23,"user":{"displayName":"","userId":""}},"outputId":"5752430d-a15e-498a-942c-d138e6232b8f","colab":{"base_uri":"https://localhost:8080/","height":487}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(5, 5))\n","\n","plt.plot(df_scores.fpr, df_scores.tpr, color='black')\n","plt.plot([0, 1], [0, 1], color='black', lw=0.7, linestyle='dashed', alpha=0.5)\n","\n","plt.xlim([-0.02, 1.02])\n","plt.ylim([-0.02, 1.02])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","\n","plt.title('ROC curve')\n","\n","# plt.savefig('04_roc_curve.svg')\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"_KnY_v6Cnsng"},"source":["Using Scikit-Learn for plotting the ROC curve"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SH986yGgnsnh"},"outputs":[],"source":["from sklearn.metrics import roc_curve\n","from sklearn.metrics import auc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UM9NoYIqnsnj"},"outputs":[],"source":["fpr, tpr, thresholds = roc_curve(y_val, y_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dYNaeTDynsnk","executionInfo":{"status":"ok","timestamp":1684929774232,"user_tz":-180,"elapsed":356,"user":{"displayName":"","userId":""}},"outputId":"a9e38cf7-ea61-42e2-a5da-41632ad5f0a4","colab":{"base_uri":"https://localhost:8080/","height":487}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(5, 5))\n","\n","plt.plot(fpr, tpr, color='black')\n","plt.plot([0, 1], [0, 1], color='black', lw=0.7, linestyle='dashed', alpha=0.5)\n","\n","plt.xlim([-0.02, 1.02])\n","plt.ylim([-0.02, 1.02])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","\n","plt.title('ROC curve')\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"lKDRRH9znsnl"},"source":["AUC: Area under the ROC curve"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e6jUX8GXnsnl"},"outputs":[],"source":["df_scores_small = tpr_fpr_dataframe(y_val, y_pred_small)"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"URdUto7dnsnm","executionInfo":{"status":"ok","timestamp":1684929774235,"user_tz":-180,"elapsed":24,"user":{"displayName":"","userId":""}},"outputId":"99a624f3-611f-4a44-e151-3f05fb965458","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8359001084215382"]},"metadata":{},"execution_count":43}],"source":["auc(df_scores.fpr, df_scores.tpr)"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"PzQ8hslCnsnm","executionInfo":{"status":"ok","timestamp":1684929774237,"user_tz":-180,"elapsed":21,"user":{"displayName":"","userId":""}},"outputId":"db7f0a67-3ebb-4a49-dfd3-af165915818a","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8125475467380692"]},"metadata":{},"execution_count":44}],"source":["auc(df_scores_small.fpr, df_scores_small.tpr)"]},{"cell_type":"markdown","metadata":{"id":"-FSB6raCnsnn"},"source":["Comparing multiple models with ROC curves"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L6kkr3uAnsnn","executionInfo":{"status":"ok","timestamp":1684929774640,"user_tz":-180,"elapsed":419,"user":{"displayName":"","userId":""}},"outputId":"bda54f2d-08eb-46fc-ea86-66ecbd531d19","colab":{"base_uri":"https://localhost:8080/","height":487}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fpr_large, tpr_large, _ = roc_curve(y_val, y_pred)\n","fpr_small, tpr_small, _ = roc_curve(y_val, y_pred_small)\n","\n","plt.figure(figsize=(5, 5))\n","\n","plt.plot(fpr_large, tpr_large, color='black', linestyle='solid', label='Large')\n","plt.plot(fpr_small, tpr_small, color='black', linestyle='dashed', label='Small')\n","plt.plot([0, 1], [0, 1], color='black', lw=0.7, linestyle='dashed', alpha=0.5)\n","\n","plt.xlim([-0.02, 1.02])\n","plt.ylim([-0.02, 1.02])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","\n","plt.title('ROC curve')\n","plt.legend(loc='lower right')\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vDI2uhTbnsno"},"outputs":[],"source":["from sklearn.metrics import roc_auc_score"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MExqDgSHnsno","executionInfo":{"status":"ok","timestamp":1684929774642,"user_tz":-180,"elapsed":37,"user":{"displayName":"","userId":""}},"outputId":"7d2b1159-b235-4cfe-a24b-6b1150f369a3","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8363366398907399"]},"metadata":{},"execution_count":47}],"source":["roc_auc_score(y_val, y_pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4TUarzLrnsnp","executionInfo":{"status":"ok","timestamp":1684929774643,"user_tz":-180,"elapsed":32,"user":{"displayName":"","userId":""}},"outputId":"08d843c0-43d2-41b1-80fe-87dc57832cc5","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8129354083179088"]},"metadata":{},"execution_count":48}],"source":["roc_auc_score(y_val, y_pred_small)"]},{"cell_type":"markdown","metadata":{"id":"dhwXkQiLnsnp"},"source":["Interpretation of AUC: the probability that a randomly chosen positive example\n","ranks higher than a randomly chosen negative example"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"nvzWRi1snsnq","executionInfo":{"status":"ok","timestamp":1684929774651,"user_tz":-180,"elapsed":34,"user":{"displayName":"","userId":""}},"outputId":"636ff954-9f42-42a4-947d-0e05940805c5","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8356"]},"metadata":{},"execution_count":49}],"source":["neg = y_pred[y_val == 0]\n","pos = y_pred[y_val == 1]\n","\n","np.random.seed(1)\n","neg_choice = np.random.randint(low=0, high=len(neg), size=10000)\n","pos_choice = np.random.randint(low=0, high=len(pos), size=10000)\n","(pos[pos_choice] > neg[neg_choice]).mean()"]},{"cell_type":"markdown","metadata":{"id":"cuekxlh_nsnr"},"source":["## K-fold cross-validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xwOCFX1Onsnr"},"outputs":[],"source":["def train(df, y):\n","    cat = df[categorical + numerical].to_dict(orient='records')\n","    \n","    dv = DictVectorizer(sparse=False)\n","    dv.fit(cat)\n","\n","    X = dv.transform(cat)\n","\n","    model = LogisticRegression(solver='liblinear')\n","    model.fit(X, y)\n","\n","    return dv, model\n","\n","\n","def predict(df, dv, model):\n","    cat = df[categorical + numerical].to_dict(orient='records')\n","    \n","    X = dv.transform(cat)\n","\n","    y_pred = model.predict_proba(X)[:, 1]\n","\n","    return y_pred"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5WXwhr4Gnsns"},"outputs":[],"source":["from sklearn.model_selection import KFold"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":false,"id":"-6PZD-BBnsnt"},"outputs":[],"source":["kfold = KFold(n_splits=10, shuffle=True, random_state=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zX5ybck1nsnt"},"outputs":[],"source":["aucs = []\n","\n","for train_idx, val_idx in kfold.split(df_train_full):\n","    df_train = df_train_full.iloc[train_idx]\n","    y_train = df_train.churn.values\n","\n","    df_val = df_train_full.iloc[val_idx]\n","    y_val = df_val.churn.values\n","\n","    dv, model = train(df_train, y_train)\n","    y_pred = predict(df_val, dv, model)\n","\n","    rocauc = roc_auc_score(y_val, y_pred)\n","    aucs.append(rocauc)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KrC0h6f7nsnu","executionInfo":{"status":"ok","timestamp":1684929782417,"user_tz":-180,"elapsed":33,"user":{"displayName":"","userId":""}},"outputId":"f8eea240-5ca0-4e14-c9a5-9ec2b42e6695","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.849, 0.841, 0.859, 0.833, 0.824, 0.842, 0.844, 0.822, 0.845,\n","       0.861])"]},"metadata":{},"execution_count":54}],"source":["np.array(aucs).round(3)"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"bo26itGpnsnv","executionInfo":{"status":"ok","timestamp":1684929782418,"user_tz":-180,"elapsed":30,"user":{"displayName":"","userId":""}},"outputId":"275bce99-8910-4623-86a0-9aed1f2b36cb","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["auc = 0.842 ± 0.012\n"]}],"source":["print('auc = %0.3f ± %0.3f' % (np.mean(aucs), np.std(aucs)))"]},{"cell_type":"markdown","metadata":{"id":"SHIvNL4insnw"},"source":["Tuning the parameter `C`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nc5UWUXfnsnw"},"outputs":[],"source":["def train(df, y, C=1.0):\n","    cat = df[categorical + numerical].to_dict(orient='records')\n","    \n","    dv = DictVectorizer(sparse=False)\n","    dv.fit(cat)\n","\n","    X = dv.transform(cat)\n","\n","    model = LogisticRegression(solver='liblinear', C=C)\n","    model.fit(X, y)\n","\n","    return dv, model"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"N3VyAGH5nsnx","executionInfo":{"status":"ok","timestamp":1684929796709,"user_tz":-180,"elapsed":14313,"user":{"displayName":"","userId":""}},"outputId":"4ac615ec-5366-492c-b7a7-9e66d74effed","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["C=0.001, auc = 0.825 ± 0.013\n","C=0.01, auc = 0.839 ± 0.009\n","C=0.1, auc = 0.841 ± 0.008\n","C=0.5, auc = 0.841 ± 0.007\n","C=1, auc = 0.841 ± 0.007\n","C=10, auc = 0.841 ± 0.007\n"]}],"source":["nfolds = 5\n","kfold = KFold(n_splits=nfolds, shuffle=True, random_state=1)\n","\n","for C in [0.001, 0.01, 0.1, 0.5, 1, 10]:\n","    aucs = []\n","\n","    for train_idx, val_idx in kfold.split(df_train_full):\n","        df_train = df_train_full.iloc[train_idx]\n","        df_val = df_train_full.iloc[val_idx]\n","\n","        y_train = df_train.churn.values\n","        y_val = df_val.churn.values\n","\n","        dv, model = train(df_train, y_train, C=C)\n","        y_pred = predict(df_val, dv, model)\n","        \n","        auc = roc_auc_score(y_val, y_pred)\n","        aucs.append(auc)\n","\n","    print('C=%s, auc = %0.3f ± %0.3f' % (C, np.mean(aucs), np.std(aucs)))"]},{"cell_type":"markdown","metadata":{"id":"qtqOA8cGnsny"},"source":["Full retrain"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QR5GTcjMnsny","executionInfo":{"status":"ok","timestamp":1684929796710,"user_tz":-180,"elapsed":16,"user":{"displayName":"","userId":""}},"outputId":"acd1ac5b-7ebb-4542-934e-2f5109c1f172","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["auc = 0.858\n"]}],"source":["y_train = df_train_full.churn.values\n","y_test = df_test.churn.values\n","\n","dv, model = train(df_train_full, y_train, C=0.5)\n","y_pred = predict(df_test, dv, model)\n","\n","auc = roc_auc_score(y_test, y_pred)\n","print('auc = %.3f' % auc)"]},{"cell_type":"markdown","source":["# Наше"],"metadata":{"id":"6iVQNEMkHyHe"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"JHjA1Gsrnsn0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1685090720765,"user_tz":-180,"elapsed":6748,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"38a3d9bc-5d3b-4df9-e61c-251a0d641988"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting praat-parselmouth\n","  Downloading praat_parselmouth-0.4.3-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (10.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.7/10.7 MB\u001b[0m \u001b[31m62.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from praat-parselmouth) (1.22.4)\n","Installing collected packages: praat-parselmouth\n","Successfully installed praat-parselmouth-0.4.3\n"]}],"source":["!pip install praat-parselmouth"]},{"cell_type":"code","source":["from PIL import Image, ImageDraw, ImageFont\n","from glob import glob\n","import pandas as pd\n","import parselmouth\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import os\n","import os.path\n","from sklearn.metrics import auc\n","from scipy.interpolate import interp1d"],"metadata":{"id":"LR-Q41k4INIF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def readfile(filename):\n","  lines=[line for line in open(filename)]\n","  \n","  colnames=lines[0].strip().split('\\t')[1:]\n","  rownames=[]\n","  data=[]\n","  for line in lines[1:]:\n","    p=line.strip().split('\\t')\n","\n","    rownames.append(p[0])\n","\n","    data.append([float(x) for x in p[1:]])\n","  return rownames,colnames,data"],"metadata":{"id":"qQJD49kBIOxx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_BcWW1RRIP_W","executionInfo":{"status":"ok","timestamp":1685090748641,"user_tz":-180,"elapsed":24764,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"be715e48-d761-405b-cc28-74bb9be36fd9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["path = \"/content/drive/MyDrive/STUDY_MY/Нейросети/cta0001-0010\""],"metadata":{"id":"v0mWl4CCIRV1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["seg_files_b1 = sorted(glob(path+'/*.seg_B1'))"],"metadata":{"id":"KjXYOOAOISi5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["seg_files_y1 = sorted(glob(path+'/*.seg_Y1'))"],"metadata":{"id":"v8a_zqaUIUAW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sound_files = sorted(glob(path+'/*.wav'))"],"metadata":{"id":"oa4CFt8IIVF4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def readseg_for_sintagmas(file_names):\n","  texts = []\n","  for f_n in file_names:\n","    lines=[line.strip() for line in open(f_n)]\n","    texts += [lines]\n","  return texts"],"metadata":{"id":"JQD94rKgIWIy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def detect_encoding(file_path):\n","    encoding = \"utf-8\"\n","    try:\n","        l = open(file_path, 'r', encoding=\"utf-8\").read()\n","        if l.startswith(\"\\ufeff\"):\n","            encoding = \"utf-8-sig\"\n","    except UnicodeDecodeError:\n","        try:\n","            open(file_path, 'r', encoding=\"utf-16\").read()\n","            encoding = \"utf-16\"\n","        except UnicodeError:\n","            encoding = \"cp1251\"\n","    return encoding"],"metadata":{"id":"EcWxU8yuIXXn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def read_seg(path):\n","  with open(path, \"r\", encoding=detect_encoding(path)) as f:\n","    lines = [i.strip() for i in f.readlines()]\n","  return lines"],"metadata":{"id":"fjgSkpGaIY1w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["read_seg(seg_files_b1[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZQZa_JocO8rD","executionInfo":{"status":"ok","timestamp":1685090812616,"user_tz":-180,"elapsed":835,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"e5d4765e-ca05-4868-f23e-c20d95baf6e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['[PARAMETERS]',\n"," 'SAMPLING_FREQ=22050',\n"," 'BYTE_PER_SAMPLE=2',\n"," 'CODE=0',\n"," 'N_CHANNEL=1',\n"," 'N_LABEL=13',\n"," '[LABELS]',\n"," '0,2,j',\n"," '8492,2,u0',\n"," \"12708,2,r'\",\n"," '13708,2,i4',\n"," '18180,2,t',\n"," \"24904,2,r'\",\n"," '25940,2,i0',\n"," '31544,2,f',\n"," '36806,2,a4',\n"," '38604,2,n',\n"," '41618,2,a4',\n"," '44508,2,f',\n"," '54662,2,']"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["def readsegs(file_names): # Разбить бы на меньшее кол-во задач...\n","  syllables = []\n","  for f_n in file_names:\n","    lines=[line.strip() for line in open(f_n)]\n","    syl_line = []\n","    syllable = ''\n","    sounds = []\n","    sounds_lengths = []\n","    time_codes = []\n","    syllable_length = 0\n","    position = 0\n","    for i in range(len(lines[7:])):\n","      k = i + 7\n","      labels = lines[k].split(\",\")\n","      if labels[2] != \"\":\n","        vowels = ['a','e','i','o','u','y']\n","        v_bool = False\n","        for v in vowels:\n","          if v in labels[2]:\n","            v_bool = True\n","        if not v_bool:\n","          syllable = syllable + labels[2]\n","          sounds.append(labels[2])\n","          #syllable_length += int(lines[k + 1].split(\",\")[0]) - int(labels[0])\n","          sounds_lengths.append((int(lines[k + 1].split(\",\")[0]) - int(labels[0]))/ int(lines[2].split('=')[1]) / int(lines[1].split('=')[1])) # делим на byte_per_sample и на частоту дискретизации\n","          time_codes.append((int(labels[0]))/ int(lines[2].split('=')[1]) / int(lines[1].split('=')[1])) # делим на byte_per_sample и на частоту дискретизации\n","        if v_bool:\n","          syllable = syllable + labels[2][0]\n","          sounds.append(labels[2][:-1])\n","          position = int(labels[2][1])\n","          #syllable_length += int(lines[k + 1].split(\",\")[0]) - int(labels[0])\n","          sounds_lengths.append((int(lines[k + 1].split(\",\")[0]) - int(labels[0]))/ int(lines[2].split('=')[1]) / int(lines[1].split('=')[1])) # делим на byte_per_sample и на частоту дискретизации\n","          time_codes.append((int(labels[0]))/ int(lines[2].split('=')[1]) / int(lines[1].split('=')[1])) # делим на byte_per_sample и на частоту дискретизации\n","          syllable_length = round(sum(sounds_lengths), 2)\n","          syl_line += [[syllable, syllable_length, int(position), sounds, sounds_lengths, time_codes, f_n]]\n","          syllable = \"\"\n","          sounds = []\n","          sounds_lengths = []\n","          time_codes = []\n","          position = 0\n","          v_bool = False\n","    syllables += syl_line\n","  \n","  res = ['sound;time_code;file;sound_length;syllable;syllable_length;stress_position']\n","  for syl in syllables:\n","    for num, sound in enumerate(syl[3]):\n","      g = [str(sound), str(syl[5][num]), str(syl[6].split('/')[-1].split(\".\")[0]), str(syl[4][num])] + [str(l) for l in syl[:-4]]\n","      #g = [str(l) for l in syl]\n","      res.append(\";\".join(g))\n","  \n","  with open('syllables.txt', 'w') as fw:\n","    fw.write(\"\\n\".join(res))\n","  return res"],"metadata":{"id":"O5l_qYfWIlvl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["readsegs(seg_files_b1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4IFl3Wj_JoEL","executionInfo":{"status":"ok","timestamp":1685090819164,"user_tz":-180,"elapsed":3553,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"d1161511-c1aa-49ab-8584-2086e7c6cf92"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['sound;time_code;file;sound_length;syllable;syllable_length;stress_position',\n"," 'j;0.0;cta0001;0.192562358276644;ju;0.29;0',\n"," 'u;0.192562358276644;cta0001;0.09560090702947846;ju;0.29;0',\n"," \"r';0.28816326530612246;cta0001;0.022675736961451247;r'i;0.12;4\",\n"," \"i;0.3108390022675737;cta0001;0.10140589569160997;r'i;0.12;4\",\n"," \"t;0.4122448979591837;cta0001;0.1524716553287982;tr'i;0.3;0\",\n"," \"r';0.5647165532879819;cta0001;0.02349206349206349;tr'i;0.3;0\",\n"," \"i;0.5882086167800453;cta0001;0.12707482993197278;tr'i;0.3;0\",\n"," 'f;0.7152834467120182;cta0001;0.11931972789115647;fa;0.16;4',\n"," 'a;0.8346031746031746;cta0001;0.04077097505668934;fa;0.16;4',\n"," 'n;0.8753741496598639;cta0001;0.06834467120181406;na;0.13;4',\n"," 'a;0.943718820861678;cta0001;0.0655328798185941;na;0.13;4',\n"," 'a;0.0;cta0002;0.14326530612244898;a;0.14;1',\n"," \"b;0.14326530612244898;cta0002;0.14766439909297052;bm'e;0.43;0\",\n"," \"m';0.2909297052154195;cta0002;0.11315192743764173;bm'e;0.43;0\",\n"," \"e;0.40408163265306124;cta0002;0.1708843537414966;bm'e;0.43;0\",\n"," 'v;0.0;cta0003;0.1252607709750567;vy;0.21;1',\n"," 'y;0.1252607709750567;cta0003;0.08195011337868481;vy;0.21;1',\n"," 'j;0.2072108843537415;cta0003;0.1164172335600907;ju;0.21;0',\n"," 'u;0.3236281179138322;cta0003;0.09741496598639456;ju;0.21;0',\n"," \"l';0.42104308390022677;cta0003;0.0727437641723356;l'i;0.14;4\",\n"," \"i;0.49378684807256235;cta0003;0.06956916099773243;l'i;0.14;4\",\n"," 'm;0.5633560090702948;cta0003;0.1329251700680272;ma;0.25;0',\n"," 'a;0.696281179138322;cta0003;0.11732426303854876;ma;0.25;0',\n"," \"d';0.8136054421768707;cta0003;0.07473922902494332;d'dm'i;0.32;0\",\n"," \"d;0.888344671201814;cta0003;0.08498866213151927;d'dm'i;0.32;0\",\n"," \"m';0.9733333333333334;cta0003;0.08907029478458049;d'dm'i;0.32;0\",\n"," \"i;1.062403628117914;cta0003;0.07600907029478458;d'dm'i;0.32;0\",\n"," \"t;1.1384126984126983;cta0003;0.11301587301587301;tr'i;0.21;4\",\n"," \"r';1.2514285714285713;cta0003;0.03741496598639456;tr'i;0.21;4\",\n"," \"i;1.288843537414966;cta0003;0.0582312925170068;tr'i;0.21;4\",\n"," 'i;1.3470748299319728;cta0003;0.062403628117913834;i;0.06;4',\n"," 'v;1.4094784580498867;cta0003;0.05219954648526077;va;0.1;4',\n"," 'a;1.4616780045351474;cta0003;0.05020408163265306;va;0.1;4',\n"," \"k;1.5118820861678004;cta0003;0.09224489795918367;ks'e;0.32;0\",\n"," \"s';1.604126984126984;cta0003;0.13215419501133788;ks'e;0.32;0\",\n"," \"e;1.736281179138322;cta0003;0.0981859410430839;ks'e;0.32;0\",\n"," \"n';1.8344671201814058;cta0003;0.07746031746031747;n'i;0.13;4\",\n"," \"i;1.9119274376417235;cta0003;0.05564625850340136;n'i;0.13;4\",\n"," 'e;1.9675736961451247;cta0003;0.06816326530612245;e;0.07;4',\n"," \"f';2.035736961451247;cta0003;0.1526984126984127;f'o;0.24;0\",\n"," \"o;2.18843537414966;cta0003;0.08866213151927438;f'o;0.24;0\",\n"," 'd;2.277097505668934;cta0003;0.06643990929705215;dy;0.1;4',\n"," 'y;2.3435374149659864;cta0003;0.03179138321995465;dy;0.1;4',\n"," 'r;2.375328798185941;cta0003;0.025578231292517007;ro;0.09;4',\n"," 'o;2.400907029478458;cta0003;0.06394557823129252;ro;0.09;4',\n"," 'v;2.4648526077097506;cta0003;0.08072562358276644;vna;0.33;4',\n"," 'n;2.545578231292517;cta0003;0.063718820861678;vna;0.33;4',\n"," 'a;2.609297052154195;cta0003;0.1873922902494331;vna;0.33;4',\n"," \"t';2.8759183673469386;cta0003;0.14113378684807257;t'i;0.22;1\",\n"," \"i;3.0170521541950115;cta0003;0.07977324263038549;t'i;0.22;1\",\n"," 'zh;3.096825396825397;cta0003;0.08739229024943311;zhy;0.15;1',\n"," 'y;3.1842176870748298;cta0003;0.06503401360544217;zhy;0.15;1',\n"," 'l;3.249251700680272;cta0003;0.06403628117913832;lo;0.15;0',\n"," 'o;3.3132879818594105;cta0003;0.08335600907029478;lo;0.15;0',\n"," 'z;3.396643990929705;cta0003;0.07746031746031747;zy;0.12;1',\n"," 'y;3.4741043083900225;cta0003;0.0473015873015873;zy;0.12;1',\n"," 'b;3.52140589569161;cta0003;0.07655328798185941;ba;0.16;1',\n"," 'a;3.5979591836734692;cta0003;0.08770975056689342;ba;0.16;1',\n"," \"l';3.685668934240363;cta0003;0.08099773242630386;l'e;0.22;0\",\n"," \"e;3.7666666666666666;cta0003;0.14099773242630387;l'e;0.22;0\",\n"," 'l;3.9076643990929707;cta0003;0.08643990929705216;la;0.2;4',\n"," 'a;3.9941043083900225;cta0003;0.11632653061224489;la;0.2;4',\n"," 'i;4.635056689342403;cta0003;0.1543764172335601;i;0.15;1',\n"," 'i;4.789433106575964;cta0003;0.10222222222222223;i;0.1;1',\n"," 'j;4.891655328798186;cta0003;0.08108843537414966;jo;0.16;0',\n"," 'o;4.9727437641723355;cta0003;0.07428571428571429;jo;0.16;0',\n"," 'a;5.04702947845805;cta0003;0.07809523809523809;a;0.08;1',\n"," \"t;5.125124716553288;cta0003;0.09034013605442177;tv'i;0.22;1\",\n"," \"v';5.21546485260771;cta0003;0.057324263038548755;tv'i;0.22;1\",\n"," \"i;5.272789115646258;cta0003;0.06888888888888889;tv'i;0.22;1\",\n"," \"z;5.341678004535147;cta0003;0.09723356009070294;zl'i;0.25;0\",\n"," \"l';5.43891156462585;cta0003;0.07061224489795918;zl'i;0.25;0\",\n"," \"i;5.5095238095238095;cta0003;0.07773242630385488;zl'i;0.25;0\",\n"," 'v;5.587256235827664;cta0003;0.06507936507936508;vbo;0.29;0',\n"," 'b;5.65233560090703;cta0003;0.10616780045351473;vbo;0.29;0',\n"," 'o;5.758503401360544;cta0003;0.1180952380952381;vbo;0.29;0',\n"," \"t;5.876598639455782;cta0003;0.0654421768707483;tk'i;0.21;4\",\n"," \"k';5.94204081632653;cta0003;0.08095238095238096;tk'i;0.21;4\",\n"," \"i;6.022993197278912;cta0003;0.062403628117913834;tk'i;0.21;4\",\n"," 'n;6.085396825396826;cta0003;0.02852607709750567;nsku;0.27;4',\n"," 's;6.113922902494331;cta0003;0.09442176870748299;nsku;0.27;4',\n"," 'k;6.208344671201814;cta0003;0.08562358276643992;nsku;0.27;4',\n"," 'u;6.293968253968254;cta0003;0.06517006802721088;nsku;0.27;4',\n"," 'j;6.359138321995465;cta0003;0.060045351473922905;ju;0.18;4',\n"," 'u;6.419183673469388;cta0003;0.11619047619047619;ju;0.18;4',\n"," \"g;6.8231746031746034;cta0003;0.07333333333333333;gd'e;0.21;0\",\n"," \"d';6.896507936507937;cta0003;0.08562358276643992;gd'e;0.21;0\",\n"," \"e;6.982131519274376;cta0003;0.05600907029478458;gd'e;0.21;0\",\n"," 'a;7.038140589569161;cta0003;0.06956916099773243;a;0.07;1',\n"," 'n;7.107709750566894;cta0003;0.0800907029478458;na;0.15;0',\n"," 'a;7.187800453514739;cta0003;0.07047619047619047;na;0.15;0',\n"," 'p;7.258276643990929;cta0003;0.11206349206349206;pra;0.17;2',\n"," 'r;7.370340136054422;cta0003;0.026530612244897958;pra;0.17;2',\n"," 'a;7.39687074829932;cta0003;0.032108843537414965;pra;0.17;2',\n"," \"l';7.428979591836734;cta0003;0.07242630385487528;l'i;0.14;1\",\n"," \"i;7.50140589569161;cta0003;0.06566893424036281;l'i;0.14;1\",\n"," 'zh;7.567074829931973;cta0003;0.08480725623582766;zha;0.18;0',\n"," 'a;7.6518820861678005;cta0003;0.09777777777777778;zha;0.18;0',\n"," 'l;7.7496598639455785;cta0003;0.060770975056689346;la;0.12;4',\n"," 'a;7.810430839002268;cta0003;0.055374149659863946;la;0.12;4',\n"," \"d;7.8658049886621315;cta0003;0.09655328798185941;dv'i;0.2;1\",\n"," \"v';7.962358276643991;cta0003;0.05614512471655329;dv'i;0.2;1\",\n"," \"i;8.018503401360544;cta0003;0.05201814058956916;dv'i;0.2;1\",\n"," 'n;8.070521541950113;cta0003;0.07428571428571429;na;0.17;0',\n"," 'a;8.144807256235827;cta0003;0.09419501133786848;na;0.17;0',\n"," 'c;8.239002267573696;cta0003;0.15210884353741497;cy;0.21;4',\n"," 'y;8.391111111111112;cta0003;0.05356009070294784;cy;0.21;4',\n"," \"d';8.444671201814058;cta0003;0.0673015873015873;d'dn'e;0.33;0\",\n"," \"d;8.511972789115646;cta0003;0.0781859410430839;d'dn'e;0.33;0\",\n"," \"n';8.59015873015873;cta0003;0.08104308390022676;d'dn'e;0.33;0\",\n"," \"e;8.671201814058957;cta0003;0.10321995464852608;d'dn'e;0.33;0\",\n"," 'j;8.774421768707484;cta0003;0.09015873015873016;jspa;0.3;2',\n"," 's;9.283718820861678;cta0003;0.08258503401360544;jspa;0.3;2',\n"," 'p;9.366303854875284;cta0003;0.07954648526077097;jspa;0.3;2',\n"," 'a;9.445850340136055;cta0003;0.04594104308390023;jspa;0.3;2',\n"," 'd;9.491791383219955;cta0003;0.05551020408163265;da;0.15;1',\n"," 'a;9.547301587301588;cta0003;0.09065759637188209;da;0.15;1',\n"," \"z;9.63795918367347;cta0003;0.09546485260770975;zr'e;0.22;0\",\n"," \"r';9.733424036281178;cta0003;0.03183673469387755;zr'e;0.22;0\",\n"," \"e;9.765260770975056;cta0003;0.09551020408163265;zr'e;0.22;0\",\n"," \"n';9.86077097505669;cta0003;0.0891609977324263;n'i;0.12;4\",\n"," \"i;9.949931972789116;cta0003;0.03256235827664399;n'i;0.12;4\",\n"," 'e;9.982494331065759;cta0003;0.037188208616780044;e;0.04;4',\n"," 'm;10.01968253968254;cta0003;0.0690702947845805;mna;0.19;1',\n"," 'n;10.08875283446712;cta0003;0.043673469387755105;mna;0.19;1',\n"," 'a;10.132426303854876;cta0003;0.07473922902494332;mna;0.19;1',\n"," 's;10.207165532879818;cta0003;0.1287074829931973;sa;0.22;0',\n"," 'a;10.335873015873016;cta0003;0.09301587301587301;sa;0.22;0',\n"," 'm;10.428888888888888;cta0003;0.07056689342403628;mo;0.14;4',\n"," 'o;10.499455782312925;cta0003;0.06448979591836734;mo;0.14;4',\n"," 'e;10.563945578231293;cta0003;0.0599546485260771;e;0.06;4',\n"," 'h;10.62390022675737;cta0003;0.14793650793650795;hu;0.24;0',\n"," 'u;10.771836734693878;cta0003;0.08734693877551021;hu;0.24;0',\n"," 't;10.859183673469389;cta0003;0.08394557823129252;tshy;0.26;4',\n"," 'sh;10.94312925170068;cta0003;0.12213151927437642;tshy;0.26;4',\n"," 'y;11.065260770975057;cta0003;0.049977324263038546;tshy;0.26;4',\n"," 'e;11.115238095238094;cta0003;0.13714285714285715;e;0.14;4',\n"," \"s';0.010612244897959184;cta0004;0.16321995464852607;s'i;0.23;1\",\n"," \"i;0.17383219954648527;cta0004;0.06557823129251701;s'i;0.23;1\",\n"," \"n';0.23941043083900226;cta0004;0.05319727891156462;n't'i;0.19;1\",\n"," \"t';0.2926077097505669;cta0004;0.07682539682539682;n't'i;0.19;1\",\n"," \"i;0.36943310657596373;cta0004;0.057006802721088434;n't'i;0.19;1\",\n"," \"b;0.42643990929705217;cta0004;0.09560090702947846;br'e;0.23;0\",\n"," \"r';0.5220408163265307;cta0004;0.02566893424036281;br'e;0.23;0\",\n"," \"e;0.5477097505668934;cta0004;0.11319727891156463;br'e;0.23;0\",\n"," \"z';0.660907029478458;cta0004;0.07337868480725623;z'd'e;0.24;0\",\n"," \"d';0.7342857142857143;cta0004;0.0818140589569161;z'd'e;0.24;0\",\n"," \"e;0.8160997732426304;cta0004;0.08299319727891157;z'd'e;0.24;0\",\n"," 'l;0.8990929705215419;cta0004;0.06693877551020408;ly;0.12;4',\n"," 'y;0.966031746031746;cta0004;0.052290249433106575;ly;0.12;4',\n"," \"l';1.0183219954648526;cta0004;0.05791383219954648;l'e;0.1;4\",\n"," \"e;1.076235827664399;cta0004;0.046848072562358276;l'e;0.1;4\",\n"," 'a;1.1230839002267574;cta0004;0.05002267573696145;a;0.05;1',\n"," \"p';1.173106575963719;cta0004;0.09451247165532879;p'e;0.17;1\",\n"," \"e;1.2676190476190476;cta0004;0.07387755102040816;p'e;0.17;1\",\n"," 'r;1.3414965986394558;cta0004;0.03292517006802721;ra;0.15;0',\n"," 'a;1.374421768707483;cta0004;0.12054421768707484;ra;0.15;0',\n"," 'c;1.494965986394558;cta0004;0.19251700680272107;cy;0.27;4',\n"," 'y;1.687482993197279;cta0004;0.07378684807256236;cy;0.27;4',\n"," 'y;1.7612698412698413;cta0004;0.11424036281179138;y;0.11;4',\n"," 'h;2.357732426303855;cta0004;0.14879818594104308;hu;0.25;0',\n"," 'u;2.506530612244898;cta0004;0.09696145124716553;hu;0.25;0',\n"," 't;2.6034920634920633;cta0004;0.07156462585034014;tshe;0.3;4',\n"," 'sh;2.6750566893424037;cta0004;0.12253968253968255;tshe;0.3;4',\n"," 'e;2.797596371882086;cta0004;0.10249433106575964;tshe;0.3;4',\n"," 'p;2.9000907029478458;cta0004;0.1274829931972789;py;0.17;1',\n"," 'y;3.0275736961451245;cta0004;0.038140589569161;py;0.17;1',\n"," \"t;3.065714285714286;cta0004;0.13115646258503402;tv'i;0.24;1\",\n"," \"v';3.19687074829932;cta0004;0.0690702947845805;tv'i;0.24;1\",\n"," \"i;3.2659410430839;cta0004;0.035192743764172335;tv'i;0.24;1\",\n"," \"r;3.3011337868480726;cta0004;0.0763718820861678;rd'i;0.27;0\",\n"," \"d';3.37750566893424;cta0004;0.10258503401360544;rd'i;0.27;0\",\n"," \"i;3.480090702947846;cta0004;0.08616780045351474;rd'i;0.27;0\",\n"," 'l;3.5662585034013605;cta0004;0.06430839002267574;ly;0.11;4',\n"," 'y;3.6305668934240365;cta0004;0.04113378684807256;ly;0.11;4',\n"," \"s';3.671700680272109;cta0004;0.15768707482993197;s'no;0.31;0\",\n"," \"n;4.519773242630386;cta0004;0.09605442176870749;s'no;0.31;0\",\n"," \"o;4.6158276643990925;cta0004;0.053922902494331064;s'no;0.31;0\",\n"," \"k;4.669750566893424;cta0004;0.06802721088435375;ks'e;0.26;0\",\n"," \"s';4.737777777777778;cta0004;0.10639455782312925;ks'e;0.26;0\",\n"," \"e;4.844172335600907;cta0004;0.08621315192743764;ks'e;0.26;0\",\n"," \"n';4.930385487528345;cta0004;0.05945578231292517;n'e;0.14;4\",\n"," \"e;4.9898412698412695;cta0004;0.07736961451247165;n'e;0.14;4\",\n"," 'e;5.067210884353742;cta0004;0.06;e;0.06;4',\n"," \"f';5.127210884353741;cta0004;0.118140589569161;f'o;0.21;0\",\n"," \"o;5.245351473922902;cta0004;0.08802721088435374;f'o;0.21;0\",\n"," 'd;5.333378684807256;cta0004;0.06997732426303854;da;0.09;4',\n"," 'a;5.403356009070294;cta0004;0.024807256235827663;da;0.09;4',\n"," 'r;5.4281632653061225;cta0004;0.028616780045351474;ra;0.08;4',\n"," 'a;5.456780045351474;cta0004;0.04943310657596372;ra;0.08;4',\n"," 'v;5.5062131519274375;cta0004;0.057324263038548755;vna;0.27;4',\n"," 'n;5.563537414965986;cta0004;0.08575963718820862;vna;0.27;4',\n"," 'a;5.649297052154195;cta0004;0.12770975056689343;vna;0.27;4',\n"," 'sc;6.082902494331066;cta0004;0.134875283446712;sci;0.18;1',\n"," 'i;6.217777777777778;cta0004;0.04167800453514739;sci;0.18;1',\n"," 't;6.2594557823129255;cta0004;0.08049886621315193;ta;0.16;0',\n"," 'a;6.339954648526077;cta0004;0.08018140589569162;ta;0.16;0',\n"," 'f;6.420136054421769;cta0004;0.04553287981859411;fshe;0.21;4',\n"," 'sh;6.465668934240362;cta0004;0.10798185941043084;fshe;0.21;4',\n"," 'e;6.573650793650794;cta0004;0.06145124716553288;fshe;0.21;4',\n"," 'e;6.635102040816326;cta0004;0.05791383219954648;e;0.06;4',\n"," 'sh;6.693015873015873;cta0004;0.08875283446712018;shto;0.21;0',\n"," 't;6.7817687074829935;cta0004;0.062040816326530614;shto;0.21;0',\n"," 'o;6.843809523809524;cta0004;0.05832199546485261;shto;0.21;0',\n"," 'u;6.902131519274376;cta0004;0.05900226757369614;u;0.06;1',\n"," \"n';6.961133786848072;cta0004;0.0746485260770975;n'i;0.16;1\",\n"," \"i;7.03578231292517;cta0004;0.08988662131519275;n'i;0.16;1\",\n"," 'j;7.1256689342403625;cta0004;0.06816326530612245;jo;0.17;0',\n"," 'o;7.193832199546486;cta0004;0.09782312925170068;jo;0.17;0',\n"," 'j;7.291655328798186;cta0004;0.10639455782312925;ja;0.24;0',\n"," 'a;7.398049886621315;cta0004;0.138140589569161;ja;0.24;0',\n"," \"z;7.536190476190476;cta0004;0.08897959183673469;zv'e;0.19;4\",\n"," \"v';7.625170068027211;cta0004;0.06095238095238095;zv'e;0.19;4\",\n"," \"e;7.686122448979591;cta0004;0.044444444444444446;zv'e;0.19;4\",\n"," 'n;7.730566893424037;cta0004;0.05315192743764172;nna;0.18;4',\n"," 'n;7.783718820861678;cta0004;0.06095238095238095;nna;0.18;4',\n"," 'a;7.844671201814059;cta0004;0.06267573696145125;nna;0.18;4',\n"," 'e;7.90734693877551;cta0004;0.05609977324263039;e;0.06;4',\n"," 'b;7.963446712018141;cta0004;0.08104308390022676;ba;0.15;1',\n"," 'a;8.044489795918368;cta0004;0.07306122448979592;ba;0.15;1',\n"," \"l';8.117551020408163;cta0004;0.0670294784580499;l'e;0.18;0\",\n"," \"e;8.184580498866213;cta0004;0.1164625850340136;l'e;0.18;0\",\n"," \"z';8.301043083900227;cta0004;0.0871201814058957;z'n'pa;0.38;1\",\n"," \"n';8.388163265306122;cta0004;0.12575963718820862;z'n'pa;0.38;1\",\n"," \"p;8.79501133786848;cta0004;0.07337868480725623;z'n'pa;0.38;1\",\n"," \"a;8.868390022675737;cta0004;0.09115646258503401;z'n'pa;0.38;1\",\n"," 'ch;8.959546485260772;cta0004;0.13909297052154196;chu;0.21;0',\n"," 'u;9.098639455782314;cta0004;0.06988662131519274;chu;0.21;0',\n"," 's;9.168526077097505;cta0004;0.0982312925170068;stu;0.22;4',\n"," 't;9.266757369614513;cta0004;0.07165532879818594;stu;0.22;4',\n"," 'u;9.338412698412698;cta0004;0.048480725623582764;stu;0.22;4',\n"," 'v;9.38689342403628;cta0004;0.05442176870748299;vu;0.1;4',\n"," 'u;9.441315192743764;cta0004;0.048843537414965985;vu;0.1;4',\n"," 'l;9.490158730158731;cta0004;0.046485260770975055;lo;0.12;4',\n"," 'o;9.536643990929706;cta0004;0.07192743764172335;lo;0.12;4',\n"," 'u;9.608571428571429;cta0004;0.10086167800453515;u;0.1;1',\n"," 'l;9.709433106575963;cta0004;0.05718820861678005;lu;0.12;1',\n"," 'u;9.766621315192744;cta0004;0.06435374149659864;lu;0.12;1',\n"," 'ch_;9.830975056689342;cta0004;0.1471201814058957;ch_she;0.35;0',\n"," 'sh;9.978095238095237;cta0004;0.06938775510204082;ch_she;0.35;0',\n"," 'e;10.04748299319728;cta0004;0.13682539682539682;ch_she;0.35;0',\n"," \"n';10.184308390022675;cta0004;0.08240362811791384;n'i;0.17;4\",\n"," \"i;10.26671201814059;cta0004;0.0836281179138322;n'i;0.17;4\",\n"," 'e;10.350340136054422;cta0004;0.1110204081632653;e;0.11;4',\n"," 's;11.002086167800453;cta0004;0.09219954648526077;sta;0.28;0',\n"," 't;11.094285714285714;cta0004;0.07482993197278912;sta;0.28;0',\n"," 'a;11.169115646258504;cta0004;0.10834467120181406;sta;0.28;0',\n"," 'l;11.277460317460317;cta0004;0.0599546485260771;la;0.11;4',\n"," 'a;11.337414965986394;cta0004;0.04657596371882086;la;0.11;4',\n"," 'f;11.383990929705215;cta0004;0.07609977324263038;fsko;0.31;0',\n"," 's;11.460090702947845;cta0004;0.06839002267573696;fsko;0.31;0',\n"," 'k;11.528480725623583;cta0004;0.08875283446712018;fsko;0.31;0',\n"," 'o;11.617233560090703;cta0004;0.07868480725623583;fsko;0.31;0',\n"," \"r';11.69591836734694;cta0004;0.04789115646258504;r'i;0.1;4\",\n"," \"i;11.743809523809524;cta0004;0.05546485260770975;r'i;0.1;4\",\n"," 'h;11.799274376417234;cta0004;0.11151927437641723;ha;0.19;1',\n"," 'a;11.91079365079365;cta0004;0.08285714285714285;ha;0.19;1',\n"," \"d';11.993650793650794;cta0004;0.1036734693877551;d'i;0.19;0\",\n"," \"i;12.09732426303855;cta0004;0.08852607709750566;d'i;0.19;0\",\n"," \"t';12.185850340136055;cta0004;0.16630385487528346;t'i;0.26;1\",\n"," \"i;12.914285714285715;cta0004;0.09242630385487528;t'i;0.26;1\",\n"," 'v;13.00671201814059;cta0004;0.05646258503401361;va;0.11;1',\n"," 'a;13.063174603174604;cta0004;0.04965986394557823;va;0.11;1',\n"," \"k;13.112834467120182;cta0004;0.08290249433106577;kt'i;0.21;1\",\n"," \"t';13.195736961451248;cta0004;0.08879818594104308;kt'i;0.21;1\",\n"," \"i;13.28453514739229;cta0004;0.04086167800453515;kt'i;0.21;1\",\n"," \"b;13.325396825396826;cta0004;0.07886621315192743;br'e;0.2;0\",\n"," \"r';13.404263038548752;cta0004;0.047165532879818596;br'e;0.2;0\",\n"," \"e;13.451428571428572;cta0004;0.07609977324263038;br'e;0.2;0\",\n"," 'i;13.527528344671202;cta0004;0.08575963718820862;i;0.09;1',\n"," 'j;13.613287981859411;cta0004;0.07850340136054422;jo;0.18;0',\n"," 'o;13.691791383219954;cta0004;0.09827664399092971;jo;0.18;0',\n"," 'a;13.790068027210884;cta0004;0.06217687074829932;a;0.06;1',\n"," 't;13.852244897959183;cta0004;0.06811791383219955;tpra;0.29;0',\n"," 'p;13.920362811791383;cta0004;0.0873015873015873;tpra;0.29;0',\n"," 'r;14.00766439909297;cta0004;0.030113378684807256;tpra;0.29;0',\n"," 'a;14.037777777777778;cta0004;0.10453514739229025;tpra;0.29;0',\n"," \"v';14.142312925170067;cta0004;0.057687074829931975;v'i;0.09;4\",\n"," \"i;14.2;cta0004;0.03306122448979592;v'i;0.09;4\",\n"," \"l';14.233061224489797;cta0004;0.060770975056689346;l'i;0.12;4\",\n"," \"i;14.293832199546486;cta0004;0.059365079365079364;l'i;0.12;4\",\n"," 'd;14.353197278911564;cta0004;0.07378684807256236;da;0.16;1',\n"," 'a;14.426984126984127;cta0004;0.09115646258503401;da;0.16;1',\n"," 'm;14.51814058956916;cta0004;0.10634920634920635;mo;0.23;0',\n"," 'o;14.624489795918368;cta0004;0.1219954648526077;mo;0.23;0',\n"," 'j;14.746485260770974;cta0004;0.09746031746031746;jpo;0.18;1',\n"," 'p;15.262539682539682;cta0004;0.02489795918367347;jpo;0.18;1',\n"," 'o;15.287437641723356;cta0004;0.057006802721088434;jpo;0.18;1',\n"," 'p;15.344444444444445;cta0004;0.0927437641723356;pa;0.21;1',\n"," 'a;15.43718820861678;cta0004;0.11918367346938775;pa;0.21;1',\n"," \"l;15.556371882086168;cta0004;0.07587301587301587;ln'e;0.27;0\",\n"," \"n';15.632244897959184;cta0004;0.07437641723356009;ln'e;0.27;0\",\n"," \"e;15.706621315192743;cta0004;0.12036281179138322;ln'e;0.27;0\",\n"," 'f;15.826984126984128;cta0004;0.09129251700680271;fshu;0.27;4',\n"," 'sh;15.91827664399093;cta0004;0.10961451247165532;fshu;0.27;4',\n"," 'u;16.027891156462584;cta0004;0.0727437641723356;fshu;0.27;4',\n"," 'e;16.10063492063492;cta0004;0.13219954648526078;e;0.13;4',\n"," 'i;16.605034013605444;cta0004;0.09541950113378685;i;0.1;1',\n"," \"t;16.70045351473923;cta0004;0.07006802721088436;tv'o;0.23;0\",\n"," \"v';16.770521541950114;cta0004;0.0707482993197279;tv'o;0.23;0\",\n"," \"o;16.841269841269842;cta0004;0.09215419501133787;tv'o;0.23;0\",\n"," 'r;16.933424036281178;cta0004;0.03945578231292517;rdo;0.17;4',\n"," 'd;16.972879818594105;cta0004;0.07954648526077097;rdo;0.17;4',\n"," 'o;17.052426303854876;cta0004;0.04653061224489796;rdo;0.17;4',\n"," 'u;17.098956916099773;cta0004;0.0946031746031746;u;0.09;1',\n"," \"v';17.19356009070295;cta0004;0.1036281179138322;v'e;0.19;0\",\n"," \"e;17.29718820861678;cta0004;0.09133786848072563;v'e;0.19;0\",\n"," \"r';17.388526077097506;cta0004;0.04231292517006803;r'i;0.1;4\",\n"," \"i;17.430839002267575;cta0004;0.05437641723356009;r'i;0.1;4\",\n"," 'n;17.485215419501134;cta0004;0.05287981859410431;nnu;0.15;4',\n"," 'n;17.538095238095238;cta0004;0.048752834467120185;nnu;0.15;4',\n"," 'u;17.586848072562358;cta0004;0.05197278911564626;nnu;0.15;4',\n"," 'e;17.638820861678006;cta0004;0.0800453514739229;e;0.08;4',\n"," 'f;17.718866213151927;cta0004;0.08907029478458049;fto;0.3;0',\n"," 't;17.807936507936507;cta0004;0.1073015873015873;fto;0.3;0',\n"," 'o;17.915238095238095;cta0004;0.10467120181405895;fto;0.3;0',\n"," 'm;18.019909297052155;cta0004;0.1034467120181406;mshto;0.37;0',\n"," 'sh;18.393514739229026;cta0004;0.10634920634920635;mshto;0.37;0',\n"," 't;18.49986394557823;cta0004;0.07854875283446712;mshto;0.37;0',\n"," 'o;18.5784126984127;cta0004;0.07673469387755102;mshto;0.37;0',\n"," \"d';18.65514739229025;cta0004;0.125578231292517;d'e;0.23;0\",\n"," \"e;18.780725623582768;cta0004;0.10217687074829931;d'e;0.23;0\",\n"," 'l;18.882902494331066;cta0004;0.083718820861678;ly;0.14;4',\n"," 'y;18.966621315192743;cta0004;0.055374149659863946;ly;0.14;4',\n"," 'y;19.02199546485261;cta0004;0.07614512471655328;y;0.08;1',\n"," \"d';19.098140589569162;cta0004;0.0910204081632653;d'o;0.19;0\",\n"," \"o;19.189160997732426;cta0004;0.09764172335600907;d'o;0.19;0\",\n"," 't;19.286802721088435;cta0004;0.12489795918367347;tny;0.21;1',\n"," 'n;19.41170068027211;cta0004;0.017052154195011337;tny;0.21;1',\n"," 'y;19.42875283446712;cta0004;0.06331065759637189;tny;0.21;1',\n"," 'p;19.49206349206349;cta0004;0.049206349206349205;pa;0.12;1',\n"," 'a;19.54126984126984;cta0004;0.07510204081632653;pa;0.12;1',\n"," 'p;19.616371882086167;cta0004;0.07773242630385488;pra;0.25;0',\n"," 'r;19.694104308390024;cta0004;0.05251700680272109;pra;0.25;0',\n"," 'a;19.746621315192744;cta0004;0.12399092970521541;pra;0.25;0',\n"," 'f;19.87061224489796;cta0004;0.0837641723356009;fku;0.3;4',\n"," 'k;19.95437641723356;cta0004;0.09215419501133787;fku;0.3;4',\n"," 'u;20.046530612244897;cta0004;0.1255328798185941;fku;0.3;4',\n"," 'v;0.0;cta0005;0.07863945578231292;vo;0.14;0',\n"," 'o;0.07863945578231292;cta0005;0.06231292517006803;vo;0.14;0',\n"," 't;0.14095238095238094;cta0005;0.10049886621315193;ty;0.15;0',\n"," 'y;0.24145124716553287;cta0005;0.05070294784580499;ty;0.15;0',\n"," \"m';0.2921541950113379;cta0005;0.08770975056689342;m'e;0.12;4\",\n"," \"e;0.3798639455782313;cta0005;0.031746031746031744;m'e;0.12;4\",\n"," 'n;0.411609977324263;cta0005;0.026530612244897958;nna;0.12;4',\n"," 'n;0.438140589569161;cta0005;0.03219954648526077;nna;0.12;4',\n"," 'a;0.47034013605442176;cta0005;0.06022675736961451;nna;0.12;4',\n"," 't;0.5305668934240363;cta0005;0.11287981859410431;ta;0.19;1',\n"," 'a;0.6434467120181406;cta0005;0.07800453514739229;ta;0.19;1',\n"," 'g;0.7214512471655329;cta0005;0.08281179138321995;gda;0.43;0',\n"," 'd;0.8042630385487528;cta0005;0.08875283446712018;gda;0.43;0',\n"," 'a;0.893015873015873;cta0005;0.25746031746031744;gda;0.43;0',\n"," 'k;1.3982766439909298;cta0005;0.07015873015873016;ka;0.14;1',\n"," 'a;1.4684353741496599;cta0005;0.07351473922902495;ka;0.14;1',\n"," 'g;1.5419501133786848;cta0005;0.05342403628117914;gda;0.2;0',\n"," 'd;1.595374149659864;cta0005;0.08140589569160998;gda;0.2;0',\n"," 'a;1.6767800453514738;cta0005;0.0690249433106576;gda;0.2;0',\n"," \"k;1.7458049886621316;cta0005;0.07160997732426304;ks'e;0.28;0\",\n"," \"s';1.8174149659863945;cta0005;0.12063492063492064;ks'e;0.28;0\",\n"," \"e;1.9380498866213152;cta0005;0.08766439909297052;ks'e;0.28;0\",\n"," \"n';2.025714285714286;cta0005;0.0836281179138322;n'e;0.13;4\",\n"," \"e;2.109342403628118;cta0005;0.048752834467120185;n'e;0.13;4\",\n"," 'e;2.158095238095238;cta0005;0.05142857142857143;e;0.05;4',\n"," \"f';2.2095238095238097;cta0005;0.13451247165532879;f'o;0.21;0\",\n"," \"o;2.344036281179138;cta0005;0.0744671201814059;f'o;0.21;0\",\n"," 'd;2.418503401360544;cta0005;0.06353741496598639;da;0.09;4',\n"," 'a;2.4820408163265304;cta0005;0.023900226757369615;da;0.09;4',\n"," 'r;2.5059410430839004;cta0005;0.026349206349206348;ra;0.07;4',\n"," 'a;2.5322902494331068;cta0005;0.04385487528344671;ra;0.07;4',\n"," 'v;2.5761451247165534;cta0005;0.07718820861678005;vna;0.19;4',\n"," 'n;2.6533333333333333;cta0005;0.05718820861678005;vna;0.19;4',\n"," 'a;2.710521541950113;cta0005;0.05310657596371882;vna;0.19;4',\n"," \"v';2.7636281179138322;cta0005;0.07904761904761905;v'e;0.12;1\",\n"," \"e;2.8426757369614513;cta0005;0.037913832199546485;v'e;0.12;1\",\n"," 'r;2.880589569160998;cta0005;0.07170068027210884;rnu;0.19;0',\n"," 'n;2.9522902494331067;cta0005;0.0727891156462585;rnu;0.19;0',\n"," 'u;3.0250793650793653;cta0005;0.04888888888888889;rnu;0.19;0',\n"," 'l;3.073968253968254;cta0005;0.06340136054421769;le;0.11;4',\n"," 'e;3.1373696145124716;cta0005;0.04199546485260771;le;0.11;4',\n"," \"s';3.179365079365079;cta0005;0.11396825396825397;s'i;0.16;1\",\n"," \"i;3.2933333333333334;cta0005;0.04249433106575964;s'i;0.16;1\",\n"," 'z;3.335827664399093;cta0005;0.06213151927437642;zba;0.23;1',\n"," 'b;3.3979591836734695;cta0005;0.08811791383219955;zba;0.23;1',\n"," 'a;3.4860770975056687;cta0005;0.07850340136054422;zba;0.23;1',\n"," \"l';3.564580498866213;cta0005;0.05609977324263039;l'n'i;0.22;0\",\n"," \"n';3.6206802721088436;cta0005;0.0708843537414966;l'n'i;0.22;0\",\n"," \"i;3.69156462585034;cta0005;0.09551020408163265;l'n'i;0.22;0\",\n"," 'c;3.787074829931973;cta0005;0.1675283446712018;cy;0.31;4',\n"," 'y;3.9546031746031747;cta0005;0.13959183673469389;cy;0.31;4',\n"," 'zh;4.664444444444444;cta0005;0.13786848072562358;zhe;0.2;1',\n"," 'e;4.802312925170068;cta0005;0.06598639455782312;zhe;0.2;1',\n"," 'n;4.868299319727891;cta0005;0.08235827664399092;na;0.18;0',\n"," 'a;4.950657596371882;cta0005;0.09310657596371882;na;0.18;0',\n"," \"d;5.043764172335601;cta0005;0.07265306122448979;dm'i;0.26;0\",\n"," \"m';5.116417233560091;cta0005;0.10857142857142857;dm'i;0.26;0\",\n"," \"i;5.224988662131519;cta0005;0.08299319727891157;dm'i;0.26;0\",\n"," \"t;5.307981859410431;cta0005;0.11333333333333333;tr'i;0.21;4\",\n"," \"r';5.421315192743764;cta0005;0.027210884353741496;tr'i;0.21;4\",\n"," \"i;5.4485260770975055;cta0005;0.07174603174603175;tr'i;0.21;4\",\n"," 'y;5.520272108843537;cta0005;0.04653061224489796;y;0.05;4',\n"," 'v;5.566802721088435;cta0005;0.06802721088435375;vy;0.13;4',\n"," 'y;5.6348299319727895;cta0005;0.06403628117913832;vy;0.13;4',\n"," 'z;5.698866213151928;cta0005;0.07773242630385488;za;0.17;1',\n"," 'a;5.7765986394557824;cta0005;0.0964172335600907;za;0.17;1',\n"," \"t';5.873015873015873;cta0005;0.14126984126984127;t'e;0.25;0\",\n"," \"e;6.014285714285714;cta0005;0.10784580498866213;t'e;0.25;0\",\n"," 'e;6.122131519274377;cta0005;0.08834467120181407;e;0.09;4',\n"," 'l;6.21047619047619;cta0005;0.08458049886621315;la;0.18;4',\n"," 'a;6.295056689342403;cta0005;0.0980045351473923;la;0.18;4',\n"," 'a;6.393061224489796;cta0005;0.18340136054421768;a;0.18;1',\n"," \"b;6.5764625850340135;cta0005;0.1163718820861678;bm'e;0.33;0\",\n"," \"m';6.692834467120181;cta0005;0.0963718820861678;bm'e;0.33;0\",\n"," \"e;6.789206349206349;cta0005;0.11886621315192744;bm'e;0.33;0\",\n"," \"n;6.908072562358277;cta0005;0.129297052154195;nr'i;0.28;1\",\n"," \"r';7.622675736961451;cta0005;0.07941043083900227;nr'i;0.28;1\",\n"," \"i;7.702086167800453;cta0005;0.07247165532879818;nr'i;0.28;1\",\n"," 'sh;7.774557823129252;cta0005;0.1434920634920635;shy;0.22;0',\n"," 'y;7.918049886621315;cta0005;0.07224489795918368;shy;0.22;0',\n"," 'l;7.990294784580499;cta0005;0.060408163265306125;la;0.12;4',\n"," 'a;8.050702947845805;cta0005;0.05473922902494331;la;0.12;4',\n"," 's;8.105442176870747;cta0005;0.17859410430839;sro;0.31;0',\n"," 'r;8.284036281179139;cta0005;0.030294784580498866;sro;0.31;0',\n"," 'o;8.314331065759637;cta0005;0.09977324263038549;sro;0.31;0',\n"," 'ch;8.414104308390023;cta0005;0.15582766439909296;chna;0.23;4',\n"," 'n;8.569931972789115;cta0005;0.028117913832199547;chna;0.23;4',\n"," 'a;8.598049886621315;cta0005;0.048480725623582764;chna;0.23;4',\n"," 's;8.646530612244899;cta0005;0.12031746031746032;sji;0.24;1',\n"," 'j;8.766848072562357;cta0005;0.042675736961451244;sji;0.24;1',\n"," 'i;8.80952380952381;cta0005;0.07959183673469387;sji;0.24;1',\n"," \"zh';8.889115646258503;cta0005;0.06975056689342404;zh'zh'a;0.24;0\",\n"," \"zh';8.958866213151927;cta0005;0.06190476190476191;zh'zh'a;0.24;0\",\n"," \"a;9.020770975056688;cta0005;0.11056689342403628;zh'zh'a;0.24;0\",\n"," 'c;9.131337868480726;cta0005;0.11560090702947846;cy;0.15;4',\n"," 'y;9.246938775510204;cta0005;0.036825396825396824;cy;0.15;4',\n"," 's;9.283764172335601;cta0005;0.11052154195011338;sy;0.13;1',\n"," 'y;9.394285714285715;cta0005;0.015374149659863945;sy;0.13;1',\n"," \"s;9.409659863945578;cta0005;0.1199546485260771;sv'e;0.22;1\",\n"," \"v';9.529614512471655;cta0005;0.048480725623582764;sv'e;0.22;1\",\n"," \"e;9.578095238095239;cta0005;0.049160997732426305;sv'e;0.22;1\",\n"," 'k;9.627256235827664;cta0005;0.10308390022675737;kro;0.23;0',\n"," 'r;9.730340136054421;cta0005;0.032879818594104306;kro;0.23;0',\n"," 'o;9.763219954648527;cta0005;0.09546485260770975;kro;0.23;0',\n"," \"v';9.858684807256235;cta0005;0.07800453514739229;v'ju;0.26;4\",\n"," \"j;9.936689342403628;cta0005;0.07238095238095238;v'ju;0.26;4\",\n"," \"u;10.00907029478458;cta0005;0.10471655328798186;v'ju;0.26;4\",\n"," 'zh;10.503582766439909;cta0005;0.14798185941043085;zhy;0.26;0',\n"," 'y;10.651564625850341;cta0005;0.1089795918367347;zhy;0.26;0',\n"," 'f;10.760544217687075;cta0005;0.06476190476190476;fshe;0.24;4',\n"," 'sh;10.82530612244898;cta0005;0.10884353741496598;fshe;0.24;4',\n"," 'e;10.934149659863946;cta0005;0.06521541950113378;fshe;0.24;4',\n"," 'e;10.999365079365079;cta0005;0.058458049886621316;e;0.06;1',\n"," \"d';11.0578231292517;cta0005;0.06458049886621316;d'i;0.12;1\",\n"," \"i;11.122403628117913;cta0005;0.05877551020408163;d'i;0.12;1\",\n"," 'n;11.181179138321996;cta0005;0.06594104308390022;no;0.15;0',\n"," 'o;11.247120181405895;cta0005;0.08698412698412698;no;0.15;0',\n"," 'k;11.334104308390023;cta0005;0.07011337868480726;ko;0.13;4',\n"," 'o;11.40421768707483;cta0005;0.062040816326530614;ko;0.13;4',\n"," 'f;11.466258503401361;cta0005;0.09061224489795919;fha;0.26;1',\n"," 'h;11.55687074829932;cta0005;0.07215419501133787;fha;0.26;1',\n"," 'a;11.629024943310657;cta0005;0.09950113378684808;fha;0.26;1',\n"," 'r;11.728526077097506;cta0005;0.03936507936507937;ro;0.18;0',\n"," 'o;11.767891156462586;cta0005;0.1400453514739229;ro;0.18;0',\n"," 'sh;11.907936507936508;cta0005;0.14208616780045352;shy;0.26;4',\n"," 'y;12.050022675736962;cta0005;0.11333333333333333;shy;0.26;4',\n"," 'j;12.163356009070295;cta0005;0.058866213151927436;jdvy;0.28;1',\n"," 'd;12.296235827664399;cta0005;0.11147392290249433;jdvy;0.28;1',\n"," 'v;12.407709750566893;cta0005;0.05682539682539683;jdvy;0.28;1',\n"," 'y;12.46453514739229;cta0005;0.05360544217687075;jdvy;0.28;1',\n"," 'c;12.51814058956916;cta0005;0.1110204081632653;cy;0.16;1',\n"," 'y;12.629160997732427;cta0005;0.04852607709750567;cy;0.16;1',\n"," \"t';12.677687074829931;cta0005;0.11124716553287982;t'i;0.16;0\",\n"," \"i;12.788934240362812;cta0005;0.052970521541950116;t'i;0.16;0\",\n"," \"m';12.841904761904761;cta0005;0.07700680272108844;m'i;0.12;1\",\n"," \"i;12.91891156462585;cta0005;0.04380952380952381;m'i;0.12;1\",\n"," 't;12.962721088435375;cta0005;0.09619047619047619;tro;0.22;0',\n"," 'r;13.05891156462585;cta0005;0.0381859410430839;tro;0.22;0',\n"," 'o;13.097097505668934;cta0005;0.08204081632653061;tro;0.22;0',\n"," 'v;13.179138321995465;cta0005;0.0653514739229025;vy;0.13;4',\n"," 'y;13.244489795918367;cta0005;0.06480725623582767;vy;0.13;4',\n"," 'k;13.309297052154195;cta0005;0.1345578231292517;ko;0.21;0',\n"," 'o;13.443854875283447;cta0005;0.07882086167800453;ko;0.21;0',\n"," 'm;13.522675736961451;cta0005;0.04857142857142857;mny;0.18;4',\n"," 'n;13.57124716553288;cta0005;0.06675736961451247;mny;0.18;4',\n"," 'y;13.638004535147392;cta0005;0.06476190476190476;mny;0.18;4',\n"," \"t';13.702766439909297;cta0005;0.12344671201814059;t'e;0.28;4\",\n"," \"e;13.826213151927437;cta0005;0.152562358276644;t'e;0.28;4\",\n"," 'n;14.106485260770976;cta0005;0.09492063492063492;na;0.13;2',\n"," 'a;14.20140589569161;cta0005;0.036825396825396824;na;0.13;2',\n"," 'p;14.238231292517007;cta0005;0.09247165532879818;pra;0.16;2',\n"," 'r;14.330702947845804;cta0005;0.02839002267573696;pra;0.16;2',\n"," 'a;14.359092970521543;cta0005;0.04217687074829932;pra;0.16;2',\n"," 'f;14.40126984126984;cta0005;0.06775510204081632;fsa;0.25;1',\n"," 's;14.469024943310657;cta0005;0.09424036281179138;fsa;0.25;1',\n"," 'a;14.56326530612245;cta0005;0.08335600907029478;fsa;0.25;1',\n"," 'j;14.646621315192744;cta0005;0.10380952380952381;ju;0.18;0',\n"," 'u;14.750430839002268;cta0005;0.07659863945578231;ju;0.18;0',\n"," 'z;14.82702947845805;cta0005;0.08947845804988662;zne;0.2;4',\n"," 'n;14.916507936507937;cta0005;0.07378684807256236;zne;0.2;4',\n"," 'e;14.990294784580499;cta0005;0.04081632653061224;zne;0.2;4',\n"," 'j;15.03111111111111;cta0005;0.04557823129251701;ju;0.25;0',\n"," 'u;15.076689342403627;cta0005;0.20263038548752835;ju;0.25;0',\n"," \"l';15.279319727891156;cta0005;0.06149659863945578;l'i;0.12;4\",\n"," \"i;15.340816326530613;cta0005;0.05369614512471655;l'i;0.12;4\",\n"," 'c;15.394512471655329;cta0005;0.16158730158730158;ce;0.28;4',\n"," 'e;15.55609977324263;cta0005;0.1143764172335601;ce;0.28;4',\n"," 'r;0.0;cta0006;0.07115646258503401;ry;0.13;1',\n"," 'y;0.07115646258503401;cta0006;0.06312925170068028;ry;0.13;1',\n"," 'z;0.13428571428571429;cta0006;0.06267573696145125;zga;0.21;1',\n"," 'g;0.19696145124716552;cta0006;0.05668934240362812;zga;0.21;1',\n"," 'a;0.2536507936507936;cta0006;0.08902494331065759;zga;0.21;1',\n"," 'v;0.34267573696145126;cta0006;0.05328798185941043;vo;0.13;0',\n"," 'o;0.3959637188208617;cta0006;0.07587301587301587;vo;0.13;0',\n"," 'r;0.47183673469387755;cta0006;0.02294784580498866;ry;0.09;4',\n"," 'y;0.4947845804988662;cta0006;0.067437641723356;ry;0.09;4',\n"," 'a;0.5622222222222222;cta0006;0.058412698412698416;a;0.06;1',\n"," 't;0.6206349206349207;cta0006;0.10263038548752834;to;0.18;0',\n"," 'o;0.723265306122449;cta0006;0.07886621315192743;to;0.18;0',\n"," 'm;0.8021315192743764;cta0006;0.062494331065759634;mshto;0.27;0',\n"," 'sh;0.8646258503401361;cta0006;0.08802721088435374;mshto;0.27;0',\n"," 't;0.9526530612244898;cta0006;0.07201814058956917;mshto;0.27;0',\n"," 'o;1.024671201814059;cta0006;0.04594104308390023;mshto;0.27;0',\n"," 'b;1.0706122448979591;cta0006;0.06412698412698413;by;0.13;4',\n"," 'y;1.1347392290249434;cta0006;0.06299319727891156;by;0.13;4',\n"," 's;1.197732426303855;cta0006;0.11414965986394558;sy;0.17;1',\n"," 'y;1.3118820861678004;cta0006;0.05986394557823129;sy;0.17;1',\n"," 'i;1.3717460317460317;cta0006;0.058095238095238096;i;0.06;1',\n"," \"d';1.42984126984127;cta0006;0.0545124716553288;d'i;0.11;1\",\n"," \"i;1.4843537414965986;cta0006;0.057369614512471655;d'i;0.11;1\",\n"," \"n';1.5417233560090704;cta0006;0.08299319727891157;n'i;0.16;0\",\n"," \"i;1.624716553287982;cta0006;0.07319727891156462;n'i;0.16;0\",\n"," 'c;1.6979138321995464;cta0006;0.11324263038548753;ca;0.18;4',\n"," 'a;1.811156462585034;cta0006;0.06195011337868481;ca;0.18;4',\n"," 's;1.8731065759637189;cta0006;0.11786848072562359;sma;0.25;0',\n"," 'm;1.9909750566893425;cta0006;0.051156462585034014;sma;0.25;0',\n"," 'a;2.0421315192743763;cta0006;0.07968253968253969;sma;0.25;0',\n"," \"t';2.121814058956916;cta0006;0.11469387755102041;t'i;0.15;4\",\n"," \"i;2.2365079365079366;cta0006;0.03736961451247166;t'i;0.15;4\",\n"," \"r';2.273877551020408;cta0006;0.03909297052154195;r'jo;0.31;4\",\n"," \"j;2.31297052154195;cta0006;0.10480725623582766;r'jo;0.31;4\",\n"," \"o;2.417777777777778;cta0006;0.1689342403628118;r'jo;0.31;4\",\n"," \"d;2.860952380952381;cta0006;0.12789115646258503;dm'i;0.28;0\",\n"," \"m';2.988843537414966;cta0006;0.08471655328798186;dm'i;0.28;0\",\n"," \"i;3.073560090702948;cta0006;0.0709750566893424;dm'i;0.28;0\",\n"," \"t;3.1445351473922902;cta0006;0.09859410430839002;tr'i;0.18;4\",\n"," \"r';3.2431292517006804;cta0006;0.03111111111111111;tr'i;0.18;4\",\n"," \"i;3.2742403628117915;cta0006;0.046802721088435376;tr'i;0.18;4\",\n"," 'i;3.3210430839002267;cta0006;0.04852607709750567;i;0.05;4',\n"," 'f;3.3695691609977323;cta0006;0.0980045351473923;fny;0.2;1',\n"," 'n;3.467573696145125;cta0006;0.05210884353741497;fny;0.2;1',\n"," 'y;3.5196825396825395;cta0006;0.05020408163265306;fny;0.2;1',\n"," 'ch;3.569886621315193;cta0006;0.12104308390022676;chi;0.15;1',\n"," 'i;3.6909297052154195;cta0006;0.027210884353741496;chi;0.15;1',\n"," 'n;3.718140589569161;cta0006;0.07056689342403628;na;0.17;0',\n"," 'a;3.7887074829931975;cta0006;0.10294784580498866;na;0.17;0',\n"," 'l;3.891655328798186;cta0006;0.06263038548752835;ly;0.11;1',\n"," 'y;3.954285714285714;cta0006;0.050294784580498866;ly;0.11;1',\n"," 's;4.004580498866213;cta0006;0.15387755102040818;sa;0.3;0',\n"," 'a;4.1584580498866215;cta0006;0.14231292517006802;sa;0.3;0',\n"," \"m;4.30077097505669;cta0006;0.10335600907029478;md'e;0.43;0\",\n"," \"d';4.909931972789115;cta0006;0.2057596371882086;md'e;0.43;0\",\n"," \"e;5.115691609977325;cta0006;0.11619047619047619;md'e;0.43;0\",\n"," 'l;5.231882086167801;cta0006;0.06662131519274377;ly;0.15;4',\n"," 'y;5.298503401360544;cta0006;0.08022675736961452;ly;0.15;4',\n"," 'l;5.378730158730159;cta0006;0.0782766439909297;le;0.15;0',\n"," 'e;5.4570068027210885;cta0006;0.07532879818594104;le;0.15;0',\n"," 't;5.53233560090703;cta0006;0.08058956916099773;te;0.12;4',\n"," 'e;5.612925170068027;cta0006;0.04131519274376417;te;0.12;4',\n"," \"n';5.654240362811791;cta0006;0.09192743764172336;n'e;0.17;1\",\n"," \"e;5.746167800453515;cta0006;0.07972789115646259;n'e;0.17;1\",\n"," 'r;5.825895691609977;cta0006;0.03963718820861678;ra;0.18;0',\n"," 'a;5.865532879818594;cta0006;0.14077097505668934;ra;0.18;0',\n"," 'n;0.0;cta0007;0.09510204081632653;no;0.18;0',\n"," 'o;0.09510204081632653;cta0007;0.08317460317460318;no;0.18;0',\n"," 't;0.1782766439909297;cta0007;0.08947845804988662;to;0.16;0',\n"," 'o;0.2677551020408163;cta0007;0.07038548752834467;to;0.16;0',\n"," 'b;0.338140589569161;cta0007;0.07133786848072562;by;0.15;0',\n"," 'y;0.40947845804988664;cta0007;0.07546485260770976;by;0.15;0',\n"," 'l;0.4849433106575964;cta0007;0.051882086167800455;ly;0.1;4',\n"," 'y;0.5368253968253969;cta0007;0.044897959183673466;ly;0.1;4',\n"," 'd;0.5817233560090703;cta0007;0.07147392290249432;da;0.17;1',\n"," 'a;0.6531972789115646;cta0007;0.1000453514739229;da;0.17;1',\n"," 'v;0.7532426303854876;cta0007;0.07546485260770976;vno;0.31;0',\n"," 'n;0.8287074829931973;cta0007;0.07977324263038549;vno;0.31;0',\n"," 'o;0.9084807256235827;cta0007;0.15029478458049886;vno;0.31;0',\n"," 'v;1.4684353741496599;cta0007;0.09854875283446712;vo;0.16;1',\n"," 'o;1.566984126984127;cta0007;0.06467120181405896;vo;0.16;1',\n"," \"v;1.6316553287981859;cta0007;0.07129251700680272;vr'i;0.16;1\",\n"," \"r';1.7029478458049887;cta0007;0.03845804988662131;vr'i;0.16;1\",\n"," \"i;1.74140589569161;cta0007;0.049160997732426305;vr'i;0.16;1\",\n"," \"m';1.7905668934240362;cta0007;0.06149659863945578;m'e;0.12;1\",\n"," \"e;1.852063492063492;cta0007;0.0563718820861678;m'e;0.12;1\",\n"," 'n;1.9084353741496598;cta0007;0.05941043083900227;na;0.16;0',\n"," 'a;1.9678458049886622;cta0007;0.10276643990929706;na;0.16;0',\n"," 'k;2.0706122448979594;cta0007;0.09913832199546485;ka;0.16;1',\n"," 'a;2.169750566893424;cta0007;0.05591836734693877;ka;0.16;1',\n"," 'g;2.2256689342403626;cta0007;0.05800453514739229;gda;0.18;0',\n"," 'd;2.283673469387755;cta0007;0.06934240362811792;gda;0.18;0',\n"," 'a;2.353015873015873;cta0007;0.05292517006802721;gda;0.18;0',\n"," 'a;2.4059410430839003;cta0007;0.06467120181405896;a;0.06;1',\n"," 't;2.4706122448979593;cta0007;0.0838095238095238;tna;0.18;1',\n"," 'n;2.554421768707483;cta0007;0.040317460317460314;tna;0.18;1',\n"," 'a;2.594739229024943;cta0007;0.05755102040816327;tna;0.18;1',\n"," 'sh;2.6522902494331064;cta0007;0.1294331065759637;she;0.21;0',\n"," 'e;2.78172335600907;cta0007;0.07582766439909297;she;0.21;0',\n"," \"n';2.857551020408163;cta0007;0.08108843537414966;n'i;0.13;4\",\n"," \"i;2.938639455782313;cta0007;0.044897959183673466;n'i;0.13;4\",\n"," 'e;2.9835374149659866;cta0007;0.04553287981859411;e;0.05;4',\n"," \"l';3.0290702947845807;cta0007;0.0783219954648526;l'e;0.16;0\",\n"," \"e;3.1073922902494333;cta0007;0.08235827664399092;l'e;0.16;0\",\n"," 'n;3.189750566893424;cta0007;0.05832199546485261;ny;0.12;4',\n"," 'y;3.2480725623582765;cta0007;0.061179138321995466;ny;0.12;4',\n"," \"s;3.309251700680272;cta0007;0.09251700680272108;sks'e;0.36;0\",\n"," \"k;3.401768707482993;cta0007;0.081859410430839;sks'e;0.36;0\",\n"," \"s';3.483628117913832;cta0007;0.10231292517006803;sks'e;0.36;0\",\n"," \"e;3.5859410430839;cta0007;0.08104308390022676;sks'e;0.36;0\",\n"," \"n';3.666984126984127;cta0007;0.07605442176870748;n'i;0.13;4\",\n"," \"i;3.7430385487528346;cta0007;0.05682539682539683;n'i;0.13;4\",\n"," 'y;3.7998639455782315;cta0007;0.050249433106575966;y;0.05;4',\n"," \"f';3.8501133786848074;cta0007;0.13233560090702948;f'o;0.21;0\",\n"," \"o;3.9824489795918367;cta0007;0.07691609977324262;f'o;0.21;0\",\n"," 'd;4.0593650793650795;cta0007;0.056598639455782314;dy;0.09;4',\n"," 'y;4.115963718820861;cta0007;0.0291156462585034;dy;0.09;4',\n"," 'r;4.145079365079365;cta0007;0.03156462585034014;ry;0.09;4',\n"," 'y;4.176643990929705;cta0007;0.05596371882086168;ry;0.09;4',\n"," 'v;4.2326077097505665;cta0007;0.06653061224489797;vny;0.19;4',\n"," 'n;4.299138321995465;cta0007;0.06430839002267574;vny;0.19;4',\n"," 'y;4.36344671201814;cta0007;0.06353741496598639;vny;0.19;4',\n"," 'j;4.426984126984127;cta0007;0.07941043083900227;jji;0.23;1',\n"," 'j;4.873514739229025;cta0007;0.08662131519274377;jji;0.23;1',\n"," 'i;4.960136054421769;cta0007;0.06770975056689342;jji;0.23;1',\n"," 'sc;5.0278458049886625;cta0007;0.11600907029478458;sco;0.2;0',\n"," 'o;5.143854875283447;cta0007;0.07950113378684807;sco;0.2;0',\n"," \"n';5.223356009070295;cta0007;0.07433106575963719;n'e;0.12;1\",\n"," \"e;5.297687074829932;cta0007;0.04122448979591837;n'e;0.12;1\",\n"," 'a;5.3389115646258505;cta0007;0.05365079365079365;a;0.05;1',\n"," 'ch;5.392562358276644;cta0007;0.17877551020408164;chi;0.22;1',\n"," 'i;5.571337868480725;cta0007;0.04308390022675737;chi;0.22;1',\n"," 'k;5.614421768707483;cta0007;0.10498866213151928;ka;0.22;0',\n"," 'a;5.719410430839003;cta0007;0.11886621315192744;ka;0.22;0',\n"," \"n';5.8382766439909295;cta0007;0.061587301587301586;n'i;0.11;4\",\n"," \"i;5.899863945578232;cta0007;0.051882086167800455;n'i;0.11;4\",\n"," \"l';5.951746031746032;cta0007;0.04158730158730159;l'i;0.09;4\",\n"," \"i;5.993333333333333;cta0007;0.04639455782312925;l'i;0.09;4\",\n"," \"s';6.0397278911564625;cta0007;0.07374149659863946;s'ffo;0.33;0\",\n"," \"f;6.113469387755102;cta0007;0.08562358276643992;s'ffo;0.33;0\",\n"," \"f;6.199092970521542;cta0007;0.08027210884353742;s'ffo;0.33;0\",\n"," \"o;6.279365079365079;cta0007;0.08902494331065759;s'ffo;0.33;0\",\n"," 'r;6.368390022675737;cta0007;0.04698412698412698;rmy;0.16;4',\n"," 'm;6.415374149659864;cta0007;0.07333333333333333;rmy;0.16;4',\n"," 'y;6.488707482993197;cta0007;0.04117913832199546;rmy;0.16;4',\n"," 't;6.5298866213151925;cta0007;0.0801360544217687;ta;0.13;1',\n"," 'a;6.610022675736961;cta0007;0.05256235827664399;ta;0.13;1',\n"," 'k;6.662585034013605;cta0007;0.10040816326530612;ko;0.16;0',\n"," 'o;6.762993197278911;cta0007;0.06312925170068028;ko;0.16;0',\n"," 'j;6.826122448979592;cta0007;0.02657596371882086;ja;0.1;1',\n"," 'a;6.8526984126984125;cta0007;0.06866213151927437;ja;0.1;1',\n"," 'k;6.921360544217687;cta0007;0.08390022675736962;ky;0.13;1',\n"," 'y;7.005260770975057;cta0007;0.047573696145124716;ky;0.13;1',\n"," \"s';7.0528344671201815;cta0007;0.08689342403628118;s't'i;0.22;1\",\n"," \"t';7.139727891156463;cta0007;0.09174603174603174;s't'i;0.22;1\",\n"," \"i;7.231473922902494;cta0007;0.03773242630385488;s't'i;0.22;1\",\n"," \"n';7.269206349206349;cta0007;0.09873015873015872;n'e;0.19;0\",\n"," \"e;7.367936507936508;cta0007;0.08807256235827664;n'e;0.19;0\",\n"," 'f;7.456009070294785;cta0007;0.07061224489795918;fshy;0.22;4',\n"," 'sh;7.5266213151927435;cta0007;0.11287981859410431;fshy;0.22;4',\n"," 'y;7.639501133786848;cta0007;0.03700680272108844;fshy;0.22;4',\n"," 'i;7.676507936507937;cta0007;0.060816326530612246;i;0.06;1',\n"," 'p;7.737324263038548;cta0007;0.096281179138322;pro;0.23;0',\n"," 'r;7.833605442176871;cta0007;0.03927437641723356;pro;0.23;0',\n"," 'o;7.872879818594105;cta0007;0.09351473922902494;pro;0.23;0',\n"," 'ch;7.966394557823129;cta0007;0.13882086167800453;chny;0.23;4',\n"," 'n;8.105215419501134;cta0007;0.03941043083900227;chny;0.23;4',\n"," 'y;8.144625850340136;cta0007;0.04984126984126984;chny;0.23;4',\n"," 'v;8.194467120181406;cta0007;0.06022675736961451;vra;0.22;1',\n"," 'r;8.25469387755102;cta0007;0.04154195011337868;vra;0.22;1',\n"," 'a;8.296235827664399;cta0007;0.11505668934240362;vra;0.22;1',\n"," 'zh;8.411292517006803;cta0007;0.08875283446712018;zhdy;0.3;0',\n"," 'd;8.500045351473922;cta0007;0.06344671201814059;zhdy;0.3;0',\n"," 'y;8.563492063492063;cta0007;0.14526077097505669;zhdy;0.3;0',\n"," 'sh;9.189614512471655;cta0007;0.07764172335600907;shto;0.2;0',\n"," 't;9.267256235827665;cta0007;0.06353741496598639;shto;0.2;0',\n"," 'o;9.33079365079365;cta0007;0.05945578231292517;shto;0.2;0',\n"," 'p;9.390249433106575;cta0007;0.08494331065759637;pry;0.16;1',\n"," 'r;9.475192743764172;cta0007;0.02761904761904762;pry;0.16;1',\n"," 'y;9.50281179138322;cta0007;0.042585034013605444;pry;0.16;1',\n"," 'i;9.545396825396825;cta0007;0.07006802721088436;i;0.07;1',\n"," 'z;9.61546485260771;cta0007;0.0653061224489796;za;0.15;1',\n"," 'a;9.680770975056689;cta0007;0.08131519274376417;za;0.15;1',\n"," 'sh;9.762086167800453;cta0007;0.12476190476190477;shlo;0.24;0',\n"," 'l;9.886848072562358;cta0007;0.05256235827664399;shlo;0.24;0',\n"," 'o;9.939410430839002;cta0007;0.0673015873015873;shlo;0.24;0',\n"," \"t';10.00671201814059;cta0007;0.12852607709750566;t'i;0.16;1\",\n"," \"i;10.135238095238096;cta0007;0.035192743764172335;t'i;0.16;1\",\n"," \"p';10.170430839002268;cta0007;0.13800453514739228;p'e;0.3;0\",\n"," \"e;10.30843537414966;cta0007;0.16081632653061226;p'e;0.3;0\",\n"," \"r';10.469251700680273;cta0007;0.0746031746031746;r'po;0.22;0\",\n"," \"p;10.866666666666667;cta0007;0.0673015873015873;r'po;0.22;0\",\n"," \"o;10.933968253968255;cta0007;0.08068027210884354;r'po;0.22;0\",\n"," \"s;11.014648526077098;cta0007;0.11360544217687076;sl'i;0.2;4\",\n"," \"l';11.128253968253969;cta0007;0.025759637188208617;sl'i;0.2;4\",\n"," \"i;11.154013605442177;cta0007;0.057414965986394555;sl'i;0.2;4\",\n"," 'ch;11.211428571428572;cta0007;0.11959183673469388;chi;0.16;1',\n"," 'i;11.331020408163266;cta0007;0.035510204081632656;chi;0.16;1',\n"," 't;11.366530612244897;cta0007;0.09541950113378685;ty;0.17;0',\n"," 'y;11.461950113378684;cta0007;0.07324263038548753;ty;0.17;0',\n"," 'r;11.535192743764172;cta0007;0.07741496598639455;rna;0.18;4',\n"," 'n;11.612607709750566;cta0007;0.053015873015873016;rna;0.18;4',\n"," 'a;11.66562358276644;cta0007;0.04861678004535147;rna;0.18;4',\n"," 'c;11.714240362811791;cta0007;0.1034467120181406;cy;0.14;4',\n"," 'y;11.817687074829932;cta0007;0.037505668934240365;cy;0.14;4',\n"," \"t';11.855192743764173;cta0007;0.11047619047619048;t'i;0.16;4\",\n"," \"i;11.965668934240362;cta0007;0.04671201814058957;t'i;0.16;4\",\n"," \"l';12.012380952380953;cta0007;0.07777777777777778;l'e;0.18;0\",\n"," \"e;12.09015873015873;cta0007;0.09841269841269841;l'e;0.18;0\",\n"," 't;12.188571428571429;cta0007;0.11664399092970522;tsu;0.29;1',\n"," 's;12.538548752834467;cta0007;0.1236281179138322;tsu;0.29;1',\n"," 'u;12.662176870748299;cta0007;0.04743764172335601;tsu;0.29;1',\n"," 'p;12.709614512471655;cta0007;0.10766439909297053;pru;0.25;0',\n"," 'r;12.817278911564626;cta0007;0.048390022675736964;pru;0.25;0',\n"," 'u;12.865668934240363;cta0007;0.09396825396825396;pru;0.25;0',\n"," 'zh;12.959637188208617;cta0007;0.06852607709750567;zhy;0.12;4',\n"," 'y;13.028163265306123;cta0007;0.04975056689342404;zhy;0.12;4',\n"," 's;13.077913832199547;cta0007;0.08049886621315193;sky;0.25;4',\n"," 'k;13.158412698412699;cta0007;0.08036281179138322;sky;0.25;4',\n"," 'y;13.238775510204082;cta0007;0.08621315192743764;sky;0.25;4',\n"," 'zh;13.324988662131519;cta0007;0.083718820861678;zhy;0.19;0',\n"," 'y;13.408707482993197;cta0007;0.10657596371882086;zhy;0.19;0',\n"," \"z';13.515283446712019;cta0007;0.07102040816326531;z'n'i;0.18;4\",\n"," \"n';13.586303854875283;cta0007;0.062448979591836734;z'n'i;0.18;4\",\n"," \"i;13.64875283446712;cta0007;0.04380952380952381;z'n'i;0.18;4\",\n"," \"d;13.692562358276644;cta0007;0.09328798185941044;dm'i;0.24;0\",\n"," \"m';13.785850340136054;cta0007;0.07868480725623583;dm'i;0.24;0\",\n"," \"i;13.86453514739229;cta0007;0.06489795918367347;dm'i;0.24;0\",\n"," \"t;13.929433106575964;cta0007;0.09841269841269841;tr'e;0.25;4\",\n"," \"r';14.027845804988662;cta0007;0.05174603174603175;tr'e;0.25;4\",\n"," \"e;14.079591836734695;cta0007;0.09873015873015872;tr'e;0.25;4\",\n"," 'v;14.178321995464852;cta0007;0.06612244897959184;va;0.19;4',\n"," 'a;14.244444444444444;cta0007;0.12625850340136055;va;0.19;4',\n"," \"f;0.0;cta0008;0.04621315192743764;fs'i;0.2;1\",\n"," \"s';0.04621315192743764;cta0008;0.10208616780045351;fs'i;0.2;1\",\n"," \"i;0.14829931972789115;cta0008;0.05523809523809524;fs'i;0.2;1\",\n"," 'g;0.2035374149659864;cta0008;0.07224489795918368;gda;0.21;0',\n"," 'd;0.2757823129251701;cta0008;0.05986394557823129;gda;0.21;0',\n"," 'a;0.33564625850340135;cta0008;0.07804988662131519;gda;0.21;0',\n"," 'o;0.41369614512471653;cta0008;0.0854875283446712;o;0.09;0',\n"," 'n;0.49918367346938775;cta0008;0.052607709750566896;nna;0.17;1',\n"," 'n;0.5517913832199547;cta0008;0.06;nna;0.17;1',\n"," 'a;0.6117913832199546;cta0008;0.060408163265306125;nna;0.17;1',\n"," 't;0.6721995464852608;cta0008;0.09229024943310657;ta;0.17;0',\n"," 'a;0.7644897959183673;cta0008;0.07419501133786847;ta;0.17;0',\n"," \"l;0.8386848072562358;cta0008;0.05877551020408163;lk'i;0.19;4\",\n"," \"k';0.8974603174603175;cta0008;0.10979591836734694;lk'i;0.19;4\",\n"," \"i;1.0072562358276644;cta0008;0.023900226757369615;lk'i;0.19;4\",\n"," 'v;1.031156462585034;cta0008;0.06494331065759637;vy;0.11;4',\n"," 'y;1.0960997732426303;cta0008;0.044897959183673466;vy;0.11;4',\n"," \"l;1.1409977324263039;cta0008;0.03605442176870748;ls'a;0.19;4\",\n"," \"s';1.1770521541950114;cta0008;0.1073469387755102;ls'a;0.19;4\",\n"," \"a;1.2843990929705216;cta0008;0.04458049886621315;ls'a;0.19;4\",\n"," 'n;1.3289795918367346;cta0008;0.06145124716553288;na;0.13;1',\n"," 'a;1.3904308390022675;cta0008;0.06798185941043083;na;0.13;1',\n"," \"t;1.4584126984126984;cta0008;0.07351473922902495;tv'o;0.26;0\",\n"," \"v';1.5319274376417233;cta0008;0.09501133786848072;tv'o;0.26;0\",\n"," \"o;1.626938775510204;cta0008;0.09505668934240363;tv'o;0.26;0\",\n"," 'r;1.7219954648526077;cta0008;0.04870748299319728;rdy;0.23;4',\n"," 'd;1.770702947845805;cta0008;0.0836734693877551;rdy;0.23;4',\n"," 'y;1.8543764172335602;cta0008;0.09619047619047619;rdy;0.23;4',\n"," 's;1.9505668934240363;cta0008;0.09614512471655329;sy;0.13;1',\n"," 'y;2.04671201814059;cta0008;0.033242630385487526;sy;0.13;1',\n"," 'p;2.079954648526077;cta0008;0.09165532879818594;pry;0.14;1',\n"," 'r;2.171609977324263;cta0008;0.02857142857142857;pry;0.14;1',\n"," 'y;2.2001814058956914;cta0008;0.02272108843537415;pry;0.14;1',\n"," \"t';2.222902494331066;cta0008;0.10122448979591837;t'i;0.15;1\",\n"," \"i;2.324126984126984;cta0008;0.0509750566893424;t'i;0.15;1\",\n"," \"v;2.3751020408163264;cta0008;0.055419501133786846;vl'e;0.18;0\",\n"," \"l';2.4305215419501134;cta0008;0.04979591836734694;vl'e;0.18;0\",\n"," \"e;2.4803174603174605;cta0008;0.07777777777777778;vl'e;0.18;0\",\n"," \"n';2.558095238095238;cta0008;0.09995464852607709;n'e;0.22;4\",\n"," \"e;2.658049886621315;cta0008;0.11750566893424036;n'e;0.22;4\",\n"," \"l';2.7755555555555556;cta0008;0.09782312925170068;l'e;0.23;0\",\n"," \"e;2.8733786848072564;cta0008;0.13238095238095238;l'e;0.23;0\",\n"," 'n;3.0057596371882087;cta0008;0.08213151927437641;ny;0.25;4',\n"," 'y;3.087891156462585;cta0008;0.1688888888888889;ny;0.25;4',\n"," 'i;3.736281179138322;cta0008;0.1363265306122449;i;0.14;1',\n"," 'z;3.8726077097505667;cta0008;0.07927437641723356;zga;0.26;1',\n"," 'g;3.9518820861678003;cta0008;0.08580498866213151;zga;0.26;1',\n"," 'a;4.037687074829932;cta0008;0.09696145124716553;zga;0.26;1',\n"," 'd;4.134648526077098;cta0008;0.07682539682539682;da;0.2;0',\n"," 'a;4.211473922902495;cta0008;0.12226757369614512;da;0.2;0',\n"," \"m';4.333741496598639;cta0008;0.085578231292517;m'i;0.22;4\",\n"," \"i;4.419319727891157;cta0008;0.13519274376417234;m'i;0.22;4\",\n"," 'i;4.554512471655329;cta0008;0.19791383219954647;i;0.2;1',\n"," \"d';4.752426303854875;cta0008;0.10390022675736961;d'e;0.17;0\",\n"," \"e;4.856326530612245;cta0008;0.0654421768707483;d'e;0.17;0\",\n"," 'j;4.921768707482993;cta0008;0.06308390022675738;ja;0.13;4',\n"," 'a;4.98485260770975;cta0008;0.07011337868480726;ja;0.13;4',\n"," 's;5.054965986394558;cta0008;0.11473922902494331;sta;0.26;0',\n"," 't;5.169705215419501;cta0008;0.07532879818594104;sta;0.26;0',\n"," 'a;5.2450340136054425;cta0008;0.07011337868480726;sta;0.26;0',\n"," 'l;5.31514739229025;cta0008;0.07265306122448979;le;0.13;4',\n"," 'e;5.387800453514739;cta0008;0.061632653061224486;le;0.13;4',\n"," 'j;5.449433106575964;cta0008;0.052244897959183675;ji;0.08;1',\n"," 'i;5.501678004535147;cta0008;0.032426303854875285;ji;0.08;1',\n"," \"v;5.534104308390023;cta0008;0.08526077097505669;vl'a;0.24;0\",\n"," \"l';5.619365079365079;cta0008;0.0599546485260771;vl'a;0.24;0\",\n"," \"a;5.679319727891157;cta0008;0.0910204081632653;vl'a;0.24;0\",\n"," 'c;5.770340136054422;cta0008;0.1435374149659864;cy;0.18;4',\n"," 'y;5.913877551020408;cta0008;0.03337868480725623;cy;0.18;4',\n"," \"f;5.947256235827664;cta0008;0.07959183673469387;fs'o;0.25;0\",\n"," \"s';6.026848072562358;cta0008;0.09668934240362811;fs'o;0.25;0\",\n"," \"o;6.123537414965987;cta0008;0.07673469387755102;fs'o;0.25;0\",\n"," \"r';6.200272108843538;cta0008;0.03936507936507937;r'e;0.19;0\",\n"," \"e;6.239637188208617;cta0008;0.14943310657596373;r'e;0.19;0\",\n"," 'zh;6.38907029478458;cta0008;0.09977324263038549;zhy;0.23;4',\n"," 'y;6.488843537414966;cta0008;0.13224489795918368;zhy;0.23;4',\n"," 'i;0.0;cta0009;0.12476190476190477;i;0.12;1',\n"," 't;0.12476190476190477;cta0009;0.1401814058956916;to;0.25;0',\n"," 'o;0.26494331065759635;cta0009;0.10784580498866213;to;0.25;0',\n"," \"l';0.3727891156462585;cta0009;0.0545124716553288;l'i;0.12;4\",\n"," \"i;0.4273015873015873;cta0009;0.0673015873015873;l'i;0.12;4\",\n"," \"sh;0.4946031746031746;cta0009;0.10267573696145124;shvm'i;0.34;1\",\n"," \"v;0.5972789115646259;cta0009;0.11746031746031746;shvm'i;0.34;1\",\n"," \"m';0.7147392290249434;cta0009;0.059727891156462584;shvm'i;0.34;1\",\n"," \"i;0.7744671201814058;cta0009;0.05800453514739229;shvm'i;0.34;1\",\n"," 'n;0.8324716553287982;cta0009;0.0799092970521542;nu;0.15;0',\n"," 'u;0.9123809523809524;cta0009;0.06598639455782312;nu;0.15;0',\n"," 't;0.9783673469387755;cta0009;0.0980952380952381;ty;0.12;4',\n"," 'y;1.0764625850340137;cta0009;0.020816326530612245;ty;0.12;4',\n"," 'r;1.0972789115646258;cta0009;0.03709750566893424;ra;0.1;2',\n"," 'a;1.1343764172335602;cta0009;0.06603174603174604;ra;0.1;2',\n"," 'z;1.200408163265306;cta0009;0.04199546485260771;zdra;0.26;1',\n"," 'd;1.2424036281179138;cta0009;0.0926530612244898;zdra;0.26;1',\n"," 'r;1.3350566893424036;cta0009;0.029251700680272108;zdra;0.26;1',\n"," 'a;1.3643083900226758;cta0009;0.09129251700680271;zdra;0.26;1',\n"," 'zh;1.4556009070294784;cta0009;0.05723356009070295;zhy;0.18;0',\n"," 'y;1.5128344671201814;cta0009;0.1235827664399093;zhy;0.18;0',\n"," \"n';1.6364172335600906;cta0009;0.10498866213151928;n'e;0.16;4\",\n"," \"e;1.74140589569161;cta0009;0.055011337868480725;n'e;0.16;4\",\n"," 'a;1.7964172335600908;cta0009;0.10975056689342404;a;0.11;4',\n"," 'a;0.0;cta0010;0.0946485260770975;a;0.09;1',\n"," 'n;0.0946485260770975;cta0010;0.06829931972789116;na;0.12;0',\n"," 'a;0.16294784580498867;cta0010;0.05292517006802721;na;0.12;0',\n"," \"p;0.21587301587301588;cta0010;0.0799092970521542;pr'i;0.16;1\",\n"," \"r';0.29578231292517004;cta0010;0.029433106575963718;pr'i;0.16;1\",\n"," \"i;0.3252154195011338;cta0010;0.048752834467120185;pr'i;0.16;1\",\n"," 'v;0.37396825396825395;cta0010;0.0618140589569161;vra;0.16;1',\n"," 'r;0.43578231292517006;cta0010;0.02875283446712018;vra;0.16;1',\n"," 'a;0.46453514739229024;cta0010;0.07260770975056689;vra;0.16;1',\n"," \"t';0.5371428571428571;cta0010;0.11678004535147392;t'i;0.17;0\",\n"," \"i;0.653922902494331;cta0010;0.04897959183673469;t'i;0.17;0\",\n"," 'l;0.7029024943310658;cta0010;0.04852607709750567;ly;0.1;4',\n"," 'y;0.7514285714285714;cta0010;0.05106575963718821;ly;0.1;4',\n"," \"s';0.8024943310657596;cta0010;0.09056689342403629;s'fpy;0.33;1\",\n"," \"f;0.893061224489796;cta0010;0.11310657596371881;s'fpy;0.33;1\",\n"," \"p;1.0061678004535148;cta0010;0.09170068027210884;s'fpy;0.33;1\",\n"," \"y;1.0978684807256236;cta0010;0.03573696145124716;s'fpy;0.33;1\",\n"," 'r;1.1336054421768706;cta0010;0.06167800453514739;rta;0.22;1',\n"," 't;1.1952834467120181;cta0010;0.08063492063492063;rta;0.22;1',\n"," 'a;1.2759183673469388;cta0010;0.07913832199546485;rta;0.22;1',\n"," \"t';1.3550566893424036;cta0010;0.13687074829931972;t'i;0.22;0\",\n"," \"i;1.4919274376417233;cta0010;0.07936507936507936;t'i;0.22;0\",\n"," 'v;1.5712925170068026;cta0010;0.04925170068027211;vne;0.22;4',\n"," 'n;1.6205442176870748;cta0010;0.10158730158730159;vne;0.22;4',\n"," 'e;1.7221315192743765;cta0010;0.0709750566893424;vne;0.22;4',\n"," 'i;1.7931065759637188;cta0010;0.11170068027210885;i;0.11;4',\n"," 'i;1.9048072562358276;cta0010;0.15841269841269842;i;0.16;1',\n"," 'u;2.063219954648526;cta0010;0.09129251700680271;u;0.09;1',\n"," 'd;2.154512471655329;cta0010;0.10521541950113379;do;0.22;0',\n"," 'o;2.2597278911564627;cta0010;0.1111111111111111;do;0.22;0',\n"," 'b;2.370839002267574;cta0010;0.07215419501133787;bne;0.24;4',\n"," 'n;2.4429931972789114;cta0010;0.08879818594104308;bne;0.24;4',\n"," 'e;2.5317913832199546;cta0010;0.07519274376417233;bne;0.24;4',\n"," 'e;2.606984126984127;cta0010;0.16435374149659865;e;0.16;4',\n"," \"f;2.963356009070295;cta0010;0.04707482993197279;fs'i;0.2;1\",\n"," \"s';3.0104308390022676;cta0010;0.10326530612244898;fs'i;0.2;1\",\n"," \"i;3.1136961451247167;cta0010;0.045759637188208614;fs'i;0.2;1\",\n"," 'g;3.159455782312925;cta0010;0.08349206349206349;gda;0.24;0',\n"," 'd;3.2429478458049887;cta0010;0.05600907029478458;gda;0.24;0',\n"," 'a;3.2989569160997734;cta0010;0.09664399092970521;gda;0.24;0',\n"," \"p;3.3956009070294786;cta0010;0.09532879818594105;pr'i;0.19;1\",\n"," \"r';3.4909297052154193;cta0010;0.04054421768707483;pr'i;0.19;1\",\n"," \"i;3.5314739229024945;cta0010;0.05378684807256236;pr'i;0.19;1\",\n"," \"s';3.5852607709750566;cta0010;0.1310657596371882;s'i;0.17;1\",\n"," \"i;3.716326530612245;cta0010;0.03968253968253968;s'i;0.17;1\",\n"," \"b';3.7560090702947844;cta0010;0.06857142857142857;b'e;0.21;0\",\n"," \"e;3.8245804988662133;cta0010;0.14616780045351474;b'e;0.21;0\",\n"," 'a;4.468072562358277;cta0010;0.12344671201814059;a;0.12;1',\n"," 'r;4.5915192743764175;cta0010;0.027482993197278913;ru;0.15;0',\n"," 'u;4.619002267573697;cta0010;0.12471655328798185;ru;0.15;0',\n"," 'zh;4.743718820861678;cta0010;0.09337868480725624;zhy;0.16;4',\n"," 'y;4.837097505668934;cta0010;0.06294784580498866;zhy;0.16;4',\n"," 'e;4.900045351473923;cta0010;0.07151927437641724;e;0.07;4',\n"," \"d;4.97156462585034;cta0010;0.061541950113378686;dl'a;0.21;1\",\n"," \"l';5.033106575963719;cta0010;0.07941043083900227;dl'a;0.21;1\",\n"," \"a;5.1125170068027215;cta0010;0.07387755102040816;dl'a;0.21;1\",\n"," \"m';5.186394557823129;cta0010;0.10390022675736961;m'e;0.18;0\",\n"," \"e;5.290294784580499;cta0010;0.07360544217687075;m'e;0.18;0\",\n"," \"l;5.363900226757369;cta0010;0.05310657596371882;lk'i;0.24;4\",\n"," \"k';5.4170068027210885;cta0010;0.12857142857142856;lk'i;0.24;4\",\n"," \"i;5.545578231292517;cta0010;0.06126984126984127;lk'i;0.24;4\",\n"," \"h;5.606848072562358;cta0010;0.04979591836734694;hs'i;0.22;1\",\n"," \"s';5.656643990929705;cta0010;0.1091156462585034;hs'i;0.22;1\",\n"," \"i;5.765759637188209;cta0010;0.06195011337868481;hs'i;0.22;1\",\n"," \"m';5.8277097505668936;cta0010;0.08562358276643992;m'e;0.15;0\",\n"," \"e;5.913333333333333;cta0010;0.06294784580498866;m'e;0.15;0\",\n"," 'j;5.976281179138322;cta0010;0.05414965986394558;jny;0.17;4',\n"," 'n;6.030430839002268;cta0010;0.0707482993197279;jny;0.17;4',\n"," 'y;6.101179138321996;cta0010;0.042675736961451244;jny;0.17;4',\n"," 'h;6.143854875283447;cta0010;0.05519274376417234;hsty;0.33;0',\n"," 's;6.199047619047619;cta0010;0.09052154195011337;hsty;0.33;0',\n"," 't;6.289569160997733;cta0010;0.09065759637188209;hsty;0.33;0',\n"," 'y;6.3802267573696145;cta0010;0.09854875283446712;hsty;0.33;0',\n"," 'ch;6.478775510204081;cta0010;0.11700680272108843;che;0.19;4',\n"," 'e;6.59578231292517;cta0010;0.06811791383219955;che;0.19;4']"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":[],"metadata":{"id":"wMZa3s71VNHb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = pd.read_csv('syllables.txt', sep=\";\")"],"metadata":{"id":"oMDAsHNeJ6U5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sound = parselmouth.Sound(sound_files[0])"],"metadata":{"id":"2Sj6I1xsJ50F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pitch = sound.to_pitch(pitch_ceiling=600, pitch_floor=100)\n","from numpy import arange\n","times = arange(0, sound.xmax, 0.01)\n","pitch_vals = [pitch.get_value_at_time(i) for i in times]"],"metadata":{"id":"7G0mS6rMJ-Ti"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(pitch_vals)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QWMSgShEKB0C","executionInfo":{"status":"ok","timestamp":1685090826396,"user_tz":-180,"elapsed":5,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"f5a118c2-69fb-4899-f863-1dc1d275bcb9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[nan, nan, 164.23336064372435, 153.51021547199, 152.0972262216699, 153.60176055490777, 153.408225555857, 151.58660816977567, 149.131281248116, 147.46328091018748, 147.00176424233865, 147.15326580027966, 149.05782400620672, 153.9170687596054, 159.73931055437558, 172.77865266691947, 191.08310720724452, 213.0448567276902, 234.50093948532452, 255.45142312331734, 272.50923078906476, 284.0878144138164, 288.32473371228815, 296.412961396842, 306.10349138996804, 315.36183512705134, 320.94518991284235, 324.45151405964987, 325.1663707820644, 321.3687457703259, 310.1860157970268, 319.72667774941596, 322.39000139027155, 321.182373324172, 319.51691107955764, 316.74408266278766, 314.53562628206737, 313.42291164337365, 312.7538960923417, 312.40861688745554, 310.0908464569748, 310.0365110723016, 314.6562761574518, 319.91465569417574, 316.7400885676927, 317.4848963373101, 317.7567496999037, 316.6402813362079, 316.35745432007934, nan, nan, nan, nan, nan, nan, 216.43039292858285, 203.76491283486936, 178.4520549818595, 171.50436950757077, 185.60865815268727, 192.40078288413952, 191.90050437405492, 187.88437261582257, 183.01779122491314, 177.36964971140569, 173.52643042080513, 171.5287236958248, 170.90730178752042, 169.63341458077522, 166.768189910009, 156.89066773446496, 143.18683688048634, 132.33220808916914, nan, nan, nan, nan, nan, nan, nan, nan, nan, 148.31358693881646, 162.1760893895787, 153.82372184576346, 150.6203291590186, 148.34939982446525, 141.78160698418978, 146.73115425735145, 146.98625808488023, 146.81293063031586, 145.71566540243683, 144.0251615647826, 143.61435004813094, 145.85066661456327, 143.28502756195786, 142.10626921578256, 140.73802988231967, 139.41134743510347, 137.84687769563445, 134.66583390535388, 128.67632413586628, 122.7375935489118, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, 584.1304728041134, 527.7719610368176, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]\n"]}]},{"cell_type":"code","source":["plt.plot(times, pitch_vals)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"vqS9dDD5KC1f","executionInfo":{"status":"ok","timestamp":1685090828369,"user_tz":-180,"elapsed":655,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"670c6343-752e-48d2-8af7-ce100f4facf6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def find_pitch_financially(df): #Чот стоит посчитать через seg... 22050/разность от одной до следующей точки отсчета (выкидываем перв и последний)\n","  sounds = list(df['sound'])\n","  time_codes = list(df['time_code'])\n","  sound_length = list(df['sound_length']) \n","  unvoiced_consonants = ['t', 'p', 'k', 'f', 'zh', 'ch', 'x', 't\\'', 'p\\'', 'k\\'', 'f\\'', 's\\'', 'sh\\'', 'ch\\'', 'x\\'',]\n","  file = list(df['file'])\n","  pitch_max = []\n","  pitch_min = []\n","  pitch_mean = []\n","  pitch_start = []\n","  pitch_end = []\n","  for i, s in enumerate(df['sound']):\n","    sound = parselmouth.Sound(path + '/' + file[i] + '.wav')\n","    pitch = sound.to_pitch(pitch_ceiling=700)\n","    times = arange(time_codes[i], time_codes[i] + sound_length[i], 0.005)\n","    pitch_vals = [pitch.get_value_at_time(i) for i in times if not np.isnan(pitch.get_value_at_time(i))]\n","    print(i)\n","    try:\n","      if len(pitch_vals) > 1:\n","        pitch_vals = pitch_vals[3:len(pitch_vals) - 4] # Избавляемся от первых и последних пары отсчетов, предполагая, что они могут быть ошибочными\n","    except Exception as e:\n","      print(e)\n","    if s in unvoiced_consonants:\n","      pitch_vals = []\n","    if pitch_vals != []:\n","      sound_pitch_max = max(pitch_vals)\n","      sound_pitch_min = min(pitch_vals)\n","      sound_pitch_mean = sum(pitch_vals) / len(pitch_vals)\n","      sound_pitch_start = pitch_vals[0]\n","      sound_pitch_end = pitch_vals[len(pitch_vals) - 1]\n","    else:\n","      sound_pitch_max = 0\n","      sound_pitch_min = 0\n","      sound_pitch_mean = 0\n","      sound_pitch_start = 0\n","      sound_pitch_end = 0\n","    pitch_max.append(sound_pitch_max)\n","    pitch_min.append(sound_pitch_min)\n","    pitch_mean.append(sound_pitch_mean)\n","    pitch_start.append(sound_pitch_start)\n","    pitch_end.append(sound_pitch_end)\n","  #df[\"pitch\"] = intensities\n","  df[\"pitch_max\"] = pitch_max\n","  df[\"pitch_min\"] = pitch_min\n","  df[\"pitch_mean\"] = pitch_mean\n","  df[\"pitch_start\"] = pitch_start\n","  df[\"pitch_end\"] = pitch_end\n","  return df"],"metadata":{"id":"pQCowlUdKG-a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_2 = find_pitch_financially(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r7nwaNoMKIvF","executionInfo":{"status":"ok","timestamp":1685090928934,"user_tz":-180,"elapsed":88843,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"a3cbc0a9-8b5e-4393-e420-dc3406c8bc78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","162\n","163\n","164\n","165\n","166\n","167\n","168\n","169\n","170\n","171\n","172\n","173\n","174\n","175\n","176\n","177\n","178\n","179\n","180\n","181\n","182\n","183\n","184\n","185\n","186\n","187\n","188\n","189\n","190\n","191\n","192\n","193\n","194\n","195\n","196\n","197\n","198\n","199\n","200\n","201\n","202\n","203\n","204\n","205\n","206\n","207\n","208\n","209\n","210\n","211\n","212\n","213\n","214\n","215\n","216\n","217\n","218\n","219\n","220\n","221\n","222\n","223\n","224\n","225\n","226\n","227\n","228\n","229\n","230\n","231\n","232\n","233\n","234\n","235\n","236\n","237\n","238\n","239\n","240\n","241\n","242\n","243\n","244\n","245\n","246\n","247\n","248\n","249\n","250\n","251\n","252\n","253\n","254\n","255\n","256\n","257\n","258\n","259\n","260\n","261\n","262\n","263\n","264\n","265\n","266\n","267\n","268\n","269\n","270\n","271\n","272\n","273\n","274\n","275\n","276\n","277\n","278\n","279\n","280\n","281\n","282\n","283\n","284\n","285\n","286\n","287\n","288\n","289\n","290\n","291\n","292\n","293\n","294\n","295\n","296\n","297\n","298\n","299\n","300\n","301\n","302\n","303\n","304\n","305\n","306\n","307\n","308\n","309\n","310\n","311\n","312\n","313\n","314\n","315\n","316\n","317\n","318\n","319\n","320\n","321\n","322\n","323\n","324\n","325\n","326\n","327\n","328\n","329\n","330\n","331\n","332\n","333\n","334\n","335\n","336\n","337\n","338\n","339\n","340\n","341\n","342\n","343\n","344\n","345\n","346\n","347\n","348\n","349\n","350\n","351\n","352\n","353\n","354\n","355\n","356\n","357\n","358\n","359\n","360\n","361\n","362\n","363\n","364\n","365\n","366\n","367\n","368\n","369\n","370\n","371\n","372\n","373\n","374\n","375\n","376\n","377\n","378\n","379\n","380\n","381\n","382\n","383\n","384\n","385\n","386\n","387\n","388\n","389\n","390\n","391\n","392\n","393\n","394\n","395\n","396\n","397\n","398\n","399\n","400\n","401\n","402\n","403\n","404\n","405\n","406\n","407\n","408\n","409\n","410\n","411\n","412\n","413\n","414\n","415\n","416\n","417\n","418\n","419\n","420\n","421\n","422\n","423\n","424\n","425\n","426\n","427\n","428\n","429\n","430\n","431\n","432\n","433\n","434\n","435\n","436\n","437\n","438\n","439\n","440\n","441\n","442\n","443\n","444\n","445\n","446\n","447\n","448\n","449\n","450\n","451\n","452\n","453\n","454\n","455\n","456\n","457\n","458\n","459\n","460\n","461\n","462\n","463\n","464\n","465\n","466\n","467\n","468\n","469\n","470\n","471\n","472\n","473\n","474\n","475\n","476\n","477\n","478\n","479\n","480\n","481\n","482\n","483\n","484\n","485\n","486\n","487\n","488\n","489\n","490\n","491\n","492\n","493\n","494\n","495\n","496\n","497\n","498\n","499\n","500\n","501\n","502\n","503\n","504\n","505\n","506\n","507\n","508\n","509\n","510\n","511\n","512\n","513\n","514\n","515\n","516\n","517\n","518\n","519\n","520\n","521\n","522\n","523\n","524\n","525\n","526\n","527\n","528\n","529\n","530\n","531\n","532\n","533\n","534\n","535\n","536\n","537\n","538\n","539\n","540\n","541\n","542\n","543\n","544\n","545\n","546\n","547\n","548\n","549\n","550\n","551\n","552\n","553\n","554\n","555\n","556\n","557\n","558\n","559\n","560\n","561\n","562\n","563\n","564\n","565\n","566\n","567\n","568\n","569\n","570\n","571\n","572\n","573\n","574\n","575\n","576\n","577\n","578\n","579\n","580\n","581\n","582\n","583\n","584\n","585\n","586\n","587\n","588\n","589\n","590\n","591\n","592\n","593\n","594\n","595\n","596\n","597\n","598\n","599\n","600\n","601\n","602\n","603\n","604\n","605\n","606\n","607\n","608\n","609\n","610\n","611\n","612\n","613\n","614\n","615\n","616\n","617\n","618\n","619\n","620\n","621\n","622\n","623\n","624\n","625\n","626\n","627\n","628\n","629\n","630\n","631\n","632\n","633\n","634\n","635\n","636\n","637\n","638\n","639\n","640\n","641\n","642\n","643\n","644\n","645\n","646\n","647\n","648\n","649\n","650\n","651\n","652\n","653\n","654\n","655\n","656\n","657\n","658\n","659\n","660\n","661\n","662\n","663\n","664\n","665\n","666\n","667\n","668\n","669\n","670\n","671\n","672\n","673\n","674\n","675\n","676\n","677\n","678\n","679\n","680\n","681\n","682\n","683\n","684\n","685\n","686\n","687\n","688\n","689\n","690\n","691\n","692\n","693\n","694\n","695\n","696\n","697\n","698\n","699\n","700\n","701\n","702\n","703\n","704\n","705\n","706\n","707\n","708\n","709\n","710\n","711\n","712\n","713\n","714\n","715\n","716\n","717\n","718\n","719\n","720\n","721\n","722\n","723\n","724\n","725\n","726\n","727\n","728\n","729\n","730\n","731\n","732\n","733\n","734\n","735\n","736\n","737\n","738\n","739\n","740\n","741\n","742\n","743\n","744\n","745\n","746\n","747\n","748\n","749\n","750\n","751\n","752\n","753\n","754\n","755\n","756\n","757\n","758\n","759\n","760\n","761\n","762\n","763\n","764\n","765\n","766\n","767\n","768\n","769\n","770\n","771\n","772\n","773\n","774\n","775\n","776\n","777\n","778\n","779\n","780\n","781\n","782\n","783\n","784\n","785\n","786\n","787\n","788\n","789\n","790\n","791\n","792\n","793\n","794\n","795\n","796\n","797\n","798\n","799\n","800\n","801\n","802\n","803\n","804\n","805\n","806\n","807\n","808\n","809\n","810\n","811\n","812\n","813\n","814\n","815\n","816\n","817\n","818\n","819\n","820\n","821\n","822\n","823\n","824\n","825\n","826\n","827\n","828\n","829\n","830\n","831\n","832\n","833\n","834\n","835\n","836\n","837\n","838\n","839\n","840\n","841\n","842\n","843\n","844\n","845\n","846\n","847\n","848\n","849\n","850\n","851\n","852\n","853\n","854\n","855\n","856\n","857\n","858\n","859\n","860\n","861\n","862\n","863\n","864\n","865\n","866\n","867\n","868\n","869\n","870\n","871\n","872\n","873\n","874\n","875\n","876\n","877\n","878\n","879\n","880\n","881\n","882\n","883\n","884\n","885\n","886\n","887\n","888\n","889\n","890\n","891\n","892\n","893\n","894\n","895\n","896\n","897\n","898\n","899\n","900\n","901\n","902\n","903\n","904\n","905\n","906\n","907\n","908\n","909\n","910\n","911\n","912\n"]}]},{"cell_type":"code","source":["#data_2 = pd.read_csv(path + '/our_analyse_of_sounds.csv', sep=\";\")"],"metadata":{"id":"ZbnynLEXKM8e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_2[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":427},"id":"Py05Bjs4KOyd","executionInfo":{"status":"ok","timestamp":1685090928936,"user_tz":-180,"elapsed":31,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"340ca67d-58b5-4f10-cb26-0e59cb932dc4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  sound  time_code     file  sound_length syllable  syllable_length  \\\n","0     j   0.000000  cta0001      0.192562       ju             0.29   \n","1     u   0.192562  cta0001      0.095601       ju             0.29   \n","2    r'   0.288163  cta0001      0.022676      r'i             0.12   \n","3     i   0.310839  cta0001      0.101406      r'i             0.12   \n","4     t   0.412245  cta0001      0.152472     tr'i             0.30   \n","5    r'   0.564717  cta0001      0.023492     tr'i             0.30   \n","6     i   0.588209  cta0001      0.127075     tr'i             0.30   \n","7     f   0.715283  cta0001      0.119320       fa             0.16   \n","8     a   0.834603  cta0001      0.040771       fa             0.16   \n","9     n   0.875374  cta0001      0.068345       na             0.13   \n","\n","   stress_position   pitch_max   pitch_min  pitch_mean  pitch_start  \\\n","0                0  215.476881  146.901255  159.676564   152.055716   \n","1                0  323.395910  280.830226  303.458957   280.830226   \n","2                4    0.000000    0.000000    0.000000     0.000000   \n","3                4  321.766226  311.722120  316.036942   321.766226   \n","4                0    0.000000    0.000000    0.000000     0.000000   \n","5                0    0.000000    0.000000    0.000000     0.000000   \n","6                0  192.406176  164.478043  177.488891   192.406176   \n","7                4    0.000000    0.000000    0.000000     0.000000   \n","8                4  150.866863  149.567408  150.217136   150.866863   \n","9                4  147.004511  144.144193  145.914605   147.004511   \n","\n","    pitch_end  \n","0  215.476881  \n","1  323.395910  \n","2    0.000000  \n","3  311.722120  \n","4    0.000000  \n","5    0.000000  \n","6  164.478043  \n","7    0.000000  \n","8  149.567408  \n","9  144.144193  "],"text/html":["\n","  <div id=\"df-00723a4e-e4f3-4090-8b9e-e00a5b34de65\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sound</th>\n","      <th>time_code</th>\n","      <th>file</th>\n","      <th>sound_length</th>\n","      <th>syllable</th>\n","      <th>syllable_length</th>\n","      <th>stress_position</th>\n","      <th>pitch_max</th>\n","      <th>pitch_min</th>\n","      <th>pitch_mean</th>\n","      <th>pitch_start</th>\n","      <th>pitch_end</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>j</td>\n","      <td>0.000000</td>\n","      <td>cta0001</td>\n","      <td>0.192562</td>\n","      <td>ju</td>\n","      <td>0.29</td>\n","      <td>0</td>\n","      <td>215.476881</td>\n","      <td>146.901255</td>\n","      <td>159.676564</td>\n","      <td>152.055716</td>\n","      <td>215.476881</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>u</td>\n","      <td>0.192562</td>\n","      <td>cta0001</td>\n","      <td>0.095601</td>\n","      <td>ju</td>\n","      <td>0.29</td>\n","      <td>0</td>\n","      <td>323.395910</td>\n","      <td>280.830226</td>\n","      <td>303.458957</td>\n","      <td>280.830226</td>\n","      <td>323.395910</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>r'</td>\n","      <td>0.288163</td>\n","      <td>cta0001</td>\n","      <td>0.022676</td>\n","      <td>r'i</td>\n","      <td>0.12</td>\n","      <td>4</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i</td>\n","      <td>0.310839</td>\n","      <td>cta0001</td>\n","      <td>0.101406</td>\n","      <td>r'i</td>\n","      <td>0.12</td>\n","      <td>4</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>316.036942</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>t</td>\n","      <td>0.412245</td>\n","      <td>cta0001</td>\n","      <td>0.152472</td>\n","      <td>tr'i</td>\n","      <td>0.30</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>r'</td>\n","      <td>0.564717</td>\n","      <td>cta0001</td>\n","      <td>0.023492</td>\n","      <td>tr'i</td>\n","      <td>0.30</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>i</td>\n","      <td>0.588209</td>\n","      <td>cta0001</td>\n","      <td>0.127075</td>\n","      <td>tr'i</td>\n","      <td>0.30</td>\n","      <td>0</td>\n","      <td>192.406176</td>\n","      <td>164.478043</td>\n","      <td>177.488891</td>\n","      <td>192.406176</td>\n","      <td>164.478043</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>f</td>\n","      <td>0.715283</td>\n","      <td>cta0001</td>\n","      <td>0.119320</td>\n","      <td>fa</td>\n","      <td>0.16</td>\n","      <td>4</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>a</td>\n","      <td>0.834603</td>\n","      <td>cta0001</td>\n","      <td>0.040771</td>\n","      <td>fa</td>\n","      <td>0.16</td>\n","      <td>4</td>\n","      <td>150.866863</td>\n","      <td>149.567408</td>\n","      <td>150.217136</td>\n","      <td>150.866863</td>\n","      <td>149.567408</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>n</td>\n","      <td>0.875374</td>\n","      <td>cta0001</td>\n","      <td>0.068345</td>\n","      <td>na</td>\n","      <td>0.13</td>\n","      <td>4</td>\n","      <td>147.004511</td>\n","      <td>144.144193</td>\n","      <td>145.914605</td>\n","      <td>147.004511</td>\n","      <td>144.144193</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00723a4e-e4f3-4090-8b9e-e00a5b34de65')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-00723a4e-e4f3-4090-8b9e-e00a5b34de65 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-00723a4e-e4f3-4090-8b9e-e00a5b34de65');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["import math\n","\n","def hertzToSemitones(hertz, f1 = 100):\n","    '''\n","    hertz - значение в герцах\n","    f1 - опорная частота, по умолчанию 100\n","    '''\n","    try:\n","      return  12*math.log(hertz/f1)/math.log(2)\n","    except:\n","      return 0\n","    \n","\n","def semitonesToHertz(semitone):\n","    return 100*math.exp(semitone*math.log(2)/12)"],"metadata":{"id":"BL2oErghLrp9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_2[\"pitch_max_semitones\"] = [hertzToSemitones(i) for i in list(data_2[\"pitch_max\"])]\n","data_2[\"pitch_min_semitones\"] = [hertzToSemitones(i) for i in list(data_2[\"pitch_min\"])]\n","data_2[\"pitch_start_semitones\"] = [hertzToSemitones(i) for i in list(data_2[\"pitch_start\"])]\n","data_2[\"pitch_end_semitones\"] = [hertzToSemitones(i) for i in list(data_2[\"pitch_end\"])]\n","data_2[\"pitch_mean_semitones\"] = [hertzToSemitones(i) for i in list(data_2[\"pitch_mean\"])]"],"metadata":{"id":"rWDU2VdmL9DT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_2.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"CgbwNBjoNvgm","executionInfo":{"status":"ok","timestamp":1685090928941,"user_tz":-180,"elapsed":32,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"3f71b3cc-9954-413d-c9c9-bee09355b2c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  sound  time_code     file  sound_length syllable  syllable_length  \\\n","0     j   0.000000  cta0001      0.192562       ju             0.29   \n","1     u   0.192562  cta0001      0.095601       ju             0.29   \n","2    r'   0.288163  cta0001      0.022676      r'i             0.12   \n","3     i   0.310839  cta0001      0.101406      r'i             0.12   \n","4     t   0.412245  cta0001      0.152472     tr'i             0.30   \n","\n","   stress_position   pitch_max   pitch_min  pitch_mean  pitch_start  \\\n","0                0  215.476881  146.901255  159.676564   152.055716   \n","1                0  323.395910  280.830226  303.458957   280.830226   \n","2                4    0.000000    0.000000    0.000000     0.000000   \n","3                4  321.766226  311.722120  316.036942   321.766226   \n","4                0    0.000000    0.000000    0.000000     0.000000   \n","\n","    pitch_end  pitch_max_semitones  pitch_min_semitones  \\\n","0  215.476881            13.290397             6.658161   \n","1  323.395910            20.319617            17.876379   \n","2    0.000000             0.000000             0.000000   \n","3  311.722120            20.232155            19.683126   \n","4    0.000000             0.000000             0.000000   \n","\n","   pitch_start_semitones  pitch_end_semitones  pitch_mean_semitones  \n","0               7.255201            13.290397              8.101831  \n","1              17.876379            20.319617             19.218017  \n","2               0.000000             0.000000              0.000000  \n","3              20.232155            19.683126             19.921118  \n","4               0.000000             0.000000              0.000000  "],"text/html":["\n","  <div id=\"df-385b0fcf-3e35-4f6b-8ac7-70ec8b564537\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sound</th>\n","      <th>time_code</th>\n","      <th>file</th>\n","      <th>sound_length</th>\n","      <th>syllable</th>\n","      <th>syllable_length</th>\n","      <th>stress_position</th>\n","      <th>pitch_max</th>\n","      <th>pitch_min</th>\n","      <th>pitch_mean</th>\n","      <th>pitch_start</th>\n","      <th>pitch_end</th>\n","      <th>pitch_max_semitones</th>\n","      <th>pitch_min_semitones</th>\n","      <th>pitch_start_semitones</th>\n","      <th>pitch_end_semitones</th>\n","      <th>pitch_mean_semitones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>j</td>\n","      <td>0.000000</td>\n","      <td>cta0001</td>\n","      <td>0.192562</td>\n","      <td>ju</td>\n","      <td>0.29</td>\n","      <td>0</td>\n","      <td>215.476881</td>\n","      <td>146.901255</td>\n","      <td>159.676564</td>\n","      <td>152.055716</td>\n","      <td>215.476881</td>\n","      <td>13.290397</td>\n","      <td>6.658161</td>\n","      <td>7.255201</td>\n","      <td>13.290397</td>\n","      <td>8.101831</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>u</td>\n","      <td>0.192562</td>\n","      <td>cta0001</td>\n","      <td>0.095601</td>\n","      <td>ju</td>\n","      <td>0.29</td>\n","      <td>0</td>\n","      <td>323.395910</td>\n","      <td>280.830226</td>\n","      <td>303.458957</td>\n","      <td>280.830226</td>\n","      <td>323.395910</td>\n","      <td>20.319617</td>\n","      <td>17.876379</td>\n","      <td>17.876379</td>\n","      <td>20.319617</td>\n","      <td>19.218017</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>r'</td>\n","      <td>0.288163</td>\n","      <td>cta0001</td>\n","      <td>0.022676</td>\n","      <td>r'i</td>\n","      <td>0.12</td>\n","      <td>4</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i</td>\n","      <td>0.310839</td>\n","      <td>cta0001</td>\n","      <td>0.101406</td>\n","      <td>r'i</td>\n","      <td>0.12</td>\n","      <td>4</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>316.036942</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>19.921118</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>t</td>\n","      <td>0.412245</td>\n","      <td>cta0001</td>\n","      <td>0.152472</td>\n","      <td>tr'i</td>\n","      <td>0.30</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-385b0fcf-3e35-4f6b-8ac7-70ec8b564537')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-385b0fcf-3e35-4f6b-8ac7-70ec8b564537 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-385b0fcf-3e35-4f6b-8ac7-70ec8b564537');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["data_2.drop(columns=[\"time_code\", \"syllable\", \"syllable_length\"], axis= 1 , inplace= True )"],"metadata":{"id":"RPfL3DP8N2pK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"NeYHcfkOOgC2","executionInfo":{"status":"ok","timestamp":1685090928944,"user_tz":-180,"elapsed":29,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"bb78c2d3-b4d9-45db-bd89-c5bebbfa1178"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    sound     file  sound_length  stress_position   pitch_max   pitch_min  \\\n","0       j  cta0001      0.192562                0  215.476881  146.901255   \n","1       u  cta0001      0.095601                0  323.395910  280.830226   \n","2      r'  cta0001      0.022676                4    0.000000    0.000000   \n","3       i  cta0001      0.101406                4  321.766226  311.722120   \n","4       t  cta0001      0.152472                0    0.000000    0.000000   \n","..    ...      ...           ...              ...         ...         ...   \n","908     s  cta0010      0.090522                0    0.000000    0.000000   \n","909     t  cta0010      0.090658                0    0.000000    0.000000   \n","910     y  cta0010      0.098549                0  205.087703  148.935975   \n","911    ch  cta0010      0.117007                4    0.000000    0.000000   \n","912     e  cta0010      0.068118                4  127.909828  114.832078   \n","\n","     pitch_mean  pitch_start   pitch_end  pitch_max_semitones  \\\n","0    159.676564   152.055716  215.476881            13.290397   \n","1    303.458957   280.830226  323.395910            20.319617   \n","2      0.000000     0.000000    0.000000             0.000000   \n","3    316.036942   321.766226  311.722120            20.232155   \n","4      0.000000     0.000000    0.000000             0.000000   \n","..          ...          ...         ...                  ...   \n","908    0.000000     0.000000    0.000000             0.000000   \n","909    0.000000     0.000000    0.000000             0.000000   \n","910  177.087527   205.087703  148.935975            12.434892   \n","911    0.000000     0.000000    0.000000             0.000000   \n","912  123.114061   114.832078  124.833567             4.261525   \n","\n","     pitch_min_semitones  pitch_start_semitones  pitch_end_semitones  \\\n","0               6.658161               7.255201            13.290397   \n","1              17.876379              17.876379            20.319617   \n","2               0.000000               0.000000             0.000000   \n","3              19.683126              20.232155            19.683126   \n","4               0.000000               0.000000             0.000000   \n","..                   ...                    ...                  ...   \n","908             0.000000               0.000000             0.000000   \n","909             0.000000               0.000000             0.000000   \n","910             6.896307              12.434892             6.896307   \n","911             0.000000               0.000000             0.000000   \n","912             2.394309               2.394309             3.840071   \n","\n","     pitch_mean_semitones  \n","0                8.101831  \n","1               19.218017  \n","2                0.000000  \n","3               19.921118  \n","4                0.000000  \n","..                    ...  \n","908              0.000000  \n","909              0.000000  \n","910              9.893551  \n","911              0.000000  \n","912              3.599946  \n","\n","[913 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-f431623d-aef7-4c34-8bc2-0f34d51271b2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sound</th>\n","      <th>file</th>\n","      <th>sound_length</th>\n","      <th>stress_position</th>\n","      <th>pitch_max</th>\n","      <th>pitch_min</th>\n","      <th>pitch_mean</th>\n","      <th>pitch_start</th>\n","      <th>pitch_end</th>\n","      <th>pitch_max_semitones</th>\n","      <th>pitch_min_semitones</th>\n","      <th>pitch_start_semitones</th>\n","      <th>pitch_end_semitones</th>\n","      <th>pitch_mean_semitones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>j</td>\n","      <td>cta0001</td>\n","      <td>0.192562</td>\n","      <td>0</td>\n","      <td>215.476881</td>\n","      <td>146.901255</td>\n","      <td>159.676564</td>\n","      <td>152.055716</td>\n","      <td>215.476881</td>\n","      <td>13.290397</td>\n","      <td>6.658161</td>\n","      <td>7.255201</td>\n","      <td>13.290397</td>\n","      <td>8.101831</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>u</td>\n","      <td>cta0001</td>\n","      <td>0.095601</td>\n","      <td>0</td>\n","      <td>323.395910</td>\n","      <td>280.830226</td>\n","      <td>303.458957</td>\n","      <td>280.830226</td>\n","      <td>323.395910</td>\n","      <td>20.319617</td>\n","      <td>17.876379</td>\n","      <td>17.876379</td>\n","      <td>20.319617</td>\n","      <td>19.218017</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>r'</td>\n","      <td>cta0001</td>\n","      <td>0.022676</td>\n","      <td>4</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i</td>\n","      <td>cta0001</td>\n","      <td>0.101406</td>\n","      <td>4</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>316.036942</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>19.921118</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>t</td>\n","      <td>cta0001</td>\n","      <td>0.152472</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>908</th>\n","      <td>s</td>\n","      <td>cta0010</td>\n","      <td>0.090522</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>909</th>\n","      <td>t</td>\n","      <td>cta0010</td>\n","      <td>0.090658</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>910</th>\n","      <td>y</td>\n","      <td>cta0010</td>\n","      <td>0.098549</td>\n","      <td>0</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>177.087527</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>9.893551</td>\n","    </tr>\n","    <tr>\n","      <th>911</th>\n","      <td>ch</td>\n","      <td>cta0010</td>\n","      <td>0.117007</td>\n","      <td>4</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>e</td>\n","      <td>cta0010</td>\n","      <td>0.068118</td>\n","      <td>4</td>\n","      <td>127.909828</td>\n","      <td>114.832078</td>\n","      <td>123.114061</td>\n","      <td>114.832078</td>\n","      <td>124.833567</td>\n","      <td>4.261525</td>\n","      <td>2.394309</td>\n","      <td>2.394309</td>\n","      <td>3.840071</td>\n","      <td>3.599946</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>913 rows × 14 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f431623d-aef7-4c34-8bc2-0f34d51271b2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f431623d-aef7-4c34-8bc2-0f34d51271b2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f431623d-aef7-4c34-8bc2-0f34d51271b2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["###Ударность меняем, оно там по-другому раньше считалось"],"metadata":{"id":"POjth0eaPn1e"}},{"cell_type":"code","source":["vowels = ['a','e','i','o','u','y']"],"metadata":{"id":"QkXgU_g3RSoW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df.loc['E','A'] = 111\n","for i in range(len(data_2)):\n","  if data_2.loc[i, \"sound\"] not in vowels:\n","    data_2.loc[i, \"stress_position\"] = -1"],"metadata":{"id":"4DiD6AtVUKHv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"gw-AjEQLQ-hq","executionInfo":{"status":"ok","timestamp":1685090942998,"user_tz":-180,"elapsed":12,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"feff48cb-9d6f-4a44-edc7-66315330db45"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    sound     file  sound_length  stress_position   pitch_max   pitch_min  \\\n","0       j  cta0001      0.192562               -1  215.476881  146.901255   \n","1       u  cta0001      0.095601                0  323.395910  280.830226   \n","2      r'  cta0001      0.022676               -1    0.000000    0.000000   \n","3       i  cta0001      0.101406                4  321.766226  311.722120   \n","4       t  cta0001      0.152472               -1    0.000000    0.000000   \n","..    ...      ...           ...              ...         ...         ...   \n","908     s  cta0010      0.090522               -1    0.000000    0.000000   \n","909     t  cta0010      0.090658               -1    0.000000    0.000000   \n","910     y  cta0010      0.098549                0  205.087703  148.935975   \n","911    ch  cta0010      0.117007               -1    0.000000    0.000000   \n","912     e  cta0010      0.068118                4  127.909828  114.832078   \n","\n","     pitch_mean  pitch_start   pitch_end  pitch_max_semitones  \\\n","0    159.676564   152.055716  215.476881            13.290397   \n","1    303.458957   280.830226  323.395910            20.319617   \n","2      0.000000     0.000000    0.000000             0.000000   \n","3    316.036942   321.766226  311.722120            20.232155   \n","4      0.000000     0.000000    0.000000             0.000000   \n","..          ...          ...         ...                  ...   \n","908    0.000000     0.000000    0.000000             0.000000   \n","909    0.000000     0.000000    0.000000             0.000000   \n","910  177.087527   205.087703  148.935975            12.434892   \n","911    0.000000     0.000000    0.000000             0.000000   \n","912  123.114061   114.832078  124.833567             4.261525   \n","\n","     pitch_min_semitones  pitch_start_semitones  pitch_end_semitones  \\\n","0               6.658161               7.255201            13.290397   \n","1              17.876379              17.876379            20.319617   \n","2               0.000000               0.000000             0.000000   \n","3              19.683126              20.232155            19.683126   \n","4               0.000000               0.000000             0.000000   \n","..                   ...                    ...                  ...   \n","908             0.000000               0.000000             0.000000   \n","909             0.000000               0.000000             0.000000   \n","910             6.896307              12.434892             6.896307   \n","911             0.000000               0.000000             0.000000   \n","912             2.394309               2.394309             3.840071   \n","\n","     pitch_mean_semitones  \n","0                8.101831  \n","1               19.218017  \n","2                0.000000  \n","3               19.921118  \n","4                0.000000  \n","..                    ...  \n","908              0.000000  \n","909              0.000000  \n","910              9.893551  \n","911              0.000000  \n","912              3.599946  \n","\n","[913 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-386924ea-cae9-4d38-9eb7-4d8b4376f24a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sound</th>\n","      <th>file</th>\n","      <th>sound_length</th>\n","      <th>stress_position</th>\n","      <th>pitch_max</th>\n","      <th>pitch_min</th>\n","      <th>pitch_mean</th>\n","      <th>pitch_start</th>\n","      <th>pitch_end</th>\n","      <th>pitch_max_semitones</th>\n","      <th>pitch_min_semitones</th>\n","      <th>pitch_start_semitones</th>\n","      <th>pitch_end_semitones</th>\n","      <th>pitch_mean_semitones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>j</td>\n","      <td>cta0001</td>\n","      <td>0.192562</td>\n","      <td>-1</td>\n","      <td>215.476881</td>\n","      <td>146.901255</td>\n","      <td>159.676564</td>\n","      <td>152.055716</td>\n","      <td>215.476881</td>\n","      <td>13.290397</td>\n","      <td>6.658161</td>\n","      <td>7.255201</td>\n","      <td>13.290397</td>\n","      <td>8.101831</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>u</td>\n","      <td>cta0001</td>\n","      <td>0.095601</td>\n","      <td>0</td>\n","      <td>323.395910</td>\n","      <td>280.830226</td>\n","      <td>303.458957</td>\n","      <td>280.830226</td>\n","      <td>323.395910</td>\n","      <td>20.319617</td>\n","      <td>17.876379</td>\n","      <td>17.876379</td>\n","      <td>20.319617</td>\n","      <td>19.218017</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>r'</td>\n","      <td>cta0001</td>\n","      <td>0.022676</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i</td>\n","      <td>cta0001</td>\n","      <td>0.101406</td>\n","      <td>4</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>316.036942</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>19.921118</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>t</td>\n","      <td>cta0001</td>\n","      <td>0.152472</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>908</th>\n","      <td>s</td>\n","      <td>cta0010</td>\n","      <td>0.090522</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>909</th>\n","      <td>t</td>\n","      <td>cta0010</td>\n","      <td>0.090658</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>910</th>\n","      <td>y</td>\n","      <td>cta0010</td>\n","      <td>0.098549</td>\n","      <td>0</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>177.087527</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>9.893551</td>\n","    </tr>\n","    <tr>\n","      <th>911</th>\n","      <td>ch</td>\n","      <td>cta0010</td>\n","      <td>0.117007</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>e</td>\n","      <td>cta0010</td>\n","      <td>0.068118</td>\n","      <td>4</td>\n","      <td>127.909828</td>\n","      <td>114.832078</td>\n","      <td>123.114061</td>\n","      <td>114.832078</td>\n","      <td>124.833567</td>\n","      <td>4.261525</td>\n","      <td>2.394309</td>\n","      <td>2.394309</td>\n","      <td>3.840071</td>\n","      <td>3.599946</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>913 rows × 14 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-386924ea-cae9-4d38-9eb7-4d8b4376f24a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-386924ea-cae9-4d38-9eb7-4d8b4376f24a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-386924ea-cae9-4d38-9eb7-4d8b4376f24a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["#Чистим оставшееся"],"metadata":{"id":"ZbJJKJMnWlRX"}},{"cell_type":"code","source":["data_last = data_2"],"metadata":{"id":"IqZFnMYsWp8c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_last"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"w9isltQ5X9lC","executionInfo":{"status":"ok","timestamp":1685090950831,"user_tz":-180,"elapsed":14,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"4c88e076-baab-4ea8-bdd8-f4acb7764651"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    sound     file  sound_length  stress_position   pitch_max   pitch_min  \\\n","0       j  cta0001      0.192562               -1  215.476881  146.901255   \n","1       u  cta0001      0.095601                0  323.395910  280.830226   \n","2      r'  cta0001      0.022676               -1    0.000000    0.000000   \n","3       i  cta0001      0.101406                4  321.766226  311.722120   \n","4       t  cta0001      0.152472               -1    0.000000    0.000000   \n","..    ...      ...           ...              ...         ...         ...   \n","908     s  cta0010      0.090522               -1    0.000000    0.000000   \n","909     t  cta0010      0.090658               -1    0.000000    0.000000   \n","910     y  cta0010      0.098549                0  205.087703  148.935975   \n","911    ch  cta0010      0.117007               -1    0.000000    0.000000   \n","912     e  cta0010      0.068118                4  127.909828  114.832078   \n","\n","     pitch_mean  pitch_start   pitch_end  pitch_max_semitones  \\\n","0    159.676564   152.055716  215.476881            13.290397   \n","1    303.458957   280.830226  323.395910            20.319617   \n","2      0.000000     0.000000    0.000000             0.000000   \n","3    316.036942   321.766226  311.722120            20.232155   \n","4      0.000000     0.000000    0.000000             0.000000   \n","..          ...          ...         ...                  ...   \n","908    0.000000     0.000000    0.000000             0.000000   \n","909    0.000000     0.000000    0.000000             0.000000   \n","910  177.087527   205.087703  148.935975            12.434892   \n","911    0.000000     0.000000    0.000000             0.000000   \n","912  123.114061   114.832078  124.833567             4.261525   \n","\n","     pitch_min_semitones  pitch_start_semitones  pitch_end_semitones  \\\n","0               6.658161               7.255201            13.290397   \n","1              17.876379              17.876379            20.319617   \n","2               0.000000               0.000000             0.000000   \n","3              19.683126              20.232155            19.683126   \n","4               0.000000               0.000000             0.000000   \n","..                   ...                    ...                  ...   \n","908             0.000000               0.000000             0.000000   \n","909             0.000000               0.000000             0.000000   \n","910             6.896307              12.434892             6.896307   \n","911             0.000000               0.000000             0.000000   \n","912             2.394309               2.394309             3.840071   \n","\n","     pitch_mean_semitones  \n","0                8.101831  \n","1               19.218017  \n","2                0.000000  \n","3               19.921118  \n","4                0.000000  \n","..                    ...  \n","908              0.000000  \n","909              0.000000  \n","910              9.893551  \n","911              0.000000  \n","912              3.599946  \n","\n","[913 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-9199bf95-74d5-4da5-98b1-99043777218f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sound</th>\n","      <th>file</th>\n","      <th>sound_length</th>\n","      <th>stress_position</th>\n","      <th>pitch_max</th>\n","      <th>pitch_min</th>\n","      <th>pitch_mean</th>\n","      <th>pitch_start</th>\n","      <th>pitch_end</th>\n","      <th>pitch_max_semitones</th>\n","      <th>pitch_min_semitones</th>\n","      <th>pitch_start_semitones</th>\n","      <th>pitch_end_semitones</th>\n","      <th>pitch_mean_semitones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>j</td>\n","      <td>cta0001</td>\n","      <td>0.192562</td>\n","      <td>-1</td>\n","      <td>215.476881</td>\n","      <td>146.901255</td>\n","      <td>159.676564</td>\n","      <td>152.055716</td>\n","      <td>215.476881</td>\n","      <td>13.290397</td>\n","      <td>6.658161</td>\n","      <td>7.255201</td>\n","      <td>13.290397</td>\n","      <td>8.101831</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>u</td>\n","      <td>cta0001</td>\n","      <td>0.095601</td>\n","      <td>0</td>\n","      <td>323.395910</td>\n","      <td>280.830226</td>\n","      <td>303.458957</td>\n","      <td>280.830226</td>\n","      <td>323.395910</td>\n","      <td>20.319617</td>\n","      <td>17.876379</td>\n","      <td>17.876379</td>\n","      <td>20.319617</td>\n","      <td>19.218017</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>r'</td>\n","      <td>cta0001</td>\n","      <td>0.022676</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i</td>\n","      <td>cta0001</td>\n","      <td>0.101406</td>\n","      <td>4</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>316.036942</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>19.921118</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>t</td>\n","      <td>cta0001</td>\n","      <td>0.152472</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>908</th>\n","      <td>s</td>\n","      <td>cta0010</td>\n","      <td>0.090522</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>909</th>\n","      <td>t</td>\n","      <td>cta0010</td>\n","      <td>0.090658</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>910</th>\n","      <td>y</td>\n","      <td>cta0010</td>\n","      <td>0.098549</td>\n","      <td>0</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>177.087527</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>9.893551</td>\n","    </tr>\n","    <tr>\n","      <th>911</th>\n","      <td>ch</td>\n","      <td>cta0010</td>\n","      <td>0.117007</td>\n","      <td>-1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>e</td>\n","      <td>cta0010</td>\n","      <td>0.068118</td>\n","      <td>4</td>\n","      <td>127.909828</td>\n","      <td>114.832078</td>\n","      <td>123.114061</td>\n","      <td>114.832078</td>\n","      <td>124.833567</td>\n","      <td>4.261525</td>\n","      <td>2.394309</td>\n","      <td>2.394309</td>\n","      <td>3.840071</td>\n","      <td>3.599946</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>913 rows × 14 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9199bf95-74d5-4da5-98b1-99043777218f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9199bf95-74d5-4da5-98b1-99043777218f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9199bf95-74d5-4da5-98b1-99043777218f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["data_last = data_last[data_last.stress_position != -1]"],"metadata":{"id":"Mpqtr4s4Wtas"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_last"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"bhGFvonsYEcx","executionInfo":{"status":"ok","timestamp":1685090959600,"user_tz":-180,"elapsed":16,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"11d28333-283f-45ea-909f-afa6fe28f144"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    sound     file  sound_length  stress_position   pitch_max   pitch_min  \\\n","1       u  cta0001      0.095601                0  323.395910  280.830226   \n","3       i  cta0001      0.101406                4  321.766226  311.722120   \n","6       i  cta0001      0.127075                0  192.406176  164.478043   \n","8       a  cta0001      0.040771                4  150.866863  149.567408   \n","10      a  cta0001      0.065533                4  142.163270  138.062449   \n","..    ...      ...           ...              ...         ...         ...   \n","901     i  cta0010      0.061950                1  175.175049  152.135202   \n","903     e  cta0010      0.062948                0  143.911459  142.092542   \n","906     y  cta0010      0.042676                4  168.286060  167.450584   \n","910     y  cta0010      0.098549                0  205.087703  148.935975   \n","912     e  cta0010      0.068118                4  127.909828  114.832078   \n","\n","     pitch_mean  pitch_start   pitch_end  pitch_max_semitones  \\\n","1    303.458957   280.830226  323.395910            20.319617   \n","3    316.036942   321.766226  311.722120            20.232155   \n","6    177.488891   192.406176  164.478043            11.329861   \n","8    150.217136   150.866863  149.567408             7.119312   \n","10   140.252157   142.163270  138.062449             6.090585   \n","..          ...          ...         ...                  ...   \n","901  163.975610   175.175049  152.135202             9.705568   \n","903  143.029588   142.092542  143.911459             6.302178   \n","906  167.868322   167.450584  168.286060             9.010988   \n","910  177.087527   205.087703  148.935975            12.434892   \n","912  123.114061   114.832078  124.833567             4.261525   \n","\n","     pitch_min_semitones  pitch_start_semitones  pitch_end_semitones  \\\n","1              17.876379              17.876379            20.319617   \n","3              19.683126              20.232155            19.683126   \n","6               8.614740              11.329861             8.614740   \n","8               6.969550               7.119312             6.969550   \n","10              5.583852               6.090585             5.583852   \n","..                   ...                    ...                  ...   \n","901             7.264248               9.705568             7.264248   \n","903             6.081970               6.081970             6.302178   \n","906             8.924825               8.924825             9.010988   \n","910             6.896307              12.434892             6.896307   \n","912             2.394309               2.394309             3.840071   \n","\n","     pitch_mean_semitones  \n","1               19.218017  \n","3               19.921118  \n","6                9.932745  \n","8                7.044593  \n","10               5.856275  \n","..                    ...  \n","901              8.561775  \n","903              6.195763  \n","906              8.967960  \n","910              9.893551  \n","912              3.599946  \n","\n","[403 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-aa8e919d-b662-4d08-8b61-2645c48e4e28\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sound</th>\n","      <th>file</th>\n","      <th>sound_length</th>\n","      <th>stress_position</th>\n","      <th>pitch_max</th>\n","      <th>pitch_min</th>\n","      <th>pitch_mean</th>\n","      <th>pitch_start</th>\n","      <th>pitch_end</th>\n","      <th>pitch_max_semitones</th>\n","      <th>pitch_min_semitones</th>\n","      <th>pitch_start_semitones</th>\n","      <th>pitch_end_semitones</th>\n","      <th>pitch_mean_semitones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>u</td>\n","      <td>cta0001</td>\n","      <td>0.095601</td>\n","      <td>0</td>\n","      <td>323.395910</td>\n","      <td>280.830226</td>\n","      <td>303.458957</td>\n","      <td>280.830226</td>\n","      <td>323.395910</td>\n","      <td>20.319617</td>\n","      <td>17.876379</td>\n","      <td>17.876379</td>\n","      <td>20.319617</td>\n","      <td>19.218017</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i</td>\n","      <td>cta0001</td>\n","      <td>0.101406</td>\n","      <td>4</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>316.036942</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>19.921118</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>i</td>\n","      <td>cta0001</td>\n","      <td>0.127075</td>\n","      <td>0</td>\n","      <td>192.406176</td>\n","      <td>164.478043</td>\n","      <td>177.488891</td>\n","      <td>192.406176</td>\n","      <td>164.478043</td>\n","      <td>11.329861</td>\n","      <td>8.614740</td>\n","      <td>11.329861</td>\n","      <td>8.614740</td>\n","      <td>9.932745</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>a</td>\n","      <td>cta0001</td>\n","      <td>0.040771</td>\n","      <td>4</td>\n","      <td>150.866863</td>\n","      <td>149.567408</td>\n","      <td>150.217136</td>\n","      <td>150.866863</td>\n","      <td>149.567408</td>\n","      <td>7.119312</td>\n","      <td>6.969550</td>\n","      <td>7.119312</td>\n","      <td>6.969550</td>\n","      <td>7.044593</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>a</td>\n","      <td>cta0001</td>\n","      <td>0.065533</td>\n","      <td>4</td>\n","      <td>142.163270</td>\n","      <td>138.062449</td>\n","      <td>140.252157</td>\n","      <td>142.163270</td>\n","      <td>138.062449</td>\n","      <td>6.090585</td>\n","      <td>5.583852</td>\n","      <td>6.090585</td>\n","      <td>5.583852</td>\n","      <td>5.856275</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>901</th>\n","      <td>i</td>\n","      <td>cta0010</td>\n","      <td>0.061950</td>\n","      <td>1</td>\n","      <td>175.175049</td>\n","      <td>152.135202</td>\n","      <td>163.975610</td>\n","      <td>175.175049</td>\n","      <td>152.135202</td>\n","      <td>9.705568</td>\n","      <td>7.264248</td>\n","      <td>9.705568</td>\n","      <td>7.264248</td>\n","      <td>8.561775</td>\n","    </tr>\n","    <tr>\n","      <th>903</th>\n","      <td>e</td>\n","      <td>cta0010</td>\n","      <td>0.062948</td>\n","      <td>0</td>\n","      <td>143.911459</td>\n","      <td>142.092542</td>\n","      <td>143.029588</td>\n","      <td>142.092542</td>\n","      <td>143.911459</td>\n","      <td>6.302178</td>\n","      <td>6.081970</td>\n","      <td>6.081970</td>\n","      <td>6.302178</td>\n","      <td>6.195763</td>\n","    </tr>\n","    <tr>\n","      <th>906</th>\n","      <td>y</td>\n","      <td>cta0010</td>\n","      <td>0.042676</td>\n","      <td>4</td>\n","      <td>168.286060</td>\n","      <td>167.450584</td>\n","      <td>167.868322</td>\n","      <td>167.450584</td>\n","      <td>168.286060</td>\n","      <td>9.010988</td>\n","      <td>8.924825</td>\n","      <td>8.924825</td>\n","      <td>9.010988</td>\n","      <td>8.967960</td>\n","    </tr>\n","    <tr>\n","      <th>910</th>\n","      <td>y</td>\n","      <td>cta0010</td>\n","      <td>0.098549</td>\n","      <td>0</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>177.087527</td>\n","      <td>205.087703</td>\n","      <td>148.935975</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>12.434892</td>\n","      <td>6.896307</td>\n","      <td>9.893551</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>e</td>\n","      <td>cta0010</td>\n","      <td>0.068118</td>\n","      <td>4</td>\n","      <td>127.909828</td>\n","      <td>114.832078</td>\n","      <td>123.114061</td>\n","      <td>114.832078</td>\n","      <td>124.833567</td>\n","      <td>4.261525</td>\n","      <td>2.394309</td>\n","      <td>2.394309</td>\n","      <td>3.840071</td>\n","      <td>3.599946</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>403 rows × 14 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa8e919d-b662-4d08-8b61-2645c48e4e28')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-aa8e919d-b662-4d08-8b61-2645c48e4e28 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-aa8e919d-b662-4d08-8b61-2645c48e4e28');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["data_last.loc[data_last['stress_position']!=0, 'stress_position'] = 1"],"metadata":{"id":"niZD3zejXKDP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_last[:20]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":741},"id":"D26CoGbEX4LA","executionInfo":{"status":"ok","timestamp":1685090965333,"user_tz":-180,"elapsed":19,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"297e5ef6-84e0-4abd-b8e0-1331498a2ce0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sound     file  sound_length  stress_position   pitch_max   pitch_min  \\\n","1      u  cta0001      0.095601                0  323.395910  280.830226   \n","3      i  cta0001      0.101406                1  321.766226  311.722120   \n","6      i  cta0001      0.127075                0  192.406176  164.478043   \n","8      a  cta0001      0.040771                1  150.866863  149.567408   \n","10     a  cta0001      0.065533                1  142.163270  138.062449   \n","11     a  cta0002      0.143265                1  263.540943  224.721200   \n","14     e  cta0002      0.170884                0  139.663934  119.484516   \n","16     y  cta0003      0.081950                1  208.777977  179.331722   \n","18     u  cta0003      0.097415                0  334.927396  294.555051   \n","20     i  cta0003      0.069569                1  323.443689  315.666545   \n","22     a  cta0003      0.117324                0  208.987455  204.562410   \n","26     i  cta0003      0.076009                0  216.181553  209.992764   \n","29     i  cta0003      0.058231                1  173.782858  171.301864   \n","30     i  cta0003      0.062404                1  161.811352  160.778022   \n","32     a  cta0003      0.050204                1  161.829122  160.250132   \n","35     e  cta0003      0.098186                0  184.399024  165.449696   \n","37     i  cta0003      0.055646                1  145.840371  142.823664   \n","38     e  cta0003      0.068163                1  135.994577  130.544129   \n","40     o  cta0003      0.088662                0  261.000403  231.846767   \n","42     y  cta0003      0.031791                1    0.000000    0.000000   \n","\n","    pitch_mean  pitch_start   pitch_end  pitch_max_semitones  \\\n","1   303.458957   280.830226  323.395910            20.319617   \n","3   316.036942   321.766226  311.722120            20.232155   \n","6   177.488891   192.406176  164.478043            11.329861   \n","8   150.217136   150.866863  149.567408             7.119312   \n","10  140.252157   142.163270  138.062449             6.090585   \n","11  245.866989   224.721200  263.540943            16.776325   \n","14  129.129630   139.663934  119.484516             5.783514   \n","16  196.997368   179.331722  207.733660            12.743634   \n","18  318.532709   294.555051  334.927396            20.926181   \n","20  319.763861   323.443689  315.666545            20.322175   \n","22  207.743929   208.170303  204.562410            12.760996   \n","26  214.418347   215.440496  209.992764            13.346921   \n","29  172.542600   173.782858  171.301864             9.567429   \n","30  161.410116   160.778022  161.196187             8.331754   \n","32  161.152998   161.829122  160.250132             8.333655   \n","35  175.440114   184.382042  165.449696            10.593972   \n","37  144.369631   145.840371  142.823664             6.532682   \n","38  133.161748   135.994577  130.544129             5.322589   \n","40  248.261405   231.846767  261.000403            16.608624   \n","42    0.000000     0.000000    0.000000             0.000000   \n","\n","    pitch_min_semitones  pitch_start_semitones  pitch_end_semitones  \\\n","1             17.876379              17.876379            20.319617   \n","3             19.683126              20.232155            19.683126   \n","6              8.614740              11.329861             8.614740   \n","8              6.969550               7.119312             6.969550   \n","10             5.583852               6.090585             5.583852   \n","11            14.017635              14.017635            16.776325   \n","14             3.081884               5.783514             3.081884   \n","16            10.111568              10.111568            12.656820   \n","18            18.702447              18.702447            20.926181   \n","20            19.900816              20.322175            19.900816   \n","22            12.390493              12.693171            12.390493   \n","26            12.844075              13.287474            12.844075   \n","29             9.318490               9.567429             9.318490   \n","30             8.220842               8.220842             8.265811   \n","32             8.163907               8.333655             8.163907   \n","35             8.716712              10.592378             8.716712   \n","37             6.170820               6.532682             6.170820   \n","38             4.614451               5.322589             4.614451   \n","40            14.558059              14.558059            16.608624   \n","42             0.000000               0.000000             0.000000   \n","\n","    pitch_mean_semitones  \n","1              19.218017  \n","3              19.921118  \n","6               9.932745  \n","8               7.044593  \n","10              5.856275  \n","11             15.574537  \n","14              4.425841  \n","16             11.738116  \n","18             20.057298  \n","20             20.124083  \n","22             12.657676  \n","26             13.205140  \n","29              9.443431  \n","30              8.288772  \n","32              8.261172  \n","35              9.731744  \n","37              6.357208  \n","38              4.958157  \n","40             15.742320  \n","42              0.000000  "],"text/html":["\n","  <div id=\"df-9bda9644-258c-4515-aa8d-83c5dbf9e36b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sound</th>\n","      <th>file</th>\n","      <th>sound_length</th>\n","      <th>stress_position</th>\n","      <th>pitch_max</th>\n","      <th>pitch_min</th>\n","      <th>pitch_mean</th>\n","      <th>pitch_start</th>\n","      <th>pitch_end</th>\n","      <th>pitch_max_semitones</th>\n","      <th>pitch_min_semitones</th>\n","      <th>pitch_start_semitones</th>\n","      <th>pitch_end_semitones</th>\n","      <th>pitch_mean_semitones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>u</td>\n","      <td>cta0001</td>\n","      <td>0.095601</td>\n","      <td>0</td>\n","      <td>323.395910</td>\n","      <td>280.830226</td>\n","      <td>303.458957</td>\n","      <td>280.830226</td>\n","      <td>323.395910</td>\n","      <td>20.319617</td>\n","      <td>17.876379</td>\n","      <td>17.876379</td>\n","      <td>20.319617</td>\n","      <td>19.218017</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>i</td>\n","      <td>cta0001</td>\n","      <td>0.101406</td>\n","      <td>1</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>316.036942</td>\n","      <td>321.766226</td>\n","      <td>311.722120</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>20.232155</td>\n","      <td>19.683126</td>\n","      <td>19.921118</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>i</td>\n","      <td>cta0001</td>\n","      <td>0.127075</td>\n","      <td>0</td>\n","      <td>192.406176</td>\n","      <td>164.478043</td>\n","      <td>177.488891</td>\n","      <td>192.406176</td>\n","      <td>164.478043</td>\n","      <td>11.329861</td>\n","      <td>8.614740</td>\n","      <td>11.329861</td>\n","      <td>8.614740</td>\n","      <td>9.932745</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>a</td>\n","      <td>cta0001</td>\n","      <td>0.040771</td>\n","      <td>1</td>\n","      <td>150.866863</td>\n","      <td>149.567408</td>\n","      <td>150.217136</td>\n","      <td>150.866863</td>\n","      <td>149.567408</td>\n","      <td>7.119312</td>\n","      <td>6.969550</td>\n","      <td>7.119312</td>\n","      <td>6.969550</td>\n","      <td>7.044593</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>a</td>\n","      <td>cta0001</td>\n","      <td>0.065533</td>\n","      <td>1</td>\n","      <td>142.163270</td>\n","      <td>138.062449</td>\n","      <td>140.252157</td>\n","      <td>142.163270</td>\n","      <td>138.062449</td>\n","      <td>6.090585</td>\n","      <td>5.583852</td>\n","      <td>6.090585</td>\n","      <td>5.583852</td>\n","      <td>5.856275</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>a</td>\n","      <td>cta0002</td>\n","      <td>0.143265</td>\n","      <td>1</td>\n","      <td>263.540943</td>\n","      <td>224.721200</td>\n","      <td>245.866989</td>\n","      <td>224.721200</td>\n","      <td>263.540943</td>\n","      <td>16.776325</td>\n","      <td>14.017635</td>\n","      <td>14.017635</td>\n","      <td>16.776325</td>\n","      <td>15.574537</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>e</td>\n","      <td>cta0002</td>\n","      <td>0.170884</td>\n","      <td>0</td>\n","      <td>139.663934</td>\n","      <td>119.484516</td>\n","      <td>129.129630</td>\n","      <td>139.663934</td>\n","      <td>119.484516</td>\n","      <td>5.783514</td>\n","      <td>3.081884</td>\n","      <td>5.783514</td>\n","      <td>3.081884</td>\n","      <td>4.425841</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>y</td>\n","      <td>cta0003</td>\n","      <td>0.081950</td>\n","      <td>1</td>\n","      <td>208.777977</td>\n","      <td>179.331722</td>\n","      <td>196.997368</td>\n","      <td>179.331722</td>\n","      <td>207.733660</td>\n","      <td>12.743634</td>\n","      <td>10.111568</td>\n","      <td>10.111568</td>\n","      <td>12.656820</td>\n","      <td>11.738116</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>u</td>\n","      <td>cta0003</td>\n","      <td>0.097415</td>\n","      <td>0</td>\n","      <td>334.927396</td>\n","      <td>294.555051</td>\n","      <td>318.532709</td>\n","      <td>294.555051</td>\n","      <td>334.927396</td>\n","      <td>20.926181</td>\n","      <td>18.702447</td>\n","      <td>18.702447</td>\n","      <td>20.926181</td>\n","      <td>20.057298</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>i</td>\n","      <td>cta0003</td>\n","      <td>0.069569</td>\n","      <td>1</td>\n","      <td>323.443689</td>\n","      <td>315.666545</td>\n","      <td>319.763861</td>\n","      <td>323.443689</td>\n","      <td>315.666545</td>\n","      <td>20.322175</td>\n","      <td>19.900816</td>\n","      <td>20.322175</td>\n","      <td>19.900816</td>\n","      <td>20.124083</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>a</td>\n","      <td>cta0003</td>\n","      <td>0.117324</td>\n","      <td>0</td>\n","      <td>208.987455</td>\n","      <td>204.562410</td>\n","      <td>207.743929</td>\n","      <td>208.170303</td>\n","      <td>204.562410</td>\n","      <td>12.760996</td>\n","      <td>12.390493</td>\n","      <td>12.693171</td>\n","      <td>12.390493</td>\n","      <td>12.657676</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>i</td>\n","      <td>cta0003</td>\n","      <td>0.076009</td>\n","      <td>0</td>\n","      <td>216.181553</td>\n","      <td>209.992764</td>\n","      <td>214.418347</td>\n","      <td>215.440496</td>\n","      <td>209.992764</td>\n","      <td>13.346921</td>\n","      <td>12.844075</td>\n","      <td>13.287474</td>\n","      <td>12.844075</td>\n","      <td>13.205140</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>i</td>\n","      <td>cta0003</td>\n","      <td>0.058231</td>\n","      <td>1</td>\n","      <td>173.782858</td>\n","      <td>171.301864</td>\n","      <td>172.542600</td>\n","      <td>173.782858</td>\n","      <td>171.301864</td>\n","      <td>9.567429</td>\n","      <td>9.318490</td>\n","      <td>9.567429</td>\n","      <td>9.318490</td>\n","      <td>9.443431</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>i</td>\n","      <td>cta0003</td>\n","      <td>0.062404</td>\n","      <td>1</td>\n","      <td>161.811352</td>\n","      <td>160.778022</td>\n","      <td>161.410116</td>\n","      <td>160.778022</td>\n","      <td>161.196187</td>\n","      <td>8.331754</td>\n","      <td>8.220842</td>\n","      <td>8.220842</td>\n","      <td>8.265811</td>\n","      <td>8.288772</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>a</td>\n","      <td>cta0003</td>\n","      <td>0.050204</td>\n","      <td>1</td>\n","      <td>161.829122</td>\n","      <td>160.250132</td>\n","      <td>161.152998</td>\n","      <td>161.829122</td>\n","      <td>160.250132</td>\n","      <td>8.333655</td>\n","      <td>8.163907</td>\n","      <td>8.333655</td>\n","      <td>8.163907</td>\n","      <td>8.261172</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>e</td>\n","      <td>cta0003</td>\n","      <td>0.098186</td>\n","      <td>0</td>\n","      <td>184.399024</td>\n","      <td>165.449696</td>\n","      <td>175.440114</td>\n","      <td>184.382042</td>\n","      <td>165.449696</td>\n","      <td>10.593972</td>\n","      <td>8.716712</td>\n","      <td>10.592378</td>\n","      <td>8.716712</td>\n","      <td>9.731744</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>i</td>\n","      <td>cta0003</td>\n","      <td>0.055646</td>\n","      <td>1</td>\n","      <td>145.840371</td>\n","      <td>142.823664</td>\n","      <td>144.369631</td>\n","      <td>145.840371</td>\n","      <td>142.823664</td>\n","      <td>6.532682</td>\n","      <td>6.170820</td>\n","      <td>6.532682</td>\n","      <td>6.170820</td>\n","      <td>6.357208</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>e</td>\n","      <td>cta0003</td>\n","      <td>0.068163</td>\n","      <td>1</td>\n","      <td>135.994577</td>\n","      <td>130.544129</td>\n","      <td>133.161748</td>\n","      <td>135.994577</td>\n","      <td>130.544129</td>\n","      <td>5.322589</td>\n","      <td>4.614451</td>\n","      <td>5.322589</td>\n","      <td>4.614451</td>\n","      <td>4.958157</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>o</td>\n","      <td>cta0003</td>\n","      <td>0.088662</td>\n","      <td>0</td>\n","      <td>261.000403</td>\n","      <td>231.846767</td>\n","      <td>248.261405</td>\n","      <td>231.846767</td>\n","      <td>261.000403</td>\n","      <td>16.608624</td>\n","      <td>14.558059</td>\n","      <td>14.558059</td>\n","      <td>16.608624</td>\n","      <td>15.742320</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>y</td>\n","      <td>cta0003</td>\n","      <td>0.031791</td>\n","      <td>1</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bda9644-258c-4515-aa8d-83c5dbf9e36b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9bda9644-258c-4515-aa8d-83c5dbf9e36b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9bda9644-258c-4515-aa8d-83c5dbf9e36b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["data_last['pitch_max_min_semitones'] = data_last['pitch_max_semitones'] - data_last['pitch_min_semitones']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5kbXtpBiYfJz","executionInfo":{"status":"ok","timestamp":1685090969657,"user_tz":-180,"elapsed":12,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"54871166-b438-4f02-f395-a903f3cfc8f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-42-2626f8452a8a>:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_last['pitch_max_min_semitones'] = data_last['pitch_max_semitones'] - data_last['pitch_min_semitones']\n"]}]},{"cell_type":"code","source":["df_to_train = data_last[['stress_position', 'sound_length', 'pitch_max_min_semitones']]"],"metadata":{"id":"iBgRZeVoZYWR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_to_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"qsABzYQdZyMR","executionInfo":{"status":"ok","timestamp":1685090975601,"user_tz":-180,"elapsed":260,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"fc756293-271a-4019-f6c6-8e054bd4128d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     stress_position  sound_length  pitch_max_min_semitones\n","1                  0      0.095601                 2.443239\n","3                  1      0.101406                 0.549028\n","6                  0      0.127075                 2.715121\n","8                  1      0.040771                 0.149762\n","10                 1      0.065533                 0.506734\n","..               ...           ...                      ...\n","901                1      0.061950                 2.441319\n","903                0      0.062948                 0.220208\n","906                1      0.042676                 0.086163\n","910                0      0.098549                 5.538585\n","912                1      0.068118                 1.867217\n","\n","[403 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-49b4da9b-1664-47e7-a5bc-78dc4671a38f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>stress_position</th>\n","      <th>sound_length</th>\n","      <th>pitch_max_min_semitones</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0.095601</td>\n","      <td>2.443239</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0.101406</td>\n","      <td>0.549028</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0.127075</td>\n","      <td>2.715121</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>0.040771</td>\n","      <td>0.149762</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1</td>\n","      <td>0.065533</td>\n","      <td>0.506734</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>901</th>\n","      <td>1</td>\n","      <td>0.061950</td>\n","      <td>2.441319</td>\n","    </tr>\n","    <tr>\n","      <th>903</th>\n","      <td>0</td>\n","      <td>0.062948</td>\n","      <td>0.220208</td>\n","    </tr>\n","    <tr>\n","      <th>906</th>\n","      <td>1</td>\n","      <td>0.042676</td>\n","      <td>0.086163</td>\n","    </tr>\n","    <tr>\n","      <th>910</th>\n","      <td>0</td>\n","      <td>0.098549</td>\n","      <td>5.538585</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>1</td>\n","      <td>0.068118</td>\n","      <td>1.867217</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>403 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49b4da9b-1664-47e7-a5bc-78dc4671a38f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-49b4da9b-1664-47e7-a5bc-78dc4671a38f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-49b4da9b-1664-47e7-a5bc-78dc4671a38f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["df_train, df_test = train_test_split(df_to_train, test_size=0.2, random_state=1)"],"metadata":{"id":"L7amAqHLaDsH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Обучение лог регрессии"],"metadata":{"id":"tOBhqrIhaJ2n"}},{"cell_type":"code","source":["X_train = df_train[['sound_length', 'pitch_max_min_semitones']]\n","y_train = df_train[['stress_position']]\n","X_test = df_test[['sound_length', 'pitch_max_min_semitones']]\n","y_test = df_test[['stress_position']]"],"metadata":{"id":"9Ea3kzmGbDRN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_test.mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bTsLen7XdszW","executionInfo":{"status":"ok","timestamp":1684943645659,"user_tz":-180,"elapsed":6,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"a59c09ee-f11c-4b48-c4ac-62959de8cf3e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["stress_position    0.703704\n","dtype: float64"]},"metadata":{},"execution_count":138}]},{"cell_type":"code","source":["train_dict = X_train.to_dict(orient='records')\n","\n","dv = DictVectorizer(sparse=False)\n","dv.fit(train_dict)\n","\n","X_train = dv.transform(train_dict)"],"metadata":{"id":"eCxT1YBqaJH4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = LogisticRegression(solver='liblinear', random_state=1)\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":129},"id":"xeWjMZ90ah-2","executionInfo":{"status":"ok","timestamp":1684943004160,"user_tz":-180,"elapsed":20,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"41beef7d-3a79-4b3f-fbc6-03ee7c700648"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=1, solver='liblinear')"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=1, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=1, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":129}]},{"cell_type":"code","source":["val_dict = X_test.to_dict(orient='records')\n","X_val = dv.transform(val_dict)\n","y_pred = model.predict_proba(X_val)[:, 1]"],"metadata":{"id":"q3pzx2nNasXg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score"],"metadata":{"id":"StLD4pHbcyuw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["accuracy_score(y_test, y_pred >= 0.5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"50NP_gdQc1OX","executionInfo":{"status":"ok","timestamp":1684943371387,"user_tz":-180,"elapsed":10,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"ec8d260b-eb26-4819-bef5-83be559f5c18"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7654320987654321"]},"metadata":{},"execution_count":136}]},{"cell_type":"markdown","source":["#Обучение дерева решений"],"metadata":{"id":"mrSYqykaOQR4"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import roc_auc_score"],"metadata":{"id":"L_bVyxbfOfLU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = df_train[['sound_length', 'pitch_max_min_semitones']]\n","y_train = df_train[['stress_position']]\n","X_test = df_test[['sound_length', 'pitch_max_min_semitones']]\n","y_test = df_test[['stress_position']]"],"metadata":{"id":"RAwmdZiHOW2H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_test.mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UJ3Vx8BvOakU","executionInfo":{"status":"ok","timestamp":1685091009151,"user_tz":-180,"elapsed":8,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"5582d37c-b2b8-4bad-cb34-344b04afa17e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["stress_position    0.703704\n","dtype: float64"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["train_dict = X_train.to_dict(orient='records')\n","\n","dv = DictVectorizer(sparse=False)\n","dv.fit(train_dict)\n","\n","X_train = dv.transform(train_dict)"],"metadata":{"id":"GnKpKOQOOcj4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dt = DecisionTreeClassifier()\n","dt.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"21lSyDBKOhH_","executionInfo":{"status":"ok","timestamp":1685091015235,"user_tz":-180,"elapsed":13,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"09b63f60-41f2-4b71-be4b-9d79cd5ffadc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["y_pred = dt.predict_proba(X_train)[:, 1]\n","roc_auc_score(y_train, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oGobmgKyOm9o","executionInfo":{"status":"ok","timestamp":1685091018146,"user_tz":-180,"elapsed":406,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"c789ce74-e198-4bf3-9590-ccfbcf000023"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["y_pred = dt.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uS-er7UWOobZ","executionInfo":{"status":"ok","timestamp":1685091045807,"user_tz":-180,"elapsed":425,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"a1fc8bdc-0e77-4d79-d729-e3f852c322a6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.5241228070175439"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["dt = DecisionTreeClassifier(max_depth=2)\n","dt.fit(X_train, y_train)\n","\n","y_pred = dt.predict_proba(X_train)[:, 1]\n","auc = roc_auc_score(y_train, y_pred)\n","print('train auc: %.3f' % auc)\n","\n","y_pred = dt.predict_proba(X_test)[:, 1]\n","auc = roc_auc_score(y_test, y_pred)\n","print('val auc: %.3f' % auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vz0gEqn7QXms","executionInfo":{"status":"ok","timestamp":1685091119940,"user_tz":-180,"elapsed":317,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"f4e172fd-58d4-4cfb-b9a9-2fa9543d0e16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["train auc: 0.842\n","val auc: 0.576\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["##Tuning parameters"],"metadata":{"id":"rzOkESPrROY4"}},{"cell_type":"code","source":["dt = DecisionTreeClassifier(max_depth=6)\n","dt.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"DU8yg6VPRKIS","executionInfo":{"status":"ok","timestamp":1685091394210,"user_tz":-180,"elapsed":415,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"c30b790a-6f80-4698-a954-cba95fb64e86"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(max_depth=6)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=6)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=6)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["y_pred = dt.predict_proba(X_test)[:, 1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GTlsvJIIRQRz","executionInfo":{"status":"ok","timestamp":1685091402784,"user_tz":-180,"elapsed":8,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"e66bb886-c37e-4c93-9be0-939098358e24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["roc_auc_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ry04vAl4RSEa","executionInfo":{"status":"ok","timestamp":1685091408705,"user_tz":-180,"elapsed":8,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"51c95d98-5908-430a-e99c-9168dc0d49d7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5241228070175439"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["for depth in [1, 2, 3, 4, 5, 6, 10, 15, 20, None]:\n","    dt = DecisionTreeClassifier(max_depth=depth)\n","    dt.fit(X_train, y_train)\n","    y_pred = dt.predict_proba(X_test)[:, 1]\n","    auc = roc_auc_score(y_test, y_pred)\n","    print('%4s -> %.3f' % (depth, auc))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aA0ppNfSRUFa","executionInfo":{"status":"ok","timestamp":1685091424890,"user_tz":-180,"elapsed":426,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"0f778fe5-7104-445c-8cfb-7925e3ea3113"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["   1 -> 0.500\n","   2 -> 0.576\n","   3 -> 0.576\n","   4 -> 0.516\n","   5 -> 0.516\n","   6 -> 0.524\n","  10 -> 0.524\n","  15 -> 0.524\n","  20 -> 0.524\n","None -> 0.524\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["for m in [1, 5, 10, 15, 20, 50, 100, 200]:\n","    dt = DecisionTreeClassifier(max_depth=4, min_samples_leaf=m)\n","    dt.fit(X_train, y_train)\n","    y_pred = dt.predict_proba(X_test)[:, 1]\n","    auc = roc_auc_score(y_test, y_pred)\n","    print('%s -> %.3f' % (m, auc))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BkGpspkFRW7i","executionInfo":{"status":"ok","timestamp":1685091491656,"user_tz":-180,"elapsed":420,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"2ccbdd96-3b1b-4307-94ab-0fa8316e3506"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 -> 0.516\n","5 -> 0.516\n","10 -> 0.579\n","15 -> 0.579\n","20 -> 0.562\n","50 -> 0.562\n","100 -> 0.576\n","200 -> 0.500\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["for m in [2, 3, 4, 5]:\n","    print('depth: %s' % m)\n","\n","    for s in [1, 5, 10, 15, 20, 50, 100, 200]:\n","        dt = DecisionTreeClassifier(max_depth=m, min_samples_leaf=s)\n","        dt.fit(X_train, y_train)\n","        y_pred = dt.predict_proba(X_test)[:, 1]\n","        auc = roc_auc_score(y_test, y_pred)\n","        print('%s -> %.3f' % (s, auc))\n","    \n","    print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WwPL0jAlReqP","executionInfo":{"status":"ok","timestamp":1685091554133,"user_tz":-180,"elapsed":1027,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"184e249d-665b-4b8d-8427-b176e1b233ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["depth: 2\n","1 -> 0.576\n","5 -> 0.576\n","10 -> 0.576\n","15 -> 0.576\n","20 -> 0.576\n","50 -> 0.576\n","100 -> 0.576\n","200 -> 0.500\n","\n","depth: 3\n","1 -> 0.576\n","5 -> 0.576\n","10 -> 0.576\n","15 -> 0.576\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["20 -> 0.559\n","50 -> 0.562\n","100 -> 0.576\n","200 -> 0.500\n","\n","depth: 4\n","1 -> 0.516\n","5 -> 0.516\n","10 -> 0.579\n","15 -> 0.579\n","20 -> 0.562\n","50 -> 0.562\n","100 -> 0.576\n","200 -> 0.500\n","\n","depth: 5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["1 -> 0.516\n","5 -> 0.515\n","10 -> 0.562\n","15 -> 0.579\n","20 -> 0.562\n","50 -> 0.562\n","100 -> 0.576\n","200 -> 0.500\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["for m in [1, 5, 10, 15, 20, 50, 100, 200]:\n","    dt = DecisionTreeClassifier(max_depth=6, min_samples_leaf=m)\n","    dt.fit(X_train, y_train)\n","    y_pred = dt.predict_proba(X_test)[:, 1]\n","    auc = roc_auc_score(y_test, y_pred)\n","    print('%s -> %.3f' % (m, auc))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nIVlo_oERf0T","executionInfo":{"status":"ok","timestamp":1685091584224,"user_tz":-180,"elapsed":10,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"efc92557-2d46-4f9b-ae28-e18669dedb73"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 -> 0.524\n","5 -> 0.495\n","10 -> 0.562\n","15 -> 0.576\n","20 -> 0.562\n","50 -> 0.562\n","100 -> 0.576\n","200 -> 0.500\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve"],"metadata":{"id":"n4gmXjk2SR7h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dt = DecisionTreeClassifier(max_depth=4, min_samples_leaf=10)\n","dt.fit(X_train, y_train)\n","\n","y_pred_dt = dt.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred_dt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m3bizWSJSU6S","executionInfo":{"status":"ok","timestamp":1685091696683,"user_tz":-180,"elapsed":7,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"c60a151c-3326-4c1b-d1fd-431d51aa361b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.5785818713450293"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["fpr, tpr, _ = roc_curve(y_test, y_pred_dt)\n","\n","plt.figure(figsize=(5, 5))\n","\n","plt.plot(fpr, tpr, color='black')\n","plt.plot([0, 1], [0, 1], color='black', lw=0.7, linestyle='dashed', alpha=0.5)\n","\n","plt.xlim([-0.02, 1.02])\n","plt.ylim([-0.02, 1.02])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","\n","plt.title('ROC curve')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"yzhDxQO5StW-","executionInfo":{"status":"ok","timestamp":1685091713671,"user_tz":-180,"elapsed":848,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"965e16d1-bd41-46f0-a2e8-793dc18ff086"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Random forest"],"metadata":{"id":"2lZwZgcMTAeV"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier"],"metadata":{"id":"gllizFrlS_xl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rf = RandomForestClassifier(n_estimators=100)\n","rf.fit(X_train, y_train)\n","y_pred = rf.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4v45tVuzTDbV","executionInfo":{"status":"ok","timestamp":1685091860519,"user_tz":-180,"elapsed":1573,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"8aa20bf9-70de-4e66-de2b-fa38a28f72c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-84-9d292a518efe>:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.4382309941520468"]},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["rf = RandomForestClassifier(n_estimators=100)\n","rf.fit(X_train, y_train)\n","y_pred = rf.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"axGdmq0xTFH2","executionInfo":{"status":"ok","timestamp":1685091924826,"user_tz":-180,"elapsed":1459,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"f9d69715-9f89-4f3d-e8aa-d932c31cdf86"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-87-9d292a518efe>:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.4707602339181286"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["aucs = []\n","\n","for i in range(100):\n","    rf = RandomForestClassifier(n_estimators=100)\n","    rf.fit(X_train, y_train)\n","    y_pred = rf.predict_proba(X_test)[:, 1]\n","    auc = roc_auc_score(y_test, y_pred)\n","    aucs.append(auc)\n","\n","auc_mean = np.mean(aucs)\n","auc_std = np.std(aucs)\n","\n","print('%.3f +- %.3f' % (auc_mean, auc_std))\n","print('%.3f -- %.3f' % (auc_mean -  auc_std, auc_mean + auc_std))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QdZ4Q73mTcEL","executionInfo":{"status":"ok","timestamp":1685091977670,"user_tz":-180,"elapsed":27657,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"5c6eb4b5-a272-4a4c-b9ce-5a98f3e36c16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-89-0e02a400e5d2>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["0.447 +- 0.057\n","0.390 -- 0.504\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["rf = RandomForestClassifier(n_estimators=100, random_state=3)\n","rf.fit(X_train, y_train)\n","y_pred = rf.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0P4Wr19KT0ch","executionInfo":{"status":"ok","timestamp":1685092012848,"user_tz":-180,"elapsed":2030,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"96c8474a-4bd0-449c-be32-78b37a849ca0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-91-a381c352d06c>:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.46491228070175444"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["aucs = []\n","\n","for i in range(10, 201, 10):\n","    rf = RandomForestClassifier(n_estimators=i, random_state=3)\n","    rf.fit(X_train, y_train)\n","    y_pred = rf.predict_proba(X_test)[:, 1]\n","    auc = roc_auc_score(y_test, y_pred)\n","    print('%s -> %.3f' % (i, auc))\n","    aucs.append(auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bfojCCawT7h2","executionInfo":{"status":"ok","timestamp":1685092058185,"user_tz":-180,"elapsed":10494,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"61f5b312-859c-43d7-8d1a-bcf08c56db1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["10 -> 0.428\n","20 -> 0.544\n","30 -> 0.576\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["40 -> 0.474\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["50 -> 0.488\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["60 -> 0.466\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["70 -> 0.466\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["80 -> 0.466\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["90 -> 0.460\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["100 -> 0.465\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["110 -> 0.467\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["120 -> 0.475\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["130 -> 0.467\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["140 -> 0.467\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["150 -> 0.469\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["160 -> 0.471\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["170 -> 0.464\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["180 -> 0.463\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-93-36bd016f2c40>:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["190 -> 0.463\n","200 -> 0.463\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(6, 4))\n","\n","plt.plot(range(10, 201, 10), aucs, color='black')\n","plt.xticks(range(0, 201, 50))\n","\n","plt.title('Number of trees vs AUC')\n","plt.xlabel('Number of trees')\n","plt.ylabel('AUC')\n","\n","# plt.savefig('ch06-figures/06_random_forest_n_estimators.svg')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"8Tinjq3bUXs5","executionInfo":{"status":"ok","timestamp":1685092155004,"user_tz":-180,"elapsed":631,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"4cf24faf-d132-43ea-ed0e-e730aee5551c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["all_aucs = {}\n","\n","for depth in [25, 30, 35]:\n","    print('depth: %s' % depth)\n","    aucs = []\n","\n","    for i in range(10, 201, 10):\n","        rf = RandomForestClassifier(n_estimators=i, max_depth=depth, random_state=1)\n","        rf.fit(X_train, y_train)\n","        y_pred = rf.predict_proba(X_test)[:, 1]\n","        auc = roc_auc_score(y_test, y_pred)\n","        print('%s -> %.3f' % (i, auc))\n","        aucs.append(auc)\n","    \n","    all_aucs[depth] = aucs\n","    print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FiL9-J0nUkvQ","executionInfo":{"status":"ok","timestamp":1685092241481,"user_tz":-180,"elapsed":20370,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"636b377d-3c8e-4dac-f61a-16a5399fb174"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["depth: 25\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["10 -> 0.520\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["20 -> 0.549\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["30 -> 0.526\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["40 -> 0.565\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["50 -> 0.594\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["60 -> 0.505\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["70 -> 0.534\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["80 -> 0.503\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["90 -> 0.503\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["100 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["110 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["120 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["130 -> 0.481\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["140 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["150 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["160 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["170 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["180 -> 0.474\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["190 -> 0.475\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["200 -> 0.476\n","\n","depth: 30\n","10 -> 0.520\n","20 -> 0.549\n","30 -> 0.526\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["40 -> 0.565\n","50 -> 0.594\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["60 -> 0.505\n","70 -> 0.534\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["80 -> 0.503\n","90 -> 0.503\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["100 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["110 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["120 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["130 -> 0.481\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["140 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["150 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["160 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["170 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["180 -> 0.474\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["190 -> 0.475\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["200 -> 0.476\n","\n","depth: 35\n","10 -> 0.520\n","20 -> 0.549\n","30 -> 0.526\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["40 -> 0.565\n","50 -> 0.594\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["60 -> 0.505\n","70 -> 0.534\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["80 -> 0.503\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["90 -> 0.503\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["100 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["110 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["120 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["130 -> 0.481\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["140 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["150 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["160 -> 0.480\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["170 -> 0.479\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["180 -> 0.474\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-96-9dd582aaaf4a>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["190 -> 0.475\n","200 -> 0.476\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(6, 4))\n","\n","num_trees = list(range(10, 201, 10))\n","\n","plt.plot(num_trees, all_aucs[25], label='depth=5', color='black', linestyle='dotted')\n","plt.plot(num_trees, all_aucs[30], label='depth=10', color='black', linestyle='dashed')\n","plt.plot(num_trees, all_aucs[30], label='depth=20', color='black', linestyle='solid')\n","    \n","plt.xticks(range(0, 201, 50))\n","plt.legend()\n","\n","plt.title('Number of trees vs AUC')\n","plt.xlabel('Number of trees')\n","plt.ylabel('AUC')\n","\n","# plt.savefig('ch06-figures/06_random_forest_n_estimators_depth.svg')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"8JwtbWT2Uk1x","executionInfo":{"status":"ok","timestamp":1685092395307,"user_tz":-180,"elapsed":1311,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"5fe79420-9423-4be2-d8fa-9ab021ca83cb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"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74WHh0ex3os6deowYcIEJkyYwNmzZwkMDGTOnDlqIlCYQYMG8cILL3D69GlWrVqFg4MDffr0ybdd06ZNadq0KW+99RZ79uyhffv2LFy4kPfff7/AdhVF4dtvv6Vr16688MIL+da/9957LF++XE1CjO//6dOnC0wqzpw5Y1L3o0+fPkRERLBs2TJJQkSpkNsxQtyjOnXqMHToUL744ot8l+ednZ2pVq1avlEsn332WanFs3TpUpPL56tXryYmJoaePXsCEBQURJ06dZg9ezapqan59r9x48ZdH7tXr14cOHCAvXv3qsvS0tL48ssv8fPzo1GjRiVu08HBAcifyBXliSeeQK/X89577+Vbl5ubq7YVGhqKs7MzH374ocmIGSPje5Genk5mZqbJujp16lClShWysrLuGE///v2xtLRkxYoVfP/99zzyyCM4Ojqq65OTk8nNzTXZp2nTplhYWBTZ/h9//MGlS5cYOXIkAwYMyPcYNGgQ27dvV0dwBQUF4eHhod52u93atWu5evWq+u8EoG3btvTo0YOvv/6atWvX5jt+dnY2EydOvOP5C1EYuRIihBm8+eabfPPNN5w+fZrGjRubrHvmmWeYPn06zzzzDC1btmTXrl2lWuq6atWqdOjQgZEjR3L9+nXmzZtH3bp11aG1FhYWfP311/Ts2ZPGjRszcuRIatasydWrV9m+fTvOzs78/PPPd3Xs119/nRUrVtCzZ09eeuklqlatypIlS7h48SI//PBDvtsmxWFvb0+jRo1YtWoV9erVo2rVqjRp0qTISp2dO3fmueeeIyIigmPHjtG9e3esra05e/Ys33//PR9//DEDBgzA2dmZzz//nGHDhvHggw/y5JNPUr16daKjo1m/fj3t27fn008/5cyZMzz88MM88cQTNGrUCCsrK9asWcP169d58skn73gOHh4edO3alblz55KSksKgQYNM1m/bto1x48YxcOBA6tWrR25uLt988w2WlpYF1ucwWr58OZaWlvTu3bvA9X379uXNN99k5cqVhIeHY2Njw+zZsxk+fDitWrVi0KBBuLu7c/ToURYtWkSzZs149tlnTdpYunQp3bt35/HHH6dPnz48/PDDODo6cvbsWVauXElMTIzUChF3T9OxOUJUMEUNcTQOF719iK6i5A19HTVqlOLi4qJUqVJFeeKJJ5S4uLhCh+jeuHEj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\n"},"metadata":{}}]},{"cell_type":"code","source":["all_aucs = {}\n","\n","for m in [3, 5, 10]:\n","    print('min_samples_leaf: %s' % m)\n","    aucs = []\n","\n","    for i in range(10, 201, 20):\n","        rf = RandomForestClassifier(n_estimators=i, max_depth=50, min_samples_leaf=m, random_state=1)\n","        rf.fit(X_train, y_train)\n","        y_pred = rf.predict_proba(X_test)[:, 1]\n","        auc = roc_auc_score(y_test, y_pred)\n","        print('%s -> %.3f' % (i, auc))\n","        aucs.append(auc)\n","    \n","    all_aucs[m] = aucs\n","    print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UcVgIoNBVdSy","executionInfo":{"status":"ok","timestamp":1685092473468,"user_tz":-180,"elapsed":12703,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"d7d9986f-8b77-4d17-f55c-f2fb43d38354"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["min_samples_leaf: 3\n","10 -> 0.398\n","30 -> 0.307\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["50 -> 0.405\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["70 -> 0.408\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["90 -> 0.398\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["110 -> 0.405\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["130 -> 0.402\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["150 -> 0.396\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["170 -> 0.394\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["190 -> 0.396\n","\n","min_samples_leaf: 5\n","10 -> 0.547\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["30 -> 0.489\n","50 -> 0.435\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["70 -> 0.448\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["90 -> 0.451\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["110 -> 0.458\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["130 -> 0.450\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["150 -> 0.444\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["170 -> 0.450\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["190 -> 0.444\n","\n","min_samples_leaf: 10\n","10 -> 0.510\n","30 -> 0.495\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["50 -> 0.468\n","70 -> 0.469\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["90 -> 0.472\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["110 -> 0.493\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["130 -> 0.482\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["150 -> 0.477\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n","<ipython-input-100-e9e6dab3ce71>:9: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["170 -> 0.478\n","190 -> 0.476\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(6, 4))\n","\n","num_trees = list(range(10, 201, 20))\n","\n","plt.plot(num_trees, all_aucs[3], label='min_samples_leaf=3', color='black', linestyle='dotted')\n","plt.plot(num_trees, all_aucs[5], label='min_samples_leaf=5', color='black', linestyle='dashed')\n","plt.plot(num_trees, all_aucs[10], label='min_samples_leaf=10', color='black', linestyle='solid')\n","    \n","plt.xticks(range(0, 201, 50))\n","plt.legend()\n","\n","plt.title('Number of trees vs AUC')\n","plt.xlabel('Number of trees')\n","plt.ylabel('AUC')\n","\n","# plt.savefig('ch06-figures/06_random_forest_n_estimators_sample_leaf.svg')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"oSHf5-FAVs-Y","executionInfo":{"status":"ok","timestamp":1685092490845,"user_tz":-180,"elapsed":1734,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"1f35fce8-15e7-4e01-fbc7-76c662db1e9d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Final"],"metadata":{"id":"mgX6BKu7V2gi"}},{"cell_type":"code","source":["rf = RandomForestClassifier(n_estimators=50, max_depth=20, min_samples_leaf=5, random_state=1)\n","rf.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"5G8dIMZ-V1_v","executionInfo":{"status":"ok","timestamp":1685092558464,"user_tz":-180,"elapsed":1084,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"c5c81d44-78d7-4a09-da20-7f29dea942cf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-102-fa3371340cf1>:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train, y_train)\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=20, min_samples_leaf=5, n_estimators=50,\n","                       random_state=1)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=20, min_samples_leaf=5, n_estimators=50,\n","                       random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_depth=20, min_samples_leaf=5, n_estimators=50,\n","                       random_state=1)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":102}]},{"cell_type":"code","source":["y_pred_rf = rf.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred_rf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r-542mYNWAKV","executionInfo":{"status":"ok","timestamp":1685092575907,"user_tz":-180,"elapsed":8,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"0ad42f9c-4976-4e31-fa51-c29a2f3d0e60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["0.43530701754385964"]},"metadata":{},"execution_count":104}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"colab":{"provenance":[{"file_id":"1Kt4aA2BWadvjw5PUnxAqn8P9aivL7iEM","timestamp":1684934772583},{"file_id":"https://github.com/alexeygrigorev/mlbookcamp-code/blob/master/chapter-03-churn-prediction/04-metrics.ipynb","timestamp":1684933782797}]}},"nbformat":4,"nbformat_minor":0}