{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Jke-GI5AqNW5y3zJo4VXKD7E974vOPjJ","timestamp":1681979368492},{"file_id":"1zeVw6N-nlgdO1jL6hxbz0aHqEIgv70hy","timestamp":1681904337831}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["1. Прочитать сигнал\n","2. Определить ширину и шаг фрейма\n","3. Применить оконную функцию\n","4. БПФ\n","5. Построить банк мел-фильтров: (для этого нужно посчитать энергию, а для этого посчитать, где будут эти точки.) Определить кол-во фильтров (20, к примеру); Определить, где будет начало первого и конец последнего; Определить, где будут находиться середины треугольников (на равном расстоянии в мелах, а затем ковертировать в герцы обратно, а затем в отсчеты, и понять, к какому треугольнику это относится); [СДЕЛАЛИ ДО ЭТОГО МОМЕНТА] умножить значения спектра на значения треугольников и сложить; Получить вектор чисел с размерностью, равной к-ну фильтров\n","6. Логарифм (осн 10)\n","7. Дискретное косинусное преобразование \n","8. Определить итоговую размерность вектора\n","9. Взять столько значений (сколько получилось размерности) от итогового вектора"],"metadata":{"id":"-K4pNl2Fzzuz"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rFgmRAfIUZBD","executionInfo":{"status":"ok","timestamp":1681904499497,"user_tz":-180,"elapsed":21950,"user":{"displayName":"Рада Герман","userId":"10837186637401407215"}},"outputId":"4cf76963-6734-434c-c658-b6d0b4e356e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pylab as plt\n","import seaborn as sns\n","from scipy.signal import windows\n","from scipy.fftpack import fft, dct\n","from glob import glob\n","import librosa\n","import librosa.display\n","import IPython.display as ipd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yx5Kz72o6w6r","executionInfo":{"status":"ok","timestamp":1681904566385,"user_tz":-180,"elapsed":3487,"user":{"displayName":"Рада Герман","userId":"10837186637401407215"}},"outputId":"b8732c21-9945-4179-9f5f-8165fcfa1ad0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["from glob import glob"],"metadata":{"id":"xyuRwASt7CKN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y, sr = librosa.load(audio_files[0])\n","print(f'y: {y[:10]}')\n","print(f'shape y: {y.shape}')\n","print(f'sr: {sr}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DXqTXVT57hCo","executionInfo":{"status":"ok","timestamp":1680517047919,"user_tz":-180,"elapsed":13016,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"efcb6d81-1ec4-424d-a107-ff06e3f9a017"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["y: [ 5.3765323e-08 -2.1233109e-08 -6.0478840e-09  3.8985974e-08\n"," -7.6543159e-08  1.1907764e-07 -1.6708483e-07  2.2135779e-07\n"," -2.8319059e-07  3.5470674e-07]\n","shape y: (72838,)\n","sr: 22050\n"]}]},{"cell_type":"code","source":["def MFCC(sound, sr, frame_width = 30, frame_step = 10, filters_amount = 20, END_AMOUNT = 13):\n","  frame_width = round(frame_width * 0.001 * sr)\n","  frame_step = round(frame_step * 0.001 * sr)\n","  magic_number = 2**np.ceil(np.log2(frame_width))\n","  left_border_of_triangle = 0\n","  right_border_of_triangle = hz2mel(sr/2)\n","  linspace_mel = np.linspace(left_border_of_triangle, right_border_of_triangle, 20 + 2)\n","  indexes_of_triangles = [int(mel2hz(i) * magic_number / (sr / 2)) for i in linspace_mel]\n","  frames = []\n","  for iframe in range(0, len(sound) - frame_width, frame_step):\n","    frame = sound[iframe : iframe + frame_width]\n","    frame_windowed = frame * windows.hamming(frame_width)\n","    fft_frame = np.abs(fft(frame_windowed, int(2**np.ceil(np.log2(frame_width)))))\n","    frames.append(fft_frame)\n","  \n","\n","  frames_after_bank = []\n","  for frame in frames:\n","    vec = []\n","    for i in range(1, len(indexes_of_triangles) - 1):\n","      left_side = np.linspace(0, 1, indexes_of_triangles[i] - indexes_of_triangles[i - 1]).tolist()\n","      right_side = np.linspace(0, 1,  indexes_of_triangles[i + 1] - indexes_of_triangles[i]).tolist()\n","      vec_tri = left_side + right_side\n","      vec.append(np.log10(sum(frame[indexes_of_triangles[i - 1] : indexes_of_triangles[i + 1]] * vec_tri)))\n","    vec = dct(vec, 1)\n","    frames_after_bank.append(vec)\n","  frames_after_bank = np.array(frames_after_bank)\n","  end_frames_after_bank = frames_after_bank[:, 0:END_AMOUNT]\n","  delta = []\n","  for i in range(len(end_frames_after_bank) - 1):\n","    delta.append(end_frames_after_bank[i + 1] - end_frames_after_bank[i])\n","  delta.append(delta[-1])\n","  delta_delta = []\n","  for i in range(len(delta) - 1):\n","    delta_delta.append(delta[i + 1] - delta[i])\n","  delta_delta.append(delta_delta[-1])\n","  S_db_mel = librosa.amplitude_to_db(np.hstack([end_frames_after_bank, delta, delta_delta]), ref=np.max)\n","  return S_db_mel.T"],"metadata":{"id":"_HGikusaWTrd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"TDnz49PND40X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def hz2mel(hz):\n","    \"\"\"Convert a value in Hertz to Mels\n","    :param hz: a value in Hz. This can also be a numpy array, conversion proceeds element-wise.\n","    :returns: a value in Mels. If an array was passed in, an identical sized array is returned.\n","    \"\"\"\n","    return 2595 * np.log10(1+hz/700.)\n","\n","def mel2hz(mel):\n","    \"\"\"Convert a value in Mels to Hertz\n","    :param mel: a value in Mels. This can also be a numpy array, conversion proceeds element-wise.\n","    :returns: a value in Hertz. If an array was passed in, an identical sized array is returned.\n","    \"\"\"\n","    return 700*(10**(mel/2595.0)-1)"],"metadata":{"id":"VPxsq85eERKR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1Ck61kM8-hgF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pylab as plt\n","import seaborn as sns\n","\n","import librosa.display\n","import IPython.display as ipd\n","\n","from itertools import cycle\n","\n","sns.set_theme(style=\"white\", palette=None)\n","color_pal = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n","color_cycle = cycle(plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"])"],"metadata":{"id":"cyRjx_dbHdyW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(10, 5))\n","# Plot the mel spectogram\n","img = librosa.display.specshow(S_db_mel.T,\n","                              x_axis='time',\n","                              ax=ax)\n","ax.set_title('Mel Spectrogram Example', fontsize=20)\n","fig.colorbar(img, ax=ax, format=f'%0.2f')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"id":"g2UuE4LuHFT0","executionInfo":{"status":"ok","timestamp":1680526029062,"user_tz":-180,"elapsed":1595,"user":{"displayName":"Михаил Долгушин","userId":"08439125244659622723"}},"outputId":"fc9cc8d6-8a43-4813-89d3-b0a061dfce23"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# This file includes routines for basic signal processing including framing and computing power spectra.\n","# Author: James Lyons 2012\n","import decimal\n","\n","import numpy\n","import math\n","import logging\n","\n","\n","def round_half_up(number):\n","    return int(decimal.Decimal(number).quantize(decimal.Decimal('1'), rounding=decimal.ROUND_HALF_UP))\n","\n","\n","def rolling_window(a, window, step=1):\n","    # http://ellisvalentiner.com/post/2017-03-21-np-strides-trick\n","    shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)\n","    strides = a.strides + (a.strides[-1],)\n","    return numpy.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)[::step]\n","\n","\n","def framesig(sig, frame_len, frame_step, winfunc=lambda x: numpy.ones((x,)), stride_trick=True):\n","    \"\"\"Frame a signal into overlapping frames.\n","    :param sig: the audio signal to frame.\n","    :param frame_len: length of each frame measured in samples.\n","    :param frame_step: number of samples after the start of the previous frame that the next frame should begin.\n","    :param winfunc: the analysis window to apply to each frame. By default no window is applied.\n","    :param stride_trick: use stride trick to compute the rolling window and window multiplication faster\n","    :returns: an array of frames. Size is NUMFRAMES by frame_len.\n","    \"\"\"\n","    slen = len(sig)\n","    frame_len = int(round_half_up(frame_len))\n","    frame_step = int(round_half_up(frame_step))\n","    if slen <= frame_len:\n","        numframes = 1\n","    else:\n","        numframes = 1 + int(math.ceil((1.0 * slen - frame_len) / frame_step))\n","\n","    padlen = int((numframes - 1) * frame_step + frame_len)\n","\n","    zeros = numpy.zeros((padlen - slen,))\n","    padsignal = numpy.concatenate((sig, zeros))\n","    if stride_trick:\n","        win = winfunc(frame_len)\n","        frames = rolling_window(padsignal, window=frame_len, step=frame_step)\n","    else:\n","        indices = numpy.tile(numpy.arange(0, frame_len), (numframes, 1)) + numpy.tile(\n","            numpy.arange(0, numframes * frame_step, frame_step), (frame_len, 1)).T\n","        indices = numpy.array(indices, dtype=numpy.int32)\n","        frames = padsignal[indices]\n","        win = numpy.tile(winfunc(frame_len), (numframes, 1))\n","\n","    return frames * win\n","\n","\n","def deframesig(frames, siglen, frame_len, frame_step, winfunc=lambda x: numpy.ones((x,))):\n","    \"\"\"Does overlap-add procedure to undo the action of framesig.\n","    :param frames: the array of frames.\n","    :param siglen: the length of the desired signal, use 0 if unknown. Output will be truncated to siglen samples.\n","    :param frame_len: length of each frame measured in samples.\n","    :param frame_step: number of samples after the start of the previous frame that the next frame should begin.\n","    :param winfunc: the analysis window to apply to each frame. By default no window is applied.\n","    :returns: a 1-D signal.\n","    \"\"\"\n","    frame_len = round_half_up(frame_len)\n","    frame_step = round_half_up(frame_step)\n","    numframes = numpy.shape(frames)[0]\n","    assert numpy.shape(frames)[1] == frame_len, '\"frames\" matrix is wrong size, 2nd dim is not equal to frame_len'\n","\n","    indices = numpy.tile(numpy.arange(0, frame_len), (numframes, 1)) + numpy.tile(\n","        numpy.arange(0, numframes * frame_step, frame_step), (frame_len, 1)).T\n","    indices = numpy.array(indices, dtype=numpy.int32)\n","    padlen = (numframes - 1) * frame_step + frame_len\n","\n","    if siglen <= 0: siglen = padlen\n","\n","    rec_signal = numpy.zeros((padlen,))\n","    window_correction = numpy.zeros((padlen,))\n","    win = winfunc(frame_len)\n","\n","    for i in range(0, numframes):\n","        window_correction[indices[i, :]] = window_correction[\n","                                               indices[i, :]] + win + 1e-15  # add a little bit so it is never zero\n","        rec_signal[indices[i, :]] = rec_signal[indices[i, :]] + frames[i, :]\n","\n","    rec_signal = rec_signal / window_correction\n","    return rec_signal[0:siglen]\n","\n","\n","def magspec(frames, NFFT):\n","    \"\"\"Compute the magnitude spectrum of each frame in frames. If frames is an NxD matrix, output will be Nx(NFFT/2+1).\n","    :param frames: the array of frames. Each row is a frame.\n","    :param NFFT: the FFT length to use. If NFFT > frame_len, the frames are zero-padded.\n","    :returns: If frames is an NxD matrix, output will be Nx(NFFT/2+1). Each row will be the magnitude spectrum of the corresponding frame.\n","    \"\"\"\n","    if numpy.shape(frames)[1] > NFFT:\n","        logging.warn(\n","            'frame length (%d) is greater than FFT size (%d), frame will be truncated. Increase NFFT to avoid.',\n","            numpy.shape(frames)[1], NFFT)\n","    complex_spec = numpy.fft.rfft(frames, NFFT)\n","    return numpy.absolute(complex_spec)\n","\n","\n","def powspec(frames, NFFT):\n","    \"\"\"Compute the power spectrum of each frame in frames. If frames is an NxD matrix, output will be Nx(NFFT/2+1).\n","    :param frames: the array of frames. Each row is a frame.\n","    :param NFFT: the FFT length to use. If NFFT > frame_len, the frames are zero-padded.\n","    :returns: If frames is an NxD matrix, output will be Nx(NFFT/2+1). Each row will be the power spectrum of the corresponding frame.\n","    \"\"\"\n","    return 1.0 / NFFT * numpy.square(magspec(frames, NFFT))\n","\n","\n","def logpowspec(frames, NFFT, norm=1):\n","    \"\"\"Compute the log power spectrum of each frame in frames. If frames is an NxD matrix, output will be Nx(NFFT/2+1).\n","    :param frames: the array of frames. Each row is a frame.\n","    :param NFFT: the FFT length to use. If NFFT > frame_len, the frames are zero-padded.\n","    :param norm: If norm=1, the log power spectrum is normalised so that the max value (across all frames) is 0.\n","    :returns: If frames is an NxD matrix, output will be Nx(NFFT/2+1). Each row will be the log power spectrum of the corresponding frame.\n","    \"\"\"\n","    ps = powspec(frames, NFFT);\n","    ps[ps <= 1e-30] = 1e-30\n","    lps = 10 * numpy.log10(ps)\n","    if norm:\n","        return lps - numpy.max(lps)\n","    else:\n","        return lps\n","\n","\n","def preemphasis(signal, coeff=0.95):\n","    \"\"\"perform preemphasis on the input signal.\n","    :param signal: The signal to filter.\n","    :param coeff: The preemphasis coefficient. 0 is no filter, default is 0.95.\n","    :returns: the filtered signal.\n","    \"\"\"\n","    return numpy.append(signal[0], signal[1:] - coeff * signal[:-1])"],"metadata":{"id":"kqmtmk3I4wyd"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yWUVRWFazv4d"},"outputs":[],"source":["from __future__ import division\n","import numpy\n","from python_speech_features import sigproc\n","from scipy.fftpack import dct\n","\n","def calculate_nfft(samplerate, winlen):\n","    \"\"\"Calculates the FFT size as a power of two greater than or equal to\n","    the number of samples in a single window length.\n","    \n","    Having an FFT less than the window length loses precision by dropping\n","    many of the samples; a longer FFT than the window allows zero-padding\n","    of the FFT buffer which is neutral in terms of frequency domain conversion.\n","    :param samplerate: The sample rate of the signal we are working with, in Hz.\n","    :param winlen: The length of the analysis window in seconds.\n","    \"\"\"\n","    window_length_samples = winlen * samplerate\n","    nfft = 1\n","    while nfft < window_length_samples:\n","        nfft *= 2\n","    return nfft\n","\n","def mfcc(signal,samplerate=16000,winlen=0.025,winstep=0.01,numcep=13,\n","         nfilt=26,nfft=None,lowfreq=0,highfreq=None,preemph=0.97,ceplifter=22,appendEnergy=True,\n","         winfunc=lambda x:numpy.ones((x,))):\n","    \"\"\"Compute MFCC features from an audio signal.\n","    :param signal: the audio signal from which to compute features. Should be an N*1 array\n","    :param samplerate: the sample rate of the signal we are working with, in Hz.\n","    :param winlen: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds)\n","    :param winstep: the step between successive windows in seconds. Default is 0.01s (10 milliseconds)\n","    :param numcep: the number of cepstrum to return, default 13\n","    :param nfilt: the number of filters in the filterbank, default 26.\n","    :param nfft: the FFT size. Default is None, which uses the calculate_nfft function to choose the smallest size that does not drop sample data.\n","    :param lowfreq: lowest band edge of mel filters. In Hz, default is 0.\n","    :param highfreq: highest band edge of mel filters. In Hz, default is samplerate/2\n","    :param preemph: apply preemphasis filter with preemph as coefficient. 0 is no filter. Default is 0.97.\n","    :param ceplifter: apply a lifter to final cepstral coefficients. 0 is no lifter. Default is 22.\n","    :param appendEnergy: if this is true, the zeroth cepstral coefficient is replaced with the log of the total frame energy.\n","    :param winfunc: the analysis window to apply to each frame. By default no window is applied. You can use numpy window functions here e.g. winfunc=numpy.hamming\n","    :returns: A numpy array of size (NUMFRAMES by numcep) containing features. Each row holds 1 feature vector.\n","    \"\"\"\n","    nfft = nfft or calculate_nfft(samplerate, winlen)\n","    feat,energy = fbank(signal,samplerate,winlen,winstep,nfilt,nfft,lowfreq,highfreq,preemph,winfunc)\n","    feat = numpy.log(feat)\n","    feat = dct(feat, type=2, axis=1, norm='ortho')[:,:numcep]\n","    feat = lifter(feat,ceplifter)\n","    if appendEnergy: feat[:,0] = numpy.log(energy) # replace first cepstral coefficient with log of frame energy\n","    return feat\n","\n","def fbank(signal,samplerate=16000,winlen=0.025,winstep=0.01,\n","          nfilt=26,nfft=512,lowfreq=0,highfreq=None,preemph=0.97,\n","          winfunc=lambda x:numpy.ones((x,))):\n","    \"\"\"Compute Mel-filterbank energy features from an audio signal.\n","    :param signal: the audio signal from which to compute features. Should be an N*1 array\n","    :param samplerate: the sample rate of the signal we are working with, in Hz.\n","    :param winlen: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds)\n","    :param winstep: the step between successive windows in seconds. Default is 0.01s (10 milliseconds)\n","    :param nfilt: the number of filters in the filterbank, default 26.\n","    :param nfft: the FFT size. Default is 512.\n","    :param lowfreq: lowest band edge of mel filters. In Hz, default is 0.\n","    :param highfreq: highest band edge of mel filters. In Hz, default is samplerate/2\n","    :param preemph: apply preemphasis filter with preemph as coefficient. 0 is no filter. Default is 0.97.\n","    :param winfunc: the analysis window to apply to each frame. By default no window is applied. You can use numpy window functions here e.g. winfunc=numpy.hamming\n","    :returns: 2 values. The first is a numpy array of size (NUMFRAMES by nfilt) containing features. Each row holds 1 feature vector. The\n","        second return value is the energy in each frame (total energy, unwindowed)\n","    \"\"\"\n","    highfreq= highfreq or samplerate/2\n","    signal = preemphasis(signal,preemph)\n","    frames = framesig(signal, winlen*samplerate, winstep*samplerate, winfunc)\n","    pspec = powspec(frames,nfft)\n","    energy = numpy.sum(pspec,1) # this stores the total energy in each frame\n","    energy = numpy.where(energy == 0,numpy.finfo(float).eps,energy) # if energy is zero, we get problems with log\n","\n","    fb = get_filterbanks(nfilt,nfft,samplerate,lowfreq,highfreq)\n","    feat = numpy.dot(pspec,fb.T) # compute the filterbank energies\n","    feat = numpy.where(feat == 0,numpy.finfo(float).eps,feat) # if feat is zero, we get problems with log\n","\n","    return feat,energy\n","\n","def logfbank(signal,samplerate=16000,winlen=0.025,winstep=0.01,\n","             nfilt=26,nfft=512,lowfreq=0,highfreq=None,preemph=0.97,\n","             winfunc=lambda x:numpy.ones((x,))):\n","    \"\"\"Compute log Mel-filterbank energy features from an audio signal.\n","    :param signal: the audio signal from which to compute features. Should be an N*1 array\n","    :param samplerate: the sample rate of the signal we are working with, in Hz.\n","    :param winlen: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds)\n","    :param winstep: the step between successive windows in seconds. Default is 0.01s (10 milliseconds)\n","    :param nfilt: the number of filters in the filterbank, default 26.\n","    :param nfft: the FFT size. Default is 512.\n","    :param lowfreq: lowest band edge of mel filters. In Hz, default is 0.\n","    :param highfreq: highest band edge of mel filters. In Hz, default is samplerate/2\n","    :param preemph: apply preemphasis filter with preemph as coefficient. 0 is no filter. Default is 0.97.\n","    :param winfunc: the analysis window to apply to each frame. By default no window is applied. You can use numpy window functions here e.g. winfunc=numpy.hamming\n","    :returns: A numpy array of size (NUMFRAMES by nfilt) containing features. Each row holds 1 feature vector.\n","    \"\"\"\n","    feat,energy = fbank(signal,samplerate,winlen,winstep,nfilt,nfft,lowfreq,highfreq,preemph,winfunc)\n","    return numpy.log(feat)\n","\n","def ssc(signal,samplerate=16000,winlen=0.025,winstep=0.01,\n","        nfilt=26,nfft=512,lowfreq=0,highfreq=None,preemph=0.97,\n","        winfunc=lambda x:numpy.ones((x,))):\n","    \"\"\"Compute Spectral Subband Centroid features from an audio signal.\n","    :param signal: the audio signal from which to compute features. Should be an N*1 array\n","    :param samplerate: the sample rate of the signal we are working with, in Hz.\n","    :param winlen: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds)\n","    :param winstep: the step between successive windows in seconds. Default is 0.01s (10 milliseconds)\n","    :param nfilt: the number of filters in the filterbank, default 26.\n","    :param nfft: the FFT size. Default is 512.\n","    :param lowfreq: lowest band edge of mel filters. In Hz, default is 0.\n","    :param highfreq: highest band edge of mel filters. In Hz, default is samplerate/2\n","    :param preemph: apply preemphasis filter with preemph as coefficient. 0 is no filter. Default is 0.97.\n","    :param winfunc: the analysis window to apply to each frame. By default no window is applied. You can use numpy window functions here e.g. winfunc=numpy.hamming\n","    :returns: A numpy array of size (NUMFRAMES by nfilt) containing features. Each row holds 1 feature vector.\n","    \"\"\"\n","    highfreq= highfreq or samplerate/2\n","    signal = preemphasis(signal,preemph)\n","    frames = framesig(signal, winlen*samplerate, winstep*samplerate, winfunc)\n","    pspec = powspec(frames,nfft)\n","    pspec = numpy.where(pspec == 0,numpy.finfo(float).eps,pspec) # if things are all zeros we get problems\n","\n","    fb = get_filterbanks(nfilt,nfft,samplerate,lowfreq,highfreq)\n","    feat = numpy.dot(pspec,fb.T) # compute the filterbank energies\n","    R = numpy.tile(numpy.linspace(1,samplerate/2,numpy.size(pspec,1)),(numpy.size(pspec,0),1))\n","\n","    return numpy.dot(pspec*R,fb.T) / feat\n","\n","def hz2mel(hz):\n","    \"\"\"Convert a value in Hertz to Mels\n","    :param hz: a value in Hz. This can also be a numpy array, conversion proceeds element-wise.\n","    :returns: a value in Mels. If an array was passed in, an identical sized array is returned.\n","    \"\"\"\n","    return 2595 * numpy.log10(1+hz/700.)\n","\n","def mel2hz(mel):\n","    \"\"\"Convert a value in Mels to Hertz\n","    :param mel: a value in Mels. This can also be a numpy array, conversion proceeds element-wise.\n","    :returns: a value in Hertz. If an array was passed in, an identical sized array is returned.\n","    \"\"\"\n","    return 700*(10**(mel/2595.0)-1)\n","\n","def get_filterbanks(nfilt=20,nfft=512,samplerate=16000,lowfreq=0,highfreq=None):\n","    \"\"\"Compute a Mel-filterbank. The filters are stored in the rows, the columns correspond\n","    to fft bins. The filters are returned as an array of size nfilt * (nfft/2 + 1)\n","    :param nfilt: the number of filters in the filterbank, default 20.\n","    :param nfft: the FFT size. Default is 512.\n","    :param samplerate: the sample rate of the signal we are working with, in Hz. Affects mel spacing.\n","    :param lowfreq: lowest band edge of mel filters, default 0 Hz\n","    :param highfreq: highest band edge of mel filters, default samplerate/2\n","    :returns: A numpy array of size nfilt * (nfft/2 + 1) containing filterbank. Each row holds 1 filter.\n","    \"\"\"\n","    highfreq= highfreq or samplerate/2\n","    assert highfreq <= samplerate/2, \"highfreq is greater than samplerate/2\"\n","\n","    # compute points evenly spaced in mels\n","    lowmel = hz2mel(lowfreq)\n","    highmel = hz2mel(highfreq)\n","    melpoints = numpy.linspace(lowmel,highmel,nfilt+2)\n","    # our points are in Hz, but we use fft bins, so we have to convert\n","    #  from Hz to fft bin number\n","    bin = numpy.floor((nfft+1)*mel2hz(melpoints)/samplerate)\n","\n","    fbank = numpy.zeros([nfilt,nfft//2+1])\n","    for j in range(0,nfilt):\n","        for i in range(int(bin[j]), int(bin[j+1])):\n","            fbank[j,i] = (i - bin[j]) / (bin[j+1]-bin[j])\n","        for i in range(int(bin[j+1]), int(bin[j+2])):\n","            fbank[j,i] = (bin[j+2]-i) / (bin[j+2]-bin[j+1])\n","    return fbank\n","\n","def lifter(cepstra, L=22):\n","    \"\"\"Apply a cepstral lifter the the matrix of cepstra. This has the effect of increasing the\n","    magnitude of the high frequency DCT coeffs.\n","    :param cepstra: the matrix of mel-cepstra, will be numframes * numcep in size.\n","    :param L: the liftering coefficient to use. Default is 22. L <= 0 disables lifter.\n","    \"\"\"\n","    if L > 0:\n","        nframes,ncoeff = numpy.shape(cepstra)\n","        n = numpy.arange(ncoeff)\n","        lift = 1 + (L/2.)*numpy.sin(numpy.pi*n/L)\n","        return lift*cepstra\n","    else:\n","        # values of L <= 0, do nothing\n","        return cepstra\n","\n","def delta(feat, N):\n","    \"\"\"Compute delta features from a feature vector sequence.\n","    :param feat: A numpy array of size (NUMFRAMES by number of features) containing features. Each row holds 1 feature vector.\n","    :param N: For each frame, calculate delta features based on preceding and following N frames\n","    :returns: A numpy array of size (NUMFRAMES by number of features) containing delta features. Each row holds 1 delta feature vector.\n","    \"\"\"\n","    if N < 1:\n","        raise ValueError('N must be an integer >= 1')\n","    NUMFRAMES = len(feat)\n","    denominator = 2 * sum([i**2 for i in range(1, N+1)])\n","    delta_feat = numpy.empty_like(feat)\n","    padded = numpy.pad(feat, ((N, N), (0, 0)), mode='edge')   # padded version of feat\n","    for t in range(NUMFRAMES):\n","        delta_feat[t] = numpy.dot(numpy.arange(-N, N+1), padded[t : t+2*N+1]) / denominator   # [t : t+2*N+1] == [(N+t)-N : (N+t)+N+1]\n","    return "]},{"cell_type":"code","source":["import pickle\n","with open('vowels_y0.pkl',\"rb\") as f:\n","  data_y = pickle.load(f)"],"metadata":{"id":"7t5wZbGnU1Di"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pickle\n","with open('vowels_a0.pkl',\"rb\") as f:\n","  data_a = pickle.load(f)"],"metadata":{"id":"jq-6cFAeZJ3V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_y[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BFbSGhD2VZoj","executionInfo":{"status":"ok","timestamp":1681905747344,"user_tz":-180,"elapsed":3,"user":{"displayName":"Рада Герман","userId":"10837186637401407215"}},"outputId":"48c4abc7-7016-418b-e32b-4cc2da9af29f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['d:/work/kaldi/corpres/audio/sta/sta0376.wav',\n"," 'y0',\n"," 2914,\n"," 7154,\n"," array([ 0.00424194,  0.0085144 ,  0.01657104, ..., -0.00360107,\n","        -0.00109863, -0.00097656], dtype=float32)]"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["mfccs = []\n","minimum = float('inf')"],"metadata":{"id":"6VLYEmw2bEPk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in data_y + data_a:\n","  if len(i[4]) < minimum:\n","    minimum = len(i[4])\n"],"metadata":{"id":"zqwMmmDSexKF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in data_y + data_a:\n","  sound = i[4][len(i[4])//2 - int(minimum/2) : len(i[4])//2 + int(minimum/2)]\n","  mfccs.append([i[1],MFCC(sound, 22050)])"],"metadata":{"id":"ne_Nk16OVn04"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mfccs_new = [[0,i[1]] if i[0] == 'y0' else [1,i[1]] for i in mfccs]"],"metadata":{"id":"GzDkgHxMbxo2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"-wQi1BBvc-a7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = [np.array(i[1]).flatten() for i in mfccs_new]\n","Y = [i[0] for i in mfccs_new]"],"metadata":{"id":"sS3nA4-ag4FZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)"],"metadata":{"id":"I2uEkaMChJ3O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = DecisionTreeClassifier()\n","model.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"OH4gbDfshfUl","executionInfo":{"status":"ok","timestamp":1681908287724,"user_tz":-180,"elapsed":1377,"user":{"displayName":"Рада Герман","userId":"10837186637401407215"}},"outputId":"84ff4d7e-561d-4881-ffbc-42ab9a1b670f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["y_pred = model.predict(x_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nHhr-zEKi-8y","executionInfo":{"status":"ok","timestamp":1681908333742,"user_tz":-180,"elapsed":255,"user":{"displayName":"Рада Герман","userId":"10837186637401407215"}},"outputId":"2a4cef17-e145-4864-f46a-e42915cc5a6d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n","       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n","       0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,\n","       1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,\n","       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n","       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score"],"metadata":{"id":"6c0u8ZFYjRM_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["accuracy_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AzP5cYVejY_A","executionInfo":{"status":"ok","timestamp":1681908433541,"user_tz":-180,"elapsed":327,"user":{"displayName":"Рада Герман","userId":"10837186637401407215"}},"outputId":"6c4eff7e-2bcf-4804-a142-516f315aaf02"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9896640826873385"]},"metadata":{},"execution_count":58}]}]}